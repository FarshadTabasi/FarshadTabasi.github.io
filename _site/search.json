[
  {
    "objectID": "posts/python-posts/Oilsands Data Analysis Part I/index.html",
    "href": "posts/python-posts/Oilsands Data Analysis Part I/index.html",
    "title": "Alberta In-situ Oilsands Production Analysis using Python - Part I",
    "section": "",
    "text": "The information provided in this blog post is for educational purposes only. Commercial use of this information is prohibited. For information on the copyright and permission to reproduce, please visit the AER Copyright and Disclaimer page at AER Copyright and Disclaimer.\nThe author assumes no responsibility for any damage or loss resulting from the use of the information provided in this blog post."
  },
  {
    "objectID": "posts/python-posts/Oilsands Data Analysis Part I/index.html#reading-the-first-file",
    "href": "posts/python-posts/Oilsands Data Analysis Part I/index.html#reading-the-first-file",
    "title": "Alberta In-situ Oilsands Production Analysis using Python - Part I",
    "section": "Reading the first file",
    "text": "Reading the first file\nThe 2010 data are stored in ST53_2010.xls file. We use the read_excel function to read the data into a DataFrame. The sheet_name argument is set to None to read all the sheets in the file. The skiprow argument is used to remove the first 3 rows of each sheet. The keys() method is used to print the names of the sheets in the file.\n\nsheets = pd.read_excel(xls_files[0], sheet_name = None, skiprows = 3)\nprint(f'sheet names: {sheets.keys()}')\n\nsheet names: dict_keys(['BITUMEN', 'WATER', 'STEAM', 'WELLS', 'SOR', 'WSR'])\n\n\nIn this post we focus on bitumen production. Water and steam data will be covered in a futur post.\n\n# read the BITUMEN sheet\nbitumen_2010 = sheets['BITUMEN']\n\nThe info method is used to print the column names and the data types of the columns.\n\nbitumen_2010.info()\n\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 177 entries, 0 to 176\nData columns (total 18 columns):\n #   Column           Non-Null Count  Dtype  \n---  ------           --------------  -----  \n 0   Operator         172 non-null    object \n 1   Scheme Name      26 non-null     object \n 2   Area             163 non-null    object \n 3   Approval Number  163 non-null    object \n 4   Recovery Method  164 non-null    object \n 5   Jan              166 non-null    float64\n 6   Feb              166 non-null    float64\n 7   Mar              166 non-null    float64\n 8   Apr              165 non-null    float64\n 9   May              165 non-null    float64\n 10  Jun              162 non-null    float64\n 11  Jul              162 non-null    float64\n 12  Aug              162 non-null    float64\n 13  Sep              161 non-null    float64\n 14  Oct              159 non-null    float64\n 15  Nov              159 non-null    float64\n 16  Dec              156 non-null    float64\n 17  Monthly Average  153 non-null    float64\ndtypes: float64(13), object(5)\nmemory usage: 25.0+ KB\n\n\nThe head method is used to print the first 5 rows of the DataFrame.\n\nbitumen_2010.head()\n\n\n\n\n\n  \n    \n      \n      Operator\n      Scheme Name\n      Area\n      Approval Number\n      Recovery Method\n      Jan\n      Feb\n      Mar\n      Apr\n      May\n      Jun\n      Jul\n      Aug\n      Sep\n      Oct\n      Nov\n      Dec\n      Monthly Average\n    \n  \n  \n    \n      0\n      Canadian Natural Resources Limited\n      NaN\n      Cold Lake\n      4746P\n      Commercial\n      587.48\n      596.72\n      637.59\n      678.74\n      705.61\n      718.99\n      697.25\n      696.88\n      763.21\n      702.21\n      696.32\n      674.99\n      679.67\n    \n    \n      1\n      Canadian Natural Resources Limited\n      NaN\n      Cold Lake\n      6726I\n      Commercial\n      171.54\n      193.66\n      187.71\n      177.54\n      176.90\n      174.50\n      160.53\n      155.97\n      168.22\n      168.27\n      139.73\n      143.48\n      168.17\n    \n    \n      2\n      Baytex Energy Ltd. (¹)\n      Cliffdale Pilot\n      Peace River Area 2\n      11034E\n      Commercial-CSS\n      0.00\n      2.55\n      6.15\n      2.25\n      4.16\n      10.59\n      5.83\n      3.27\n      9.18\n      20.09\n      15.42\n      13.15\n      8.42\n    \n    \n      3\n      North Peace Energy Corp.\n      Red Earth\n      Peace River Area 2\n      11209A\n      Commercial-CSS\n      10.30\n      4.70\n      3.11\n      2.21\n      1.63\n      0.51\n      0.00\n      0.00\n      0.40\n      0.00\n      0.00\n      0.00\n      3.27\n    \n    \n      4\n      Penn West Petroleum Ltd.\n      Seal\n      Peace River Area 2\n      11377A\n      Commercial-CSS\n      0.00\n      0.00\n      0.00\n      0.00\n      0.00\n      0.00\n      0.00\n      0.00\n      0.00\n      0.00\n      0.00\n      0.00\n      NaN\n    \n  \n\n\n\n\nThe tail method is used to print the last 5 rows of the DataFrame.\n\nbitumen_2010.tail(20)\n\n\n\n\n\n  \n    \n      \n      Operator\n      Scheme Name\n      Area\n      Approval Number\n      Recovery Method\n      Jan\n      Feb\n      Mar\n      Apr\n      May\n      Jun\n      Jul\n      Aug\n      Sep\n      Oct\n      Nov\n      Dec\n      Monthly Average\n    \n  \n  \n    \n      157\n      Bronco Energy Ltd.\n      NaN\n      Athabasca\n      9774E\n      Primary\n      28.65\n      28.58\n      27.94\n      22.84\n      91.39\n      80.23\n      77.59\n      83.21\n      64.28\n      74.45\n      69.66\n      63.98\n      59.40\n    \n    \n      158\n      Devon Canada Corporation\n      NaN\n      Cold Lake\n      9821\n      Primary\n      4.00\n      3.41\n      3.42\n      0.00\n      1.87\n      0.00\n      1.74\n      1.04\n      4.18\n      4.09\n      1.94\n      2.76\n      2.85\n    \n    \n      159\n      Frog Lake Energy Resources Corp.\n      NaN\n      Cold Lake\n      9827B\n      Primary\n      11.42\n      5.22\n      5.11\n      8.76\n      12.08\n      16.21\n      13.78\n      11.12\n      17.36\n      18.75\n      19.41\n      22.18\n      13.45\n    \n    \n      160\n      Husky Oil Operations Limited\n      NaN\n      Cold Lake\n      9873\n      Primary\n      12.32\n      12.80\n      12.66\n      11.27\n      12.93\n      11.56\n      11.63\n      11.27\n      10.62\n      10.79\n      11.50\n      10.50\n      11.65\n    \n    \n      161\n      Canadian Natural Resources Limited\n      NaN\n      Athabasca\n      9884D\n      Primary\n      65.64\n      68.55\n      69.79\n      64.72\n      68.09\n      64.18\n      63.37\n      66.10\n      64.25\n      62.55\n      59.87\n      55.29\n      64.37\n    \n    \n      162\n      Koch Exploration Canada G/P Ltd. (¹)\n      NaN\n      Cold Lake\n      9908D\n      Primary\n      0.00\n      0.00\n      0.00\n      0.00\n      0.00\n      0.00\n      0.00\n      0.00\n      0.00\n      0.00\n      0.00\n      0.00\n      NaN\n    \n    \n      163\n      NaN\n      NaN\n      NaN\n      NaN\n      Total\n      109423.83\n      116311.68\n      120054.09\n      116601.43\n      121671.30\n      122439.61\n      122234.75\n      121215.19\n      108260.73\n      118808.23\n      128196.96\n      129913.57\n      119594.28\n    \n    \n      164\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n    \n    \n      165\n      Conventional Bitumen Recovery\n      NaN\n      NaN\n      NaN\n      NaN\n      537.49\n      544.67\n      560.36\n      541.87\n      560.71\n      524.96\n      482.84\n      555.27\n      555.21\n      545.33\n      601.13\n      593.86\n      550.31\n    \n    \n      166\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n    \n    \n      167\n      Total\n      NaN\n      NaN\n      NaN\n      NaN\n      109961.32\n      116856.35\n      120614.45\n      117143.30\n      122232.01\n      122964.57\n      122717.59\n      121770.46\n      108815.94\n      119353.56\n      128798.09\n      130507.43\n      120144.59\n    \n    \n      168\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n    \n    \n      169\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n    \n    \n      170\n      Notes:\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n    \n    \n      171\n      - Monthly production totals may be revised due...\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n    \n    \n      172\n      - Total may not add due to rounding\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n    \n    \n      173\n      - Conventional Bitumen production consists of ...\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n    \n    \n      174\n      - Monthly average does not include months ther...\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n    \n    \n      175\n      ¹ Amended this month\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n    \n    \n      176\n      ¹ Amended this month\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n    \n  \n\n\n\n\nThe last company is listed on a row with the index number 162. Regardless of the number of producers in the file, we can use the index number of the Recovery Method column with a cell value of Total to subset the dataset.\n\n# get the index of the last row using np.where\nlast_row_idx = np.where(bitumen_2010[[\"Recovery Method\"]] == \"Total \")[0][0]\nbitumen_2010 = bitumen_2010.iloc[:last_row_idx, :]\n\nIn addition, we can remove the Monthly Average column from the dataset since we do will all the aggregations in our analysis.\n\nbitumen_2010 = bitumen_2010.drop(columns = ['Monthly Average'])"
  },
  {
    "objectID": "posts/python-posts/Oilsands Data Analysis Part I/index.html#reading-all-the-files-and-creating-a-single-file-with-all-the-data-for-bitumen-production",
    "href": "posts/python-posts/Oilsands Data Analysis Part I/index.html#reading-all-the-files-and-creating-a-single-file-with-all-the-data-for-bitumen-production",
    "title": "Alberta In-situ Oilsands Production Analysis using Python - Part I",
    "section": "Reading all the files and creating a single file with all the data for bitumen production",
    "text": "Reading all the files and creating a single file with all the data for bitumen production\n\n# read all the files and create a single file with all the data for bitumen production\nbitumen = pd.DataFrame()\nfor xls_file in xls_files:\n    df = pd.read_excel(xls_file, sheet_name = None, skiprows = 3)\n    bitumen = bitumen.append(create_tidy_bitumen(df['BITUMEN'], operators_dict, xls_file))\n\n\nbitumen.tail()\n\n\n\n\n\n  \n    \n      \n      Operator\n      Scheme Name\n      Area\n      Approval Number\n      Recovery Method\n      Jan\n      Feb\n      Mar\n      Apr\n      May\n      Jun\n      Jul\n      Aug\n      Sep\n      Oct\n      Nov\n      Dec\n      Monthly Average\n      Year\n    \n  \n  \n    \n      177\n      CNRL\n      NaN\n      Cold Lake\n      9821E\n      Primary\n      2.14\n      2.49\n      1.97\n      2.23\n      2.39\n      2.26\n      2.52\n      1.77\n      2.38\n      2.19\n      2.30\n      1.55\n      2.18\n      2022\n    \n    \n      178\n      Frog Lake Energy Resources Corp.\n      NaN\n      Cold Lake\n      9827P\n      Primary\n      41.22\n      54.36\n      49.92\n      44.98\n      49.07\n      58.38\n      59.56\n      61.54\n      72.03\n      69.83\n      67.91\n      62.90\n      57.64\n      2022\n    \n    \n      179\n      Cenovus\n      NaN\n      Cold Lake\n      9873F\n      Primary\n      31.12\n      25.87\n      26.76\n      22.68\n      19.93\n      17.73\n      26.04\n      24.67\n      37.05\n      13.47\n      18.81\n      16.17\n      23.36\n      2022\n    \n    \n      180\n      CNRL\n      Brintnell\n      Athabasca\n      9884F\n      Primary\n      11.81\n      12.13\n      14.09\n      23.50\n      18.24\n      21.50\n      22.99\n      21.93\n      18.31\n      12.54\n      10.67\n      9.79\n      16.46\n      2022\n    \n    \n      181\n      Baytex\n      NaN\n      Cold Lake\n      9908J\n      Primary\n      50.70\n      55.11\n      62.10\n      59.68\n      58.63\n      58.42\n      46.10\n      56.89\n      46.54\n      43.03\n      36.08\n      32.56\n      50.49\n      2022"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Julia, Python, and R Applications in Energy Industry",
    "section": "",
    "text": "Thermal Recovery - Part II\n\n\nHeat Conduction in a 1D Reservoir\n\n\n\n\njulia\n\n\nthermal recovery\n\n\nheat conduction\n\n\nheat loss\n\n\n\n\n\n\n\n\n\n\n\nMar 12, 2023\n\n\nFarshad Tabasinejad\n\n\n\n\n\n\n  \n\n\n\n\nThermal Recovery - Part I\n\n\nWater/Steam Properties\n\n\n\n\njulia\n\n\nthermal recovery\n\n\nsteam properties\n\n\nSteamTable.jl\n\n\n\n\n\n\n\n\n\n\n\nMar 11, 2023\n\n\nFarshad Tabasinejad\n\n\n\n\n\n\n  \n\n\n\n\nAlberta In-situ Oilsands Production Analysis using Python - Part III\n\n\nData analysis and visualization\n\n\n\n\npython\n\n\ndata analysis\n\n\ndata visualization\n\n\npandas\n\n\nseaborn\n\n\nmatplotlib\n\n\n\n\n\n\n\n\n\n\n\nMar 5, 2023\n\n\nFarshad Tabasinejad\n\n\n\n\n\n\n  \n\n\n\n\nAlberta In-situ Oilsands Production Analysis using Python - Part II\n\n\nPreparing a tidy dataset for data analysis and visualization\n\n\n\n\npython\n\n\npandas\n\n\ndata analysis\n\n\ndata visualization\n\n\n\n\n\n\n\n\n\n\n\nMar 4, 2023\n\n\nFarshad Tabasinejad\n\n\n\n\n\n\n  \n\n\n\n\nAlberta In-situ Oilsands Production Analysis using Python - Part I\n\n\nData extraction from AER website\n\n\n\n\npython\n\n\nweb scraping\n\n\n\n\n\n\n\n\n\n\n\nFeb 26, 2023\n\n\nFarshad Tabasinejad\n\n\n\n\n\n\n  \n\n\n\n\nWelcome To My Blog\n\n\n\n\n\n\n\nannouncement\n\n\n\n\n\n\n\n\n\n\n\nFeb 25, 2023\n\n\nFarshad Tabasinejad\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Welcome to my weblog! My name is Farshad, and I am excited to share my experiences and insights with you. With 20 years of experience in the petroleum industry and academia, I have worked on reservoir engineering aspects of oilsands and heavy oil reservoirs. I have also been involved in several reservoir modeling and geomechanics studies of unconventional oil and gas reservoirs. Currently, I work as a process analytics consultant in the energy industry, providing engineering and data science solutions to optimize production and maintenance costs of refineries and upgraders.\nWhen I am not working, you can often find me indulging in my passions for hiking, playing table tennis and squash, as well as volleyball and tennis. Additionally, I enjoy watching Real Madrid games as a die-hard Los Blancos fan. Despite my loyalty to Real Madrid, I cannot help but admire the unparalleled talent of Leo Messi (The GOAT), which makes life even more beautiful."
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code."
  },
  {
    "objectID": "posts/python-posts/Oilsands Data Analysis Part II/index.html",
    "href": "posts/python-posts/Oilsands Data Analysis Part II/index.html",
    "title": "Alberta In-situ Oilsands Production Analysis using Python - Part II",
    "section": "",
    "text": "This blog post is for educational purposes only. Any commercial use of the information provided in this blog post is prohibited. For more information about the AER copyright and permission to reproduce, please visit AER Copyright and Disclaimer. The author is not responsible for any damage or loss caused by the use of the information provided in this blog post."
  },
  {
    "objectID": "posts/python-posts/Oilsands Data Analysis Part II/index.html#loading-the-data",
    "href": "posts/python-posts/Oilsands Data Analysis Part II/index.html#loading-the-data",
    "title": "Alberta In-situ Oilsands Production Analysis using Python - Part II",
    "section": "Loading the Data",
    "text": "Loading the Data\nAll files are stored in the current local directory. We use the glob module to list all .csv files in the directory and then use pandas to read the data into a DataFrame. The matplotlib and seaborn modules are used to create the plots.\n\nimport glob\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nThe glob module is used to list all .csv files in the directory.\n\ncsv_files = glob.glob('*.csv')\ncsv_files\n\n['bitumen.csv']\n\n\nthe bitumen.csv file is loaded into a dataframe using the read_csv function.\n\nbitumen = pd.read_csv(\"bitumen.csv\")\nbitumen.head()\n\n\n\n\n\n  \n    \n      \n      Operator\n      Scheme Name\n      Area\n      Approval Number\n      Recovery Method\n      Jan\n      Feb\n      Mar\n      Apr\n      May\n      Jun\n      Jul\n      Aug\n      Sep\n      Oct\n      Nov\n      Dec\n      Year\n    \n  \n  \n    \n      0\n      CNRL\n      NaN\n      Cold Lake\n      4746P\n      Commercial\n      587.48\n      596.72\n      637.59\n      678.74\n      705.61\n      718.99\n      697.25\n      696.88\n      763.21\n      702.21\n      696.32\n      674.99\n      2010\n    \n    \n      1\n      CNRL\n      NaN\n      Cold Lake\n      6726I\n      Commercial\n      171.54\n      193.66\n      187.71\n      177.54\n      176.90\n      174.50\n      160.53\n      155.97\n      168.22\n      168.27\n      139.73\n      143.48\n      2010\n    \n    \n      2\n      Baytex\n      Cliffdale Pilot\n      Peace River Area 2\n      11034E\n      Commercial-CSS\n      0.00\n      2.55\n      6.15\n      2.25\n      4.16\n      10.59\n      5.83\n      3.27\n      9.18\n      20.09\n      15.42\n      13.15\n      2010\n    \n    \n      3\n      North Peace Energy Corp.\n      Red Earth\n      Peace River Area 2\n      11209A\n      Commercial-CSS\n      10.30\n      4.70\n      3.11\n      2.21\n      1.63\n      0.51\n      0.00\n      0.00\n      0.40\n      0.00\n      0.00\n      0.00\n      2010\n    \n    \n      4\n      Penn West\n      Seal\n      Peace River Area 2\n      11377A\n      Commercial-CSS\n      0.00\n      0.00\n      0.00\n      0.00\n      0.00\n      0.00\n      0.00\n      0.00\n      0.00\n      0.00\n      0.00\n      0.00\n      2010"
  },
  {
    "objectID": "posts/python-posts/Oilsands Data Analysis Part II/index.html#analyzing-the-data-for-the-first-file-year-2010",
    "href": "posts/python-posts/Oilsands Data Analysis Part II/index.html#analyzing-the-data-for-the-first-file-year-2010",
    "title": "Alberta Oilsands Production Analysis using Python",
    "section": "Analyzing the Data for the first file [year: 2010]",
    "text": "Analyzing the Data for the first file [year: 2010]\nIn this section we first create a tidy dataset in several steps for the first file in the list. We then summarize all the steps in a few functions and read all the files and create a single file with all the data.\nMost of these steps are already covered in the previous post Downloading Alberta Oilsands Monthly Production Data using Python. To keep this post short, I will not go into details about the steps that are already covered in the previous post. The xlrd engine is used internally by pandas to read the XLS files. None is assigned to the sheet_name argument to read all the sheets in the file. The skiprows argument is used to skip the first 3 rows in each sheet. As explained in the previous post, there are several rows at the end of each sheet with additional information that are not needed for our analysis. We use the row index of the cell with the value Total in the Recovery Method column to skip the rows at the end of BITUMEN, WATER, STEAM, and WELLS sheets. The SOR and WSR sheets do not have the Recovery Method column and the row index of the cell with the value Notes: in the Operator column can be used to skip the rows at the end of SOR and WSR sheets. We calculate SOR and WSR values directly in this post and do not need the SOR and WSR sheets. We also skip analyzing the WELLS sheet. Please refer to the previous post for more details on all steps.\n\n# read the first file\ndf_2010 = pd.read_excel(xls_files[0], sheet_name = None, skiprows = 3)\ndf_2010.keys()\n\ndict_keys(['BITUMEN', 'WATER', 'STEAM', 'WELLS', 'SOR', 'WSR'])\n\n\n\n# read the BITUMEN sheet]\nbitumen_2010 = df_2010['BITUMEN']\n\n\n# get the index of the last row using np.where\nlast_row_idx = np.where(bitumen_2010[[\"Recovery Method\"]] == \"Total \")[0][0]\nbitumen_2010 = bitumen_2010.iloc[:last_row_idx, :]\n\n\n# create a dictionary to make Operator names consistent\noperators_dict = {'Blackpearl Resources Inc.': 'BlackPearl',\n                  'BlackPearl Resources Inc.': 'BlackPearl',\n                  'Bonavista Petroleum Ltd.': 'Bonavista',\n                  'Bonavista Energy Corporation': 'Bonavista',\n                  'CNOOC Petroleum North America ULC': 'CNOOC',\n                  'Canadian Natural Resources': 'CNRL',\n                  'Canadian Natural Resources Limited': 'CNRL',\n                  'Canadian Natural Upgrading Limited': 'CNRL',\n                  'Cenovus Energy Inc.': 'Cenovus',\n                  'Cenovus FCCL Ltd.': 'Cenovus',\n                  'ConocoPhillips Canada Resources Corp.': 'ConocoPhillips',\n                  'ConocoPhillips Canada Limited': 'ConocoPhillips',\n                  'Devon Canada Corporation': 'Devon',\n                  'Devon NEC Corporation': 'Devon',\n                  'ExxonMobil Canada Ltd.': 'Imperial',\n                  'Greenfire Hangingstone Operating Corporation': 'Greenfire',\n                  'Greenfire Resources Operating Corporation': 'Greenfire',\n                  'Husky Oil Operations Limited' : 'Husky',\n                  'Husky Oil Operations Ltd.' : 'Husky',\n                  'Imperial Oil Resources': 'Imperial',\n                  'Imperial Oil Resources Limited': 'Imperial',\n                  'Koch Exploration Canada G/P Ltd.': 'Koch',\n                  'Koch Oil Sands Operating ULC': 'Koch',\n                  'MEG Energy Corp.': 'MEG',\n                  'Meg Energy Corp.': 'MEG',\n                  'Murphy Oil Canada': 'Murphy',\n                  'Murphy Oil Company Ltd.': 'Murphy',\n                  'Nexen Energy ULC': 'Nexen',\n                  'Nexen Inc.': 'Nexen',\n                  'OSUM Oil Sands Corp.': 'OSUM',\n                  'Osum Production Corp.': 'OSUM',\n                  'Pengrowth Corporation': 'Pengrowth',\n                  'Pengrowth Energy Corporation': 'Pengrowth',\n                  'Penn West Energy Trust': 'Penn West',\n                  'Penn West Petroleum Ltd.': 'Penn West',\n                  'Perpetual Energy Inc.': 'Perpetual',\n                  'Perpetual Energy Operating Corp.': 'Perpetual',\n                  'Perpetual Operating Corp.': 'Perpetual',\n                  'PetroChina Canada Ltd.': 'PetroChina',\n                  'Petrochina Canada Ltd.': 'PetroChina',\n                  'Shell Canada Energy': 'Shell',\n                  'Shell Canada Limited': 'Shell',\n                  'Spur Petroleum Ltd.': 'Spur',\n                  'Spur Resources Ltd.': 'Spur',\n                  'Woodcote Oil & Gas Inc.': 'Woodcote',\n                  'Woodcote Oil Corp.': 'Woodcote'\n                  }\n\n\n# create a tidy dataset for bitumen production by removing additional information in parenthesis from the Operator column, making operator names consistent, and grouping by operator\nbitumen_2010 = (bitumen_2010\n            .dropna(subset = ['Operator'])\n            .assign(Operator = lambda x: x.Operator.str.split('(').str[0].str.strip())\n            .assign(Operator = lambda x: x.Operator.str.replace('  ', ' '))\n            .replace({'Operator': operators_dict})\n            .groupby(['Operator']).sum().reset_index()\n            .assign(Year = xls_files[0].split('_')[-1].split('-')[0])\n)\nbitumen_2010\n\n\n\n\n\n  \n    \n      \n      Operator\n      Jan\n      Feb\n      Mar\n      Apr\n      May\n      Jun\n      Jul\n      Aug\n      Sep\n      Oct\n      Nov\n      Dec\n      Monthly Average\n      Year\n    \n  \n  \n    \n      0\n      Action Energy Inc.\n      2.75\n      3.13\n      3.10\n      2.40\n      2.57\n      2.12\n      2.91\n      2.61\n      1.94\n      2.24\n      1.83\n      0.73\n      2.36\n      2010\n    \n    \n      1\n      Baytex Energy Ltd.\n      1329.74\n      1328.52\n      1521.26\n      1265.24\n      1521.75\n      1839.30\n      1789.96\n      1804.53\n      1839.56\n      1701.64\n      1809.96\n      1777.24\n      1632.68\n      2010\n    \n    \n      2\n      Bellatrix Exploration Ltd.\n      0.00\n      0.00\n      0.00\n      0.00\n      0.00\n      0.00\n      0.00\n      0.00\n      0.00\n      0.00\n      0.00\n      15.81\n      15.81\n      2010\n    \n    \n      3\n      BlackPearl\n      1.34\n      3.32\n      1.43\n      0.69\n      1.86\n      2.07\n      1.44\n      1.94\n      3.37\n      1.47\n      1.12\n      1.84\n      1.82\n      2010\n    \n    \n      4\n      Bonavista\n      318.60\n      296.70\n      287.84\n      268.92\n      268.04\n      239.30\n      228.08\n      225.62\n      225.54\n      230.28\n      290.99\n      234.76\n      259.57\n      2010\n    \n    \n      5\n      Bronco Energy Ltd.\n      28.65\n      28.58\n      27.94\n      22.84\n      91.39\n      80.23\n      77.59\n      83.21\n      64.28\n      74.45\n      69.66\n      63.98\n      59.40\n      2010\n    \n    \n      6\n      Buffalo Resources Corp.\n      15.11\n      12.01\n      16.74\n      16.53\n      19.37\n      18.51\n      14.97\n      12.08\n      16.79\n      19.92\n      14.30\n      17.13\n      16.12\n      2010\n    \n    \n      7\n      CNRL\n      22431.43\n      25310.41\n      28066.11\n      25308.06\n      30052.06\n      29492.93\n      28992.88\n      28616.60\n      26751.61\n      28027.22\n      32006.40\n      33009.93\n      28316.22\n      2010\n    \n    \n      8\n      Cenovus\n      21595.79\n      22839.19\n      22407.49\n      22435.89\n      22247.41\n      21986.20\n      22176.78\n      21117.60\n      22960.34\n      21720.81\n      22587.47\n      22853.46\n      22244.04\n      2010\n    \n    \n      9\n      Connacher Oil And Gas Limited\n      1050.30\n      1134.17\n      1156.09\n      1079.40\n      822.28\n      1065.51\n      1161.84\n      1457.94\n      1725.33\n      1977.97\n      2115.62\n      2225.37\n      1651.25\n      2010\n    \n    \n      10\n      ConocoPhillips\n      2664.15\n      2800.02\n      3156.73\n      3244.68\n      3329.58\n      3207.50\n      3529.19\n      3570.22\n      3378.29\n      3755.21\n      3689.54\n      3721.19\n      3337.19\n      2010\n    \n    \n      11\n      Crispin Energy Inc.\n      11.32\n      9.06\n      9.59\n      5.26\n      8.71\n      8.02\n      5.95\n      8.71\n      7.85\n      8.25\n      8.11\n      11.88\n      9.09\n      2010\n    \n    \n      12\n      Devon\n      9982.83\n      9739.64\n      10056.54\n      9728.74\n      10701.02\n      10697.26\n      10221.05\n      10042.92\n      6980.52\n      7915.55\n      9785.62\n      9882.21\n      9644.97\n      2010\n    \n    \n      13\n      Frog Lake Energy Resources Corp.\n      11.42\n      5.22\n      5.11\n      8.76\n      12.08\n      16.21\n      13.78\n      11.12\n      17.36\n      18.75\n      19.41\n      22.18\n      13.45\n      2010\n    \n    \n      14\n      Harvest Operations Corp.\n      51.27\n      55.08\n      54.10\n      52.22\n      55.95\n      51.18\n      50.49\n      48.75\n      48.06\n      53.05\n      53.98\n      49.14\n      51.94\n      2010\n    \n    \n      15\n      Husky\n      2203.19\n      2151.47\n      1865.46\n      2092.67\n      1894.59\n      2167.51\n      2178.13\n      2250.67\n      2111.99\n      2251.10\n      2542.06\n      2660.95\n      2217.66\n      2010\n    \n    \n      16\n      Imperial\n      23710.09\n      24543.85\n      23962.57\n      23155.58\n      22206.07\n      22263.13\n      22296.39\n      22960.70\n      21996.35\n      23156.01\n      23701.99\n      23956.75\n      23159.13\n      2010\n    \n    \n      17\n      Japan Canada Oil Sands Limited\n      1186.33\n      1155.23\n      1062.03\n      783.28\n      1218.67\n      1166.01\n      1132.23\n      1080.17\n      1188.32\n      1133.37\n      1214.59\n      1129.26\n      1120.79\n      2010\n    \n    \n      18\n      Koch\n      3.47\n      5.60\n      11.13\n      2.39\n      6.26\n      3.96\n      5.47\n      19.32\n      29.53\n      28.18\n      20.82\n      24.20\n      13.36\n      2010\n    \n    \n      19\n      MEG\n      1222.04\n      2012.71\n      2666.20\n      3596.39\n      3883.73\n      4189.44\n      4016.79\n      4290.65\n      843.95\n      4507.48\n      4475.88\n      4251.55\n      3329.73\n      2010\n    \n    \n      20\n      Manitok Exploration Inc.\n      9.01\n      13.28\n      12.99\n      10.77\n      12.44\n      10.92\n      11.79\n      10.71\n      9.70\n      5.97\n      11.71\n      11.92\n      10.93\n      2010\n    \n    \n      21\n      Murphy\n      875.34\n      872.36\n      856.28\n      852.99\n      791.06\n      771.88\n      770.08\n      769.41\n      797.46\n      815.91\n      857.67\n      892.91\n      830.25\n      2010\n    \n    \n      22\n      Nexen\n      2576.60\n      2803.16\n      3490.64\n      3906.26\n      3737.76\n      4240.79\n      4459.99\n      3984.57\n      3819.51\n      4604.76\n      4176.14\n      4628.39\n      3869.05\n      2010\n    \n    \n      23\n      North Peace Energy Corp.\n      10.30\n      4.70\n      3.11\n      2.21\n      1.63\n      0.51\n      0.00\n      0.00\n      0.40\n      0.00\n      0.00\n      0.00\n      3.27\n      2010\n    \n    \n      24\n      Penn West\n      279.01\n      281.36\n      272.08\n      274.62\n      278.90\n      262.98\n      235.53\n      276.71\n      283.20\n      275.46\n      314.75\n      378.70\n      289.93\n      2010\n    \n    \n      25\n      Prosper Petroleum Ltd.\n      314.33\n      320.06\n      290.21\n      259.07\n      290.71\n      274.26\n      270.47\n      251.36\n      234.31\n      211.85\n      166.20\n      257.03\n      261.66\n      2010\n    \n    \n      26\n      Shell\n      4139.89\n      3978.75\n      4047.93\n      3849.33\n      3860.94\n      3670.44\n      3690.54\n      3605.76\n      3368.87\n      2938.82\n      3201.53\n      2933.30\n      3607.18\n      2010\n    \n    \n      27\n      Solara Exploration Ltd.\n      0.00\n      0.00\n      0.00\n      0.00\n      10.84\n      9.80\n      11.26\n      11.52\n      11.45\n      8.62\n      5.93\n      8.85\n      9.78\n      2010\n    \n    \n      28\n      Statoil Canada Ltd.\n      0.00\n      0.00\n      0.00\n      0.00\n      0.00\n      0.00\n      0.00\n      0.00\n      5.51\n      81.05\n      138.44\n      180.31\n      101.33\n      2010\n    \n    \n      29\n      Suncor Energy Inc.\n      13049.45\n      14253.79\n      14378.61\n      13960.11\n      13876.08\n      14206.33\n      14412.89\n      14227.60\n      9025.13\n      12732.81\n      14212.22\n      13935.72\n      13522.57\n      2010\n    \n    \n      30\n      Sunshine Oilsands Ltd.\n      0.00\n      0.00\n      0.00\n      1.52\n      1.98\n      2.10\n      4.15\n      0.00\n      0.00\n      1.39\n      5.54\n      17.06\n      4.82\n      2010\n    \n    \n      31\n      Total E&P Joslyn Ltd.\n      0.00\n      0.00\n      0.00\n      0.00\n      0.00\n      0.00\n      0.00\n      0.00\n      0.00\n      0.00\n      0.00\n      0.00\n      0.00\n      2010\n    \n    \n      32\n      Twin Butte Energy Ltd.\n      350.08\n      350.31\n      364.78\n      414.61\n      463.89\n      493.21\n      472.13\n      472.19\n      514.21\n      545.26\n      692.22\n      756.90\n      490.82\n      2010\n    \n    \n      33\n      Watch Resources Ltd.\n      0.00\n      0.00\n      0.00\n      0.00\n      1.68\n      0.00\n      0.00\n      0.00\n      0.00\n      3.38\n      5.26\n      2.92\n      3.31\n      2010\n    \n  \n\n\n\n\n\n# define a function to create a tidy dataset for bitumen production\ndef create_tidy_bitumen(df, operators_dict, xls_file):\n    last_row_idx = np.where(df[[\"Recovery Method\"]] == \"Total \")[0][0]\n    df = df.iloc[:last_row_idx, :]\n    df = (df\n            .dropna(subset = ['Operator'])\n            .assign(Operator = lambda x: x.Operator.str.split('(').str[0].str.strip())\n            .assign(Operator = lambda x: x.Operator.str.replace('  ', ' '))\n            .replace({'Operator': operators_dict})\n            .assign(Year = xls_file.split('_')[-1].split('-')[0])\n    )\n    return df"
  },
  {
    "objectID": "posts/python-posts/Oilsands Data Analysis Part II/index.html#reading-all-the-files-and-creating-a-single-file-with-all-the-data-for-bitumen-production",
    "href": "posts/python-posts/Oilsands Data Analysis Part II/index.html#reading-all-the-files-and-creating-a-single-file-with-all-the-data-for-bitumen-production",
    "title": "Alberta Oilsands Production Analysis using Python",
    "section": "Reading all the files and creating a single file with all the data for bitumen production",
    "text": "Reading all the files and creating a single file with all the data for bitumen production\n\n# read all the files and create a single file with all the data for bitumen production\nbitumen = pd.DataFrame()\nfor xls_file in xls_files:\n    df = pd.read_excel(xls_file, sheet_name = None, skiprows = 3)\n    bitumen = bitumen.append(create_tidy_bitumen(df['BITUMEN'], operators_dict, xls_file))\n\n\nbitumen.tail()\n\n\n\n\n\n  \n    \n      \n      Operator\n      Scheme Name\n      Area\n      Approval Number\n      Recovery Method\n      Jan\n      Feb\n      Mar\n      Apr\n      May\n      Jun\n      Jul\n      Aug\n      Sep\n      Oct\n      Nov\n      Dec\n      Monthly Average\n      Year\n    \n  \n  \n    \n      177\n      CNRL\n      NaN\n      Cold Lake\n      9821E\n      Primary\n      2.14\n      2.49\n      1.97\n      2.23\n      2.39\n      2.26\n      2.52\n      1.77\n      2.38\n      2.19\n      2.30\n      1.55\n      2.18\n      2022\n    \n    \n      178\n      Frog Lake Energy Resources Corp.\n      NaN\n      Cold Lake\n      9827P\n      Primary\n      41.22\n      54.36\n      49.92\n      44.98\n      49.07\n      58.38\n      59.56\n      61.54\n      72.03\n      69.83\n      67.91\n      62.90\n      57.64\n      2022\n    \n    \n      179\n      Cenovus\n      NaN\n      Cold Lake\n      9873F\n      Primary\n      31.12\n      25.87\n      26.76\n      22.68\n      19.93\n      17.73\n      26.04\n      24.67\n      37.05\n      13.47\n      18.81\n      16.17\n      23.36\n      2022\n    \n    \n      180\n      CNRL\n      Brintnell\n      Athabasca\n      9884F\n      Primary\n      11.81\n      12.13\n      14.09\n      23.50\n      18.24\n      21.50\n      22.99\n      21.93\n      18.31\n      12.54\n      10.67\n      9.79\n      16.46\n      2022\n    \n    \n      181\n      Baytex Energy Ltd.\n      NaN\n      Cold Lake\n      9908J\n      Primary\n      50.70\n      55.11\n      62.10\n      59.68\n      58.63\n      58.42\n      46.10\n      56.89\n      46.54\n      43.03\n      36.08\n      32.56\n      50.49\n      2022"
  },
  {
    "objectID": "posts/python-posts/Oilsands Data Analysis Part II/index.html#reading-all-the-files-and-creating-a-single-file-with-all-the-data-for-water-production",
    "href": "posts/python-posts/Oilsands Data Analysis Part II/index.html#reading-all-the-files-and-creating-a-single-file-with-all-the-data-for-water-production",
    "title": "Alberta Oilsands Production Analysis using Python",
    "section": "Reading all the files and creating a single file with all the data for water production",
    "text": "Reading all the files and creating a single file with all the data for water production\n\n# read all the files and create a single file with all the data for water production\nwater = pd.DataFrame()\nfor xls_file in xls_files:\n    df = pd.read_excel(xls_file, sheet_name = None, skiprows = 3)\n    water = water.append(create_tidy_bitumen(df['WATER'], operators_dict, xls_file))\n\n\nwater.tail()\n\n\n\n\n\n  \n    \n      \n      Operator\n      Scheme Name\n      Area\n      Approval Number\n      Recovery Method\n      Jan\n      Feb\n      Mar\n      Apr\n      May\n      Jun\n      Jul\n      Aug\n      Sep\n      Oct\n      Nov\n      Dec\n      Monthly Average\n      Year\n    \n  \n  \n    \n      177\n      CNRL\n      NaN\n      Cold Lake\n      9821E\n      Primary\n      9.50\n      9.81\n      11.04\n      10.97\n      10.26\n      10.46\n      9.27\n      7.21\n      9.39\n      9.38\n      10.16\n      10.36\n      9.82\n      2022\n    \n    \n      178\n      Frog Lake Energy Resources Corp.\n      NaN\n      Cold Lake\n      9827P\n      Primary\n      89.34\n      114.82\n      133.46\n      122.11\n      136.43\n      138.78\n      167.84\n      145.04\n      159.22\n      155.63\n      154.77\n      154.88\n      139.36\n      2022\n    \n    \n      179\n      Cenovus\n      NaN\n      Cold Lake\n      9873F\n      Primary\n      240.01\n      255.74\n      339.92\n      319.36\n      279.01\n      313.08\n      425.48\n      486.07\n      509.81\n      455.23\n      407.04\n      421.18\n      370.99\n      2022\n    \n    \n      180\n      CNRL\n      Brintnell\n      Athabasca\n      9884F\n      Primary\n      2.98\n      3.12\n      2.97\n      4.24\n      4.07\n      5.50\n      6.70\n      6.62\n      6.04\n      4.92\n      4.74\n      4.46\n      4.70\n      2022\n    \n    \n      181\n      Baytex Energy Ltd.\n      NaN\n      Cold Lake\n      9908J\n      Primary\n      6.22\n      0.01\n      3.55\n      1.96\n      1.92\n      4.33\n      3.91\n      2.37\n      1.67\n      2.49\n      2.64\n      4.58\n      2.97\n      2022"
  },
  {
    "objectID": "posts/python-posts/Oilsands Data Analysis Part II/index.html#reading-all-the-files-and-creating-a-single-file-with-all-the-data-for-steam-injection",
    "href": "posts/python-posts/Oilsands Data Analysis Part II/index.html#reading-all-the-files-and-creating-a-single-file-with-all-the-data-for-steam-injection",
    "title": "Alberta Oilsands Production Analysis using Python",
    "section": "Reading all the files and creating a single file with all the data for steam injection",
    "text": "Reading all the files and creating a single file with all the data for steam injection\n\n# read all the files and create a single file with all the data for steam injestion\nsteam = pd.DataFrame()\nfor xls_file in xls_files:\n    df = pd.read_excel(xls_file, sheet_name = None, skiprows = 3)\n    steam = steam.append(create_tidy_bitumen(df['STEAM'], operators_dict, xls_file))"
  },
  {
    "objectID": "posts/python-posts/Oilsands Data Analysis Part II/index.html#aggregation-and-visualization-of-bitumen-production-data",
    "href": "posts/python-posts/Oilsands Data Analysis Part II/index.html#aggregation-and-visualization-of-bitumen-production-data",
    "title": "Alberta Oilsands Production Analysis using Python",
    "section": "Aggregation and visualization of bitumen production data",
    "text": "Aggregation and visualization of bitumen production data\n\nAverage bitumen production rate by year\nThe daily bitumen production rate is reported as a monthly average in m3/day. An approximate for the yearly average production rate in m3/day is calculated by taking the average of the monthly average production rates. The yearly average production rate is then converted to Mm3/day by dividing by 1,000.\n\n# aggregate daily bitumen production by year in Mm3/day\nbitumen_agg = (bitumen\n              .assign(Daily_Production_Rate = lambda x: x.loc[:,\"Jan\":\"Dec\"].mean(axis = 1))\n              .drop(columns = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'])\n              .groupby(['Year'])\n              .sum()\n              .div(1000)\n              .reset_index()\n              )\nbitumen_agg\n\n\n\n\n\n  \n    \n      \n      Year\n      Monthly Average\n      Daily_Production_Rate\n    \n  \n  \n    \n      0\n      2010\n      120.10148\n      119.596470\n    \n    \n      1\n      2011\n      135.09934\n      134.691030\n    \n    \n      2\n      2012\n      157.18967\n      157.040421\n    \n    \n      3\n      2013\n      176.16530\n      175.839908\n    \n    \n      4\n      2014\n      201.17803\n      200.679804\n    \n    \n      5\n      2016\n      221.22142\n      220.765067\n    \n    \n      6\n      2017\n      246.25331\n      245.572865\n    \n    \n      7\n      2018\n      250.13776\n      249.694999\n    \n    \n      8\n      2019\n      245.79257\n      245.745934\n    \n    \n      9\n      2020\n      240.04503\n      237.340961\n    \n    \n      10\n      2021\n      264.73631\n      264.391272\n    \n    \n      11\n      2022\n      270.09224\n      269.899715\n    \n  \n\n\n\n\n\n# plot bitumen production by year\nfig, ax = plt.subplots(figsize = (9, 6))\nsns.barplot(x = 'Year', y = 'Daily_Production_Rate', data = bitumen_agg, ax = ax)\nax.set_title('Average Bitumen Production Rate per Year')\nax.set_xlabel('Year')\nax.set_ylabel('Bitumen Production Rate (Mm3/day)')\nplt.show()\n\n\n\n\n\n\nThe 5 largest producers in 2022\n\n# aggregate daily bitumen production by operator in Mm3/day\nbitumen_agg = (bitumen\n              .query(\"Year == '2022'\")\n              .assign(Daily_Production_Rate = lambda x: x.loc[:,\"Jan\":\"Dec\"].mean(axis = 1))\n              .drop(columns = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'])\n              .groupby(['Operator'])\n              .sum()\n              .div(1000)\n              .sort_values(by = 'Daily_Production_Rate', ascending = False)\n              .reset_index()\n              .head(5)\n              )\nbitumen_agg\n\n\n\n\n\n  \n    \n      \n      Operator\n      Monthly Average\n      Daily_Production_Rate\n    \n  \n  \n    \n      0\n      Cenovus\n      76.72720\n      76.725747\n    \n    \n      1\n      CNRL\n      55.97693\n      55.968093\n    \n    \n      2\n      Suncor Energy Inc.\n      36.72175\n      36.721742\n    \n    \n      3\n      Imperial\n      23.12158\n      23.121582\n    \n    \n      4\n      ConocoPhillips\n      22.14255\n      22.142553\n    \n  \n\n\n\n\n\n# plot bitumen production by operator\nfig, ax = plt.subplots(figsize = (9, 6))\nsns.barplot(x = 'Daily_Production_Rate', y = 'Operator', data = bitumen_agg.sort_values(by = 'Daily_Production_Rate', ascending = False).head(5), ax = ax)\nax.set_title('Average Bitumen Production Rate per Operator')\nax.set_xlabel('Bitumen Production Rate (Mm3/day)')\nax.set_ylabel('Operator')\nplt.show()\n\n\n\n\n\n\nThe 5 largest producers in each area in 2022\nPeace River has two areas 1 and 2. These two are combined into one area.\n\n# create a dictionary to combine Peace River area 1 and 2 into one area\narea_dict = {'Peace River Area 1': 'Peace River',\n             'Peace River Area 2': 'Peace River',\n             'Cold Lake': 'Cold Lake',\n             'Athabasca': 'Athabasca',\n            }\n\n\n# aggregate daily bitumen production by operator and area in Mm3/day and selecting the 5 largest producers in each area\nbitumen_agg = (bitumen\n              .query(\"Year == '2022'\")\n              .assign(Area = lambda x: x['Area'].map(area_dict))\n              .assign(Daily_Production_Rate = lambda x: x.loc[:,\"Jan\":\"Dec\"].mean(axis = 1))\n              .drop(columns = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'])\n              .groupby(['Area', 'Operator'])\n              .sum()\n              .div(1000)\n              .sort_values(by = 'Daily_Production_Rate', ascending = False)\n              .groupby('Area')\n              .head(5)\n              .reset_index()\n              )\nbitumen_agg\n\n\n\n\n\n  \n    \n      \n      Area\n      Operator\n      Monthly Average\n      Daily_Production_Rate\n    \n  \n  \n    \n      0\n      Athabasca\n      Cenovus\n      76.56559\n      76.565583\n    \n    \n      1\n      Athabasca\n      CNRL\n      36.76489\n      36.756985\n    \n    \n      2\n      Athabasca\n      Suncor Energy Inc.\n      36.72175\n      36.721742\n    \n    \n      3\n      Cold Lake\n      Imperial\n      23.12158\n      23.121582\n    \n    \n      4\n      Athabasca\n      ConocoPhillips\n      22.14255\n      22.142553\n    \n    \n      5\n      Cold Lake\n      CNRL\n      17.71359\n      17.712652\n    \n    \n      6\n      Athabasca\n      MEG\n      14.75854\n      14.758539\n    \n    \n      7\n      Cold Lake\n      Strathcona Resources Ltd.\n      7.99515\n      7.995144\n    \n    \n      8\n      Peace River\n      Baytex Energy Ltd.\n      2.89482\n      2.889908\n    \n    \n      9\n      Peace River\n      CNRL\n      1.49845\n      1.498456\n    \n    \n      10\n      Peace River\n      Obsidian Energy Ltd.\n      0.89549\n      0.889067\n    \n    \n      11\n      Cold Lake\n      Baytex Energy Ltd.\n      0.31789\n      0.308280\n    \n    \n      12\n      Peace River\n      Islander Oil & Gas Inc.\n      0.27302\n      0.273017\n    \n    \n      13\n      Cold Lake\n      Cenovus\n      0.16161\n      0.160163\n    \n    \n      14\n      Peace River\n      Woodcote\n      0.03244\n      0.031730\n    \n  \n\n\n\n\n\n# bitumen production by operator and area\nfig, ax = plt.subplots(3, 1, figsize = (7, 18))\nsns.barplot(x = 'Daily_Production_Rate', y = 'Operator', data = bitumen_agg.query(\"Area == 'Athabasca'\"), ax = ax[0])\nax[0].set_title('Athabasca')\nax[0].set_xlabel('Bitumen Production Rate (Mm3/day)')\nax[0].set_ylabel('Operator')\nsns.barplot(x = 'Daily_Production_Rate', y = 'Operator', data = bitumen_agg.query(\"Area == 'Cold Lake'\"), ax = ax[1])\nax[1].set_title('Cold Lake')\nax[1].set_xlabel('Bitumen Production Rate (Mm3/day)')\nax[1].set_ylabel('Operator')\nsns.barplot(x = 'Daily_Production_Rate', y = 'Operator', data = bitumen_agg.query(\"Area == 'Peace River'\"), ax = ax[2])\nax[2].set_title('Peace River')\nax[2].set_xlabel('Bitumen Production Rate (Mm3/day)')\nax[2].set_ylabel('Operator')\nplt.show()"
  },
  {
    "objectID": "posts/python-posts/Oilsands Data Extraction/index.html",
    "href": "posts/python-posts/Oilsands Data Extraction/index.html",
    "title": "Downloading Alberta Oilsands Production Data using Python",
    "section": "",
    "text": "This blog post is for educational purposes only. Any commercial use of the information provided in this blog post is prohibited. For more information about the AER copyright and permission to reproduce, please visit AER Copyright and Disclaimer. The author is not responsible for any damage or loss caused by the use of the information provided in this blog post."
  },
  {
    "objectID": "posts/python-posts/Oilsands Data Extraction/index.html#listing-all-the-saved-xls-files-in-the-current-directory",
    "href": "posts/python-posts/Oilsands Data Extraction/index.html#listing-all-the-saved-xls-files-in-the-current-directory",
    "title": "Downloading Alberta Oilsands Production Data using Python",
    "section": "Listing all the saved xls files in the current directory:",
    "text": "Listing all the saved xls files in the current directory:\n\nimport os\n# filter only .xls files\nxls_files = [file for file in os.listdir(os.getcwd()) if file.endswith('.xls')]\nxls_files\n\n['ST53_2010-12.xls',\n 'ST53_2011-12.xls',\n 'ST53_2012-12.xls',\n 'ST53_2013-12.xls',\n 'ST53_2014-12.xls',\n 'ST53_2016-12.xls',\n 'ST53_2017-12.xls',\n 'ST53_2018-12.xls',\n 'ST53_2019-12.xls',\n 'ST53_2020-12.xls',\n 'ST53_2021-12.xls',\n 'ST53_Current.xls']\n\n\nIn the next post, I will show how to read the data from the .xls files and prepare the datasets for further analysis."
  },
  {
    "objectID": "posts/python-posts/Oilsands Data Analysis Part I/index.html#cleaning-the-operator-column",
    "href": "posts/python-posts/Oilsands Data Analysis Part I/index.html#cleaning-the-operator-column",
    "title": "Alberta In-situ Oilsands Production Analysis using Python - Part I",
    "section": "Cleaning the Operator column",
    "text": "Cleaning the Operator column\nLet’s take a look at the Operator column.\n\nbitumen_2010['Operator'].unique()\n\narray(['Canadian Natural Resources Limited', 'Baytex Energy Ltd. (¹)',\n       'North Peace Energy Corp.', 'Penn West Petroleum Ltd.',\n       'Baytex Energy Ltd. (¹²)', 'Shell Canada Limited',\n       'Imperial Oil Resources (¹)',\n       'Canadian Natural Resources Limited (¹)',\n       'Devon NEC Corporation (¹)', 'Connacher Oil And Gas Limited',\n       'Meg Energy Corp.', 'Statoil Canada Ltd. (¹)',\n       'Cenovus Energy Inc.', 'Cenovus FCCL Ltd.', 'Suncor Energy Inc.',\n       'Japan Canada Oil Sands Limited (¹)', 'Suncor Energy Inc. (¹)',\n       'Total E&P Joslyn Ltd. (¹)',\n       'ConocoPhillips Canada Resources Corp.',\n       'ConocoPhillips Canada Limited', 'Nexen Inc.',\n       'Husky Oil Operations Limited', 'Canadian Natural Resources',\n       'Murphy Oil Company Ltd.', 'Cenovus Energy Inc. (¹)',\n       'Prosper Petroleum Ltd.', 'Penn West Energy Trust',\n       'Baytex Energy Ltd.', 'Shell Canada Energy',\n       'Husky Oil Operations Ltd.', 'Action Energy Inc.',\n       'Devon Canada Corporation', 'Bonavista Petroleum Ltd.',\n       'Murphy Oil Canada', 'Watch Resources Ltd.',\n       'Manitok Exploration Inc.', 'Koch Exploration Canada G/P Ltd.',\n       'Husky Oil Operations Limited (et Al)', 'Twin Butte Energy Ltd.',\n       'Sunshine Oilsands Ltd.', 'Solara Exploration Ltd.',\n       'Canadian Natural Resources Limited (¹²)',\n       'Bellatrix Exploration Ltd. (¹²)', 'Blackpearl Resources Inc. (¹)',\n       'Crispin Energy Inc.', 'Husky Oil Operations Limited (¹)',\n       'Buffalo Resources Corp.', 'ExxonMobil Canada Ltd.',\n       'Harvest Operations Corp.', 'Bronco Energy Ltd.',\n       'Frog Lake Energy Resources Corp.',\n       'Koch Exploration Canada G/P Ltd. (¹)'], dtype=object)\n\n\nThere are several names that are followed by (subscripts). These addtional information create inconsistencies in the Operator column and add unnecessary complexity to the dataset. They are not needed for our analysis and are removed as follows using the replace method.\n\nbitumen_2010['Operator'] = bitumen_2010['Operator'].str.replace(r'\\(.*\\)', '').str.strip()\nbitumen_2010['Operator'].unique()\n\narray(['Canadian Natural Resources Limited', 'Baytex Energy Ltd.',\n       'North Peace Energy Corp.', 'Penn West Petroleum Ltd.',\n       'Shell Canada Limited', 'Imperial Oil Resources',\n       'Devon NEC Corporation', 'Connacher Oil And Gas Limited',\n       'Meg Energy Corp.', 'Statoil Canada Ltd.', 'Cenovus Energy Inc.',\n       'Cenovus FCCL Ltd.', 'Suncor Energy Inc.',\n       'Japan Canada Oil Sands Limited', 'Total E&P Joslyn Ltd.',\n       'ConocoPhillips Canada Resources Corp.',\n       'ConocoPhillips Canada Limited', 'Nexen Inc.',\n       'Husky Oil Operations Limited', 'Canadian Natural Resources',\n       'Murphy Oil Company Ltd.', 'Prosper Petroleum Ltd.',\n       'Penn West Energy Trust', 'Shell Canada Energy',\n       'Husky Oil Operations Ltd.', 'Action Energy Inc.',\n       'Devon Canada Corporation', 'Bonavista Petroleum Ltd.',\n       'Murphy Oil Canada', 'Watch Resources Ltd.',\n       'Manitok Exploration Inc.', 'Koch Exploration Canada G/P Ltd.',\n       'Twin Butte Energy Ltd.', 'Sunshine Oilsands Ltd.',\n       'Solara Exploration Ltd.', 'Bellatrix Exploration Ltd.',\n       'Blackpearl Resources Inc.', 'Crispin Energy Inc.',\n       'Buffalo Resources Corp.', 'ExxonMobil Canada Ltd.',\n       'Harvest Operations Corp.', 'Bronco Energy Ltd.',\n       'Frog Lake Energy Resources Corp.'], dtype=object)\n\n\nThere are still some inconsistencies in the Operator names. Several operators are listed with different names. To make the names consistent, we create a dictionary with the names to be replaced and the new names. Please note that the following dictionary may have additional names that are not in the 2010 dataset. This dictionary is created from all the files between 2010 and 2022.\n\n# create a dictionary to make Operator names consistent\noperators_dict = {'Athabasca Oil Corporation': 'Athabasca Oil',\n                  'Baytex Energy Ltd.': 'Baytex',\n                  'Blackpearl Resources Inc.': 'BlackPearl',\n                  'BlackPearl Resources Inc.': 'BlackPearl',\n                  'Bonavista Petroleum Ltd.': 'Bonavista',\n                  'Bonavista Energy Corporation': 'Bonavista',\n                  'CNOOC Petroleum North America ULC': 'CNOOC',\n                  'Canadian Natural Resources': 'CNRL',\n                  'Canadian Natural Resources Limited': 'CNRL',\n                  'Canadian Natural Upgrading Limited': 'CNRL',\n                  'Cenovus Energy Inc.': 'Cenovus',\n                  'Cenovus FCCL Ltd.': 'Cenovus',\n                  'ConocoPhillips Canada Resources Corp.': 'ConocoPhillips',\n                  'ConocoPhillips Canada Limited': 'ConocoPhillips',\n                  'Devon Canada Corporation': 'Devon',\n                  'Devon NEC Corporation': 'Devon',\n                  'ExxonMobil Canada Ltd.': 'Imperial',\n                  'Greenfire Hangingstone Operating Corporation': 'Greenfire',\n                  'Greenfire Resources Operating Corporation': 'Greenfire',\n                  'Husky Oil Operations Limited' : 'Husky',\n                  'Husky Oil Operations Ltd.' : 'Husky',\n                  'Imperial Oil Resources': 'Imperial',\n                  'Imperial Oil Resources Limited': 'Imperial',\n                  'Islander Oil & Gas Inc.': 'Islander',\n                  'Koch Exploration Canada G/P Ltd.': 'Koch',\n                  'Koch Oil Sands Operating ULC': 'Koch',\n                  'MEG Energy Corp.': 'MEG',\n                  'Meg Energy Corp.': 'MEG',\n                  'Murphy Oil Canada': 'Murphy',\n                  'Murphy Oil Company Ltd.': 'Murphy',\n                  'Nexen Energy ULC': 'Nexen',\n                  'Nexen Inc.': 'Nexen',\n                  'Obsidian Energy Ltd.': 'Obsidian',\n                  'OSUM Oil Sands Corp.': 'OSUM',\n                  'Osum Production Corp.': 'OSUM',\n                  'Pengrowth Corporation': 'Pengrowth',\n                  'Pengrowth Energy Corporation': 'Pengrowth',\n                  'Penn West Energy Trust': 'Penn West',\n                  'Penn West Petroleum Ltd.': 'Penn West',\n                  'Perpetual Energy Inc.': 'Perpetual',\n                  'Perpetual Energy Operating Corp.': 'Perpetual',\n                  'Perpetual Operating Corp.': 'Perpetual',\n                  'PetroChina Canada Ltd.': 'PetroChina',\n                  'Petrochina Canada Ltd.': 'PetroChina',\n                  'Strathcona Resources Ltd.': 'Strathcona',\n                  'Shell Canada Energy': 'Shell',\n                  'Shell Canada Limited': 'Shell',\n                  'Spur Petroleum Ltd.': 'Spur',\n                  'Spur Resources Ltd.': 'Spur',\n                  'Suncor Energy Inc.': 'Suncor',\n                  'Woodcote Oil & Gas Inc.': 'Woodcote',\n                  'Woodcote Oil Corp.': 'Woodcote'\n                  }\n\n\n# replace the names in the Operator column\nbitumen_2010['Operator'] = bitumen_2010['Operator'].replace(operators_dict)\nbitumen_2010['Operator'].unique()\n\narray(['CNRL', 'Baytex', 'North Peace Energy Corp.', 'Penn West', 'Shell',\n       'Imperial', 'Devon', 'Connacher Oil And Gas Limited', 'MEG',\n       'Statoil Canada Ltd.', 'Cenovus', 'Suncor',\n       'Japan Canada Oil Sands Limited', 'Total E&P Joslyn Ltd.',\n       'ConocoPhillips', 'Nexen', 'Husky', 'Murphy',\n       'Prosper Petroleum Ltd.', 'Action Energy Inc.', 'Bonavista',\n       'Watch Resources Ltd.', 'Manitok Exploration Inc.', 'Koch',\n       'Twin Butte Energy Ltd.', 'Sunshine Oilsands Ltd.',\n       'Solara Exploration Ltd.', 'Bellatrix Exploration Ltd.',\n       'BlackPearl', 'Crispin Energy Inc.', 'Buffalo Resources Corp.',\n       'Harvest Operations Corp.', 'Bronco Energy Ltd.',\n       'Frog Lake Energy Resources Corp.'], dtype=object)\n\n\nIt is also noted that there has been a number of acquisitions and mergers in the oil and gas industry over the past few years. For example, Nexen Inc. was acquired by CNOOC in 2013 and Husky Energy Inc. was acquired by Cenovus Energy Inc. in 2020. However, we ignore these changes for the sake of simplicity."
  },
  {
    "objectID": "posts/python-posts/Oilsands Data Analysis Part I/index.html#section",
    "href": "posts/python-posts/Oilsands Data Analysis Part I/index.html#section",
    "title": "Alberta In-situ Oilsands Production Analysis using Python - Part I",
    "section": "2",
    "text": "2\n\n# create a tidy dataset for bitumen production by removing additional information in parenthesis from the Operator column, making operator names consistent, and grouping by operator\nbitumen_2010 = (bitumen_2010\n            .dropna(subset = ['Operator'])\n            .assign(Operator = lambda x: x.Operator.str.split('(').str[0].str.strip())\n            .assign(Operator = lambda x: x.Operator.str.replace('  ', ' '))\n            .replace({'Operator': operators_dict})\n            .groupby(['Operator']).sum().reset_index()\n            .assign(Year = xls_files[0].split('_')[-1].split('-')[0])\n)\nbitumen_2010\n\n\n\n\n\n  \n    \n      \n      Operator\n      Jan\n      Feb\n      Mar\n      Apr\n      May\n      Jun\n      Jul\n      Aug\n      Sep\n      Oct\n      Nov\n      Dec\n      Year\n    \n  \n  \n    \n      0\n      Action Energy Inc.\n      2.75\n      3.13\n      3.10\n      2.40\n      2.57\n      2.12\n      2.91\n      2.61\n      1.94\n      2.24\n      1.83\n      0.73\n      2010\n    \n    \n      1\n      Baytex\n      1329.74\n      1328.52\n      1521.26\n      1265.24\n      1521.75\n      1839.30\n      1789.96\n      1804.53\n      1839.56\n      1701.64\n      1809.96\n      1777.24\n      2010\n    \n    \n      2\n      Bellatrix Exploration Ltd.\n      0.00\n      0.00\n      0.00\n      0.00\n      0.00\n      0.00\n      0.00\n      0.00\n      0.00\n      0.00\n      0.00\n      15.81\n      2010\n    \n    \n      3\n      BlackPearl\n      1.34\n      3.32\n      1.43\n      0.69\n      1.86\n      2.07\n      1.44\n      1.94\n      3.37\n      1.47\n      1.12\n      1.84\n      2010\n    \n    \n      4\n      Bonavista\n      318.60\n      296.70\n      287.84\n      268.92\n      268.04\n      239.30\n      228.08\n      225.62\n      225.54\n      230.28\n      290.99\n      234.76\n      2010\n    \n    \n      5\n      Bronco Energy Ltd.\n      28.65\n      28.58\n      27.94\n      22.84\n      91.39\n      80.23\n      77.59\n      83.21\n      64.28\n      74.45\n      69.66\n      63.98\n      2010\n    \n    \n      6\n      Buffalo Resources Corp.\n      15.11\n      12.01\n      16.74\n      16.53\n      19.37\n      18.51\n      14.97\n      12.08\n      16.79\n      19.92\n      14.30\n      17.13\n      2010\n    \n    \n      7\n      CNRL\n      22431.43\n      25310.41\n      28066.11\n      25308.06\n      30052.06\n      29492.93\n      28992.88\n      28616.60\n      26751.61\n      28027.22\n      32006.40\n      33009.93\n      2010\n    \n    \n      8\n      Cenovus\n      21595.79\n      22839.19\n      22407.49\n      22435.89\n      22247.41\n      21986.20\n      22176.78\n      21117.60\n      22960.34\n      21720.81\n      22587.47\n      22853.46\n      2010\n    \n    \n      9\n      Connacher Oil And Gas Limited\n      1050.30\n      1134.17\n      1156.09\n      1079.40\n      822.28\n      1065.51\n      1161.84\n      1457.94\n      1725.33\n      1977.97\n      2115.62\n      2225.37\n      2010\n    \n    \n      10\n      ConocoPhillips\n      2664.15\n      2800.02\n      3156.73\n      3244.68\n      3329.58\n      3207.50\n      3529.19\n      3570.22\n      3378.29\n      3755.21\n      3689.54\n      3721.19\n      2010\n    \n    \n      11\n      Crispin Energy Inc.\n      11.32\n      9.06\n      9.59\n      5.26\n      8.71\n      8.02\n      5.95\n      8.71\n      7.85\n      8.25\n      8.11\n      11.88\n      2010\n    \n    \n      12\n      Devon\n      9982.83\n      9739.64\n      10056.54\n      9728.74\n      10701.02\n      10697.26\n      10221.05\n      10042.92\n      6980.52\n      7915.55\n      9785.62\n      9882.21\n      2010\n    \n    \n      13\n      Frog Lake Energy Resources Corp.\n      11.42\n      5.22\n      5.11\n      8.76\n      12.08\n      16.21\n      13.78\n      11.12\n      17.36\n      18.75\n      19.41\n      22.18\n      2010\n    \n    \n      14\n      Harvest Operations Corp.\n      51.27\n      55.08\n      54.10\n      52.22\n      55.95\n      51.18\n      50.49\n      48.75\n      48.06\n      53.05\n      53.98\n      49.14\n      2010\n    \n    \n      15\n      Husky\n      2203.19\n      2151.47\n      1865.46\n      2092.67\n      1894.59\n      2167.51\n      2178.13\n      2250.67\n      2111.99\n      2251.10\n      2542.06\n      2660.95\n      2010\n    \n    \n      16\n      Imperial\n      23710.09\n      24543.85\n      23962.57\n      23155.58\n      22206.07\n      22263.13\n      22296.39\n      22960.70\n      21996.35\n      23156.01\n      23701.99\n      23956.75\n      2010\n    \n    \n      17\n      Japan Canada Oil Sands Limited\n      1186.33\n      1155.23\n      1062.03\n      783.28\n      1218.67\n      1166.01\n      1132.23\n      1080.17\n      1188.32\n      1133.37\n      1214.59\n      1129.26\n      2010\n    \n    \n      18\n      Koch\n      3.47\n      5.60\n      11.13\n      2.39\n      6.26\n      3.96\n      5.47\n      19.32\n      29.53\n      28.18\n      20.82\n      24.20\n      2010\n    \n    \n      19\n      MEG\n      1222.04\n      2012.71\n      2666.20\n      3596.39\n      3883.73\n      4189.44\n      4016.79\n      4290.65\n      843.95\n      4507.48\n      4475.88\n      4251.55\n      2010\n    \n    \n      20\n      Manitok Exploration Inc.\n      9.01\n      13.28\n      12.99\n      10.77\n      12.44\n      10.92\n      11.79\n      10.71\n      9.70\n      5.97\n      11.71\n      11.92\n      2010\n    \n    \n      21\n      Murphy\n      875.34\n      872.36\n      856.28\n      852.99\n      791.06\n      771.88\n      770.08\n      769.41\n      797.46\n      815.91\n      857.67\n      892.91\n      2010\n    \n    \n      22\n      Nexen\n      2576.60\n      2803.16\n      3490.64\n      3906.26\n      3737.76\n      4240.79\n      4459.99\n      3984.57\n      3819.51\n      4604.76\n      4176.14\n      4628.39\n      2010\n    \n    \n      23\n      North Peace Energy Corp.\n      10.30\n      4.70\n      3.11\n      2.21\n      1.63\n      0.51\n      0.00\n      0.00\n      0.40\n      0.00\n      0.00\n      0.00\n      2010\n    \n    \n      24\n      Penn West\n      279.01\n      281.36\n      272.08\n      274.62\n      278.90\n      262.98\n      235.53\n      276.71\n      283.20\n      275.46\n      314.75\n      378.70\n      2010\n    \n    \n      25\n      Prosper Petroleum Ltd.\n      314.33\n      320.06\n      290.21\n      259.07\n      290.71\n      274.26\n      270.47\n      251.36\n      234.31\n      211.85\n      166.20\n      257.03\n      2010\n    \n    \n      26\n      Shell\n      4139.89\n      3978.75\n      4047.93\n      3849.33\n      3860.94\n      3670.44\n      3690.54\n      3605.76\n      3368.87\n      2938.82\n      3201.53\n      2933.30\n      2010\n    \n    \n      27\n      Solara Exploration Ltd.\n      0.00\n      0.00\n      0.00\n      0.00\n      10.84\n      9.80\n      11.26\n      11.52\n      11.45\n      8.62\n      5.93\n      8.85\n      2010\n    \n    \n      28\n      Statoil Canada Ltd.\n      0.00\n      0.00\n      0.00\n      0.00\n      0.00\n      0.00\n      0.00\n      0.00\n      5.51\n      81.05\n      138.44\n      180.31\n      2010\n    \n    \n      29\n      Suncor\n      13049.45\n      14253.79\n      14378.61\n      13960.11\n      13876.08\n      14206.33\n      14412.89\n      14227.60\n      9025.13\n      12732.81\n      14212.22\n      13935.72\n      2010\n    \n    \n      30\n      Sunshine Oilsands Ltd.\n      0.00\n      0.00\n      0.00\n      1.52\n      1.98\n      2.10\n      4.15\n      0.00\n      0.00\n      1.39\n      5.54\n      17.06\n      2010\n    \n    \n      31\n      Total E&P Joslyn Ltd.\n      0.00\n      0.00\n      0.00\n      0.00\n      0.00\n      0.00\n      0.00\n      0.00\n      0.00\n      0.00\n      0.00\n      0.00\n      2010\n    \n    \n      32\n      Twin Butte Energy Ltd.\n      350.08\n      350.31\n      364.78\n      414.61\n      463.89\n      493.21\n      472.13\n      472.19\n      514.21\n      545.26\n      692.22\n      756.90\n      2010\n    \n    \n      33\n      Watch Resources Ltd.\n      0.00\n      0.00\n      0.00\n      0.00\n      1.68\n      0.00\n      0.00\n      0.00\n      0.00\n      3.38\n      5.26\n      2.92\n      2010\n    \n  \n\n\n\n\n\n# define a function to create a tidy dataset for bitumen production\ndef create_tidy_bitumen(df, operators_dict, xls_file):\n    last_row_idx = np.where(df[[\"Recovery Method\"]] == \"Total \")[0][0]\n    df = df.iloc[:last_row_idx, :]\n    df = (df\n            .dropna(subset = ['Operator'])\n            .assign(Operator = lambda x: x.Operator.str.split('(').str[0].str.strip())\n            .assign(Operator = lambda x: x.Operator.str.replace('  ', ' '))\n            .replace({'Operator': operators_dict})\n            .assign(Year = xls_file.split('_')[-1].split('-')[0])\n    )\n    return df"
  },
  {
    "objectID": "posts/python-posts/Oilsands Data Analysis Part I/index.html#simplifiying-the-area-column",
    "href": "posts/python-posts/Oilsands Data Analysis Part I/index.html#simplifiying-the-area-column",
    "title": "Alberta In-situ Oilsands Production Analysis using Python - Part I",
    "section": "Simplifiying the Area column",
    "text": "Simplifiying the Area column\nThere are Preace River Area 1 and Peace River Area 2 in the Area column. We can simplify the column by replacing these values with Peace River.\n\nbitumen_2010['Area'] = bitumen_2010['Area'].replace({'Peace River Area 1': 'Peace River', 'Peace River Area 2': 'Peace River'}) \nbitumen_2010['Area'].unique()\n\narray(['Cold Lake', 'Peace River', 'Athabasca, Cold Lake', 'Athabasca'],\n      dtype=object)\n\n\nThere is only on row with Area value as Athabasca, Cold Lake. We can change it to Cold Lake to make it consistent with the other rows.\n\nbitumen_2010['Area'] = bitumen_2010['Area'].replace({'Athabasca, Cold Lake': 'Cold Lake'})\n\nWe also add a ‘Year’ column to the dataframe.\n\nbitumen_2010['Year'] = int(xls_files[0].split('_')[-1].split('-')[0])\nbitumen_2010['Year'].unique()\n\narray([2010], dtype=int64)"
  },
  {
    "objectID": "posts/python-posts/Oilsands Data Analysis Part II/index.html#alberta-average-bitumen-production-rate-per-year",
    "href": "posts/python-posts/Oilsands Data Analysis Part II/index.html#alberta-average-bitumen-production-rate-per-year",
    "title": "Alberta In-situ Oilsands Production Analysis using Python - Part II",
    "section": "Alberta average bitumen production rate per year",
    "text": "Alberta average bitumen production rate per year\nThe daily bitumen production rate is reported as a monthly average in m3/day. An approximate for the yearly average production rate in m3/day is calculated by taking the average of the monthly average production rates. The yearly average production rate is then converted to Mm3/day by dividing by 1,000.\n\n# Calculate the average daily production rate for each year\nbitumen_agg = (bitumen\n              .assign(Production_Rate = lambda x: x.loc[:,\"Jan\":\"Dec\"].mean(axis = 1))\n              .drop(columns = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'])\n              .groupby(['Year'])\n              .sum()\n              .div(1000)\n              .reset_index()\n              )\nbitumen_agg\n\n\n\n\n\n  \n    \n      \n      Year\n      Production_Rate\n    \n  \n  \n    \n      0\n      2010\n      119.596470\n    \n    \n      1\n      2011\n      134.691030\n    \n    \n      2\n      2012\n      157.040421\n    \n    \n      3\n      2013\n      175.839908\n    \n    \n      4\n      2014\n      200.679804\n    \n    \n      5\n      2016\n      220.765067\n    \n    \n      6\n      2017\n      245.572865\n    \n    \n      7\n      2018\n      249.694999\n    \n    \n      8\n      2019\n      245.745934\n    \n    \n      9\n      2020\n      237.340961\n    \n    \n      10\n      2021\n      264.391272\n    \n    \n      11\n      2022\n      269.899715\n    \n  \n\n\n\n\nLet’s see the yearly average production rate in Mm3/day.\n\n# Plot the yearly average production rate\nplt.figure(figsize = (8, 6))\nsns.barplot(x = 'Year', y = 'Production_Rate', data = bitumen_agg)\nplt.title('Alberta average bitumen production rate')\nplt.xlabel('Year')\nplt.ylabel('Production Rate (Mm3/day)')\nplt.show()"
  },
  {
    "objectID": "posts/python-posts/Oilsands Data Analysis Part II/index.html#largest-bitumen-producers-in-alberta-since-2010",
    "href": "posts/python-posts/Oilsands Data Analysis Part II/index.html#largest-bitumen-producers-in-alberta-since-2010",
    "title": "Alberta In-situ Oilsands Production Analysis using Python - Part II",
    "section": "Largest bitumen producers in Alberta since 2010",
    "text": "Largest bitumen producers in Alberta since 2010\nThe top 10 largest bitumen producers in Alberta since 2010 are listed below. The data is sorted by the total bitumen production in descending order. The total bitumen production rate is converted to MMm3/day by dividing by 1,000,000.\n\n# Calculate the total bitumen production rate for each operator\nbitumen_agg = (bitumen\n              .assign(Cumulative_Production = lambda x: x.loc[:,\"Jan\":\"Dec\"].sum(axis = 1) * 365)\n              .drop(columns = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec', 'Year'])\n              .groupby(['Operator'])\n              .sum()\n              .div(1_000_000)\n              .sort_values(by = 'Cumulative_Production', ascending = False)\n              .reset_index()\n              .head(10)\n              )\nbitumen_agg \n\n\n\n\n\n  \n    \n      \n      Operator\n      Cumulative_Production\n    \n  \n  \n    \n      0\n      Cenovus\n      2561.630674\n    \n    \n      1\n      CNRL\n      2266.675729\n    \n    \n      2\n      Suncor\n      1550.949426\n    \n    \n      3\n      Imperial\n      1249.998787\n    \n    \n      4\n      ConocoPhillips\n      668.101066\n    \n    \n      5\n      Devon\n      533.488187\n    \n    \n      6\n      MEG\n      531.186018\n    \n    \n      7\n      Husky\n      359.571866\n    \n    \n      8\n      Nexen\n      157.297422\n    \n    \n      9\n      CNOOC\n      146.821801\n    \n  \n\n\n\n\nThe figure below illustrates the top 10 largest bitumen producers in Alberta since 2010.\n\n# Plot the top 10 largest bitumen producers in Alberta since 2010\nplt.figure(figsize = (8, 6))\nsns.barplot(x = 'Cumulative_Production', y = 'Operator', data = bitumen_agg)\nplt.title('Top 10 largest bitumen producers in Alberta since 2010')\nplt.xlabel('Cumulative Production (MMm3)')\nplt.ylabel('Operator')\nplt.show()"
  },
  {
    "objectID": "posts/python-posts/Oilsands Data Analysis Part II/index.html#largest-bitumen-producers-in-alberta-in-2022",
    "href": "posts/python-posts/Oilsands Data Analysis Part II/index.html#largest-bitumen-producers-in-alberta-in-2022",
    "title": "Alberta In-situ Oilsands Production Analysis using Python - Part II",
    "section": "Largest bitumen producers in Alberta in 2022",
    "text": "Largest bitumen producers in Alberta in 2022\nThe top 10 largest bitumen producers in Alberta in 2022 are listed below. The data is sorted by the bitumen production rate in descending order. The yearly bitumen production rate is converted to Mm3/day by dividing by 1,000.\n\n# Calculate the yearly bitumen production rate for each operator\nbitumen_agg = (bitumen\n              .query(\"Year == 2022\")\n              .assign(Production_Rate = lambda x: x.loc[:,\"Jan\":\"Dec\"].mean(axis = 1))\n              .drop(columns = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec', 'Year'])\n              .groupby(['Operator'])\n              .sum()\n              .div(1000)\n              .sort_values(by = 'Production_Rate', ascending = False)\n              .reset_index()\n              .head(10)\n              )\nbitumen_agg\n\n\n\n\n\n  \n    \n      \n      Operator\n      Production_Rate\n    \n  \n  \n    \n      0\n      Cenovus\n      76.725747\n    \n    \n      1\n      CNRL\n      55.968093\n    \n    \n      2\n      Suncor\n      36.721742\n    \n    \n      3\n      Imperial\n      23.121582\n    \n    \n      4\n      ConocoPhillips\n      22.142553\n    \n    \n      5\n      MEG\n      14.758539\n    \n    \n      6\n      Strathcona\n      7.995144\n    \n    \n      7\n      CNOOC\n      7.562969\n    \n    \n      8\n      Athabasca Oil\n      4.610921\n    \n    \n      9\n      Greenfire\n      4.151495\n    \n  \n\n\n\n\nThe top 10 largest bitumen producers in Alberta in 2022 are shown in the plot below.\n\n# Plot the top 10 largest bitumen producers in Alberta in 2022\nplt.figure(figsize = (8, 6))\nsns.barplot(x = 'Production_Rate', y = 'Operator', data = bitumen_agg)\nplt.title('Top 10 largest bitumen producers in Alberta in 2022')\nplt.xlabel('Production Rate (Mm3/day)')\nplt.ylabel('Operator')\nplt.show()"
  },
  {
    "objectID": "posts/python-posts/Oilsands Data Analysis Part II/index.html#largest-bitumen-producers-in-alberta-in-2022-by-area",
    "href": "posts/python-posts/Oilsands Data Analysis Part II/index.html#largest-bitumen-producers-in-alberta-in-2022-by-area",
    "title": "Alberta In-situ Oilsands Production Analysis using Python - Part II",
    "section": "Largest bitumen producers in Alberta in 2022 by area",
    "text": "Largest bitumen producers in Alberta in 2022 by area\nThe top 5 largest 2022 bitumen producers by area in Alberta are listed below. The data is sorted by the bitumen production rate in descending order. The yearly bitumen production rate is converted to Mm3/day by dividing by 1,000.\n\n# Calculate the yearly bitumen production rate for each operator by area\nbitumen_agg = (bitumen\n              .query(\"Year == 2022\")\n              .assign(Production_Rate = lambda x: x.loc[:,\"Jan\":\"Dec\"].mean(axis = 1))\n              .drop(columns = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec', 'Year'])\n              .groupby(['Area', 'Operator'])\n              .sum()\n              .div(1000)\n              .sort_values(by = 'Production_Rate', ascending = False)\n              .groupby('Area')\n              .head(5)\n              .reset_index()\n              )\nbitumen_agg\n\n\n\n\n\n  \n    \n      \n      Area\n      Operator\n      Production_Rate\n    \n  \n  \n    \n      0\n      Athabasca\n      Cenovus\n      76.565583\n    \n    \n      1\n      Athabasca\n      CNRL\n      36.756985\n    \n    \n      2\n      Athabasca\n      Suncor\n      36.721742\n    \n    \n      3\n      Cold Lake\n      Imperial\n      23.121582\n    \n    \n      4\n      Athabasca\n      ConocoPhillips\n      22.142553\n    \n    \n      5\n      Cold Lake\n      CNRL\n      17.712652\n    \n    \n      6\n      Athabasca\n      MEG\n      14.758539\n    \n    \n      7\n      Cold Lake\n      Strathcona\n      7.995144\n    \n    \n      8\n      Peace River\n      Baytex\n      2.889908\n    \n    \n      9\n      Peace River\n      CNRL\n      1.498456\n    \n    \n      10\n      Peace River\n      Obsidian\n      0.889067\n    \n    \n      11\n      Cold Lake\n      Baytex\n      0.308280\n    \n    \n      12\n      Peace River\n      Islander\n      0.273017\n    \n    \n      13\n      Cold Lake\n      Cenovus\n      0.160163\n    \n    \n      14\n      Peace River\n      Woodcote\n      0.031730\n    \n  \n\n\n\n\nThe figure below shows the top 5 largest bitumen producers in Alberta in 2022 by area.\n\n# Plot the top 10 largest bitumen producers in Alberta in 2022 by region\nfig, ax = plt.subplots(3, 1, figsize = (6, 18))\nsns.barplot(x = 'Production_Rate', y = 'Operator', data = bitumen_agg.query(\"Area == 'Athabasca'\"), ax = ax[0])\nax[0].set_title('Athabasca')\nax[0].set_xlabel('Production Rate (Mm3/day)')\nax[0].set_ylabel('Operator')\nsns.barplot(x = 'Production_Rate', y = 'Operator', data = bitumen_agg.query(\"Area == 'Cold Lake'\"), ax = ax[1])\nax[1].set_title('Cold Lake')\nax[1].set_xlabel('Production Rate (Mm3/day)')\nax[1].set_ylabel('Operator')\nsns.barplot(x = 'Production_Rate', y = 'Operator', data = bitumen_agg.query(\"Area == 'Peace River'\"), ax = ax[2])\nax[2].set_title('Peace River')\nax[2].set_xlabel('Production Rate (Mm3/day)')\nax[2].set_ylabel('Operator')\nplt.show()"
  },
  {
    "objectID": "posts/python-posts/WCSB Map/index.html",
    "href": "posts/python-posts/WCSB Map/index.html",
    "title": "Western Canadian Sedimentary Basin (WCSB) Mapping using Geopandas",
    "section": "",
    "text": "This blog post is for educational purposes only. Any commercial use of the information provided in this blog post is prohibited. For more information about the AER copyright and permission to reproduce, please visit AER Copyright and Disclaimer. The author is not responsible for any damage or loss caused by the use of the information provided in this blog post."
  },
  {
    "objectID": "posts/python-posts/WCSB Map/index.html#loading-the-data",
    "href": "posts/python-posts/WCSB Map/index.html#loading-the-data",
    "title": "Western Canadian Sedimentary Basin (WCSB) Mapping using Geopandas",
    "section": "Loading the Data",
    "text": "Loading the Data\nAll files are stored on a local directory. We use the glob module to list all XLS files in the directory and then use pandas to read the data into a DataFrame. The xlrd module is used as an engine in pandas to read the XLS files. The matplotlib module is used to create the plots. The seaborn module is used to create the plots. The numpy module is used to perform mathematical operations on the data. The warnings module is used to suppress the warnings. The os module is used to save the plots in the current directory.\n\n#install geopandas\n\nimport sys\n# !{sys.executable} -m pip install geopandas\n\n\nimport os\nimport glob\nimport pandas as pd\nimport geopandas as gpd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\nimport warnings\nwarnings.filterwarnings('ignore')\n\nThe glob module is used to list all XLS files in the directory.\n\nshapefiles = glob.glob('OSProjects2015.gdb/')\nshapefiles\n\n['OSProjects2015.gdb/']\n\n\nReading the all the .shp files using geopandas.\n\ngdf = pd.concat(\n    [gpd.read_file(shp) for shp in shapefiles]).pipe(gpd.GeoDataFrame)\n\n\n# show columns\ngdf.columns\n\nIndex(['OSP_NO', 'Operator_Name', 'Project_Name', 'Industry_Type',\n       'Project_Status', 'Year', 'OS_Area', 'Shape_Length', 'Shape_Area',\n       'geometry'],\n      dtype='object')\n\n\nhead of the data\n\ngdf.head()\n\n\n\n\n\n  \n    \n      \n      OSP_NO\n      Operator_Name\n      Project_Name\n      Industry_Type\n      Project_Status\n      Year\n      OS_Area\n      Shape_Length\n      Shape_Area\n      geometry\n    \n  \n  \n    \n      0\n      1\n      Imperial Oil Resources\n      Cold Lake Operations\n      02\n      01\n      2015\n      CL\n      193203.948339\n      6.881845e+08\n      MULTIPOLYGON (((801641.764 6051679.134, 801580...\n    \n    \n      1\n      3\n      Shell Canada Limited\n      Jackpine Mine\n      01\n      01\n      2015\n      ATHA\n      47371.700342\n      7.672034e+07\n      MULTIPOLYGON (((724976.295 6352079.157, 725042...\n    \n    \n      2\n      4\n      Connacher Oil and Gas Limited\n      Great Divide\n      02\n      01\n      2015\n      ATHA\n      78260.017147\n      1.289022e+08\n      MULTIPOLYGON (((695353.230 6217610.084, 695132...\n    \n    \n      3\n      7\n      Canadian Natural Resources Limited (CNRL)\n      Horizon Mine\n      01\n      01\n      2015\n      ATHA\n      81197.290618\n      2.887134e+08\n      MULTIPOLYGON (((702953.989 6370378.694, 702949...\n    \n    \n      4\n      9\n      MEG Energy Corp.\n      Christina Lake Regional Project\n      02\n      01\n      2015\n      ATHA\n      94158.628161\n      1.899070e+08\n      MULTIPOLYGON (((767062.950 6169585.372, 767060...\n    \n  \n\n\n\n\nshow the geometry type of the data\n\ngdf.geom_type.unique()\n\narray(['MultiPolygon'], dtype=object)\n\n\n\nplot the data using geopandas\n\n# plot gdf and add color based on 'OS_Area' column\ngdf.plot()\n#add additional info to plot\nplt.title('Western Canadian Sedimentary Basin (WCSB) Mapping')\nplt.xlabel('Longitude')\nplt.ylabel('Latitude')\nplt.show()"
  },
  {
    "objectID": "posts/python-posts/WCSB Map/index.html#read-playwork-alberta",
    "href": "posts/python-posts/WCSB Map/index.html#read-playwork-alberta",
    "title": "Western Canadian Sedimentary Basin (WCSB) Mapping using Geopandas",
    "section": "Read PlayWork Alberta",
    "text": "Read PlayWork Alberta\n\nshapefiles = glob.glob('PlayWorkbookListArea/*.shp')\nshapefiles\n\n['PlayWorkbookListArea\\\\AER_Play_Areas.shp']\n\n\nReading the all the .shp files using geopandas.\n\ngdf = pd.concat([\n    gpd.read_file(shp)\n    for shp in shapefiles\n]).pipe(gpd.GeoDataFrame)\n\n\ngdf.geom_type.unique()\n\narray(['MultiPolygon', 'Polygon'], dtype=object)\n\n\nfilter the data to only include the MultiPolygon geometry type\n\ngdf = gdf[gdf.geom_type.isin(['MultiPolygon'])]\n\nplot the data using geopandas\n\ngdf.plot()\n#add additional info to plot\nplt.title('Western Canadian Sedimentary Basin (WCSB) Mapping')\nplt.xlabel('Longitude')\nplt.ylabel('Latitude')\nplt.show()"
  },
  {
    "objectID": "posts/python-posts/WCSB Map/index.html#read-operational-areas",
    "href": "posts/python-posts/WCSB Map/index.html#read-operational-areas",
    "title": "Western Canadian Sedimentary Basin (WCSB) Mapping using Geopandas",
    "section": "Read Operational Areas",
    "text": "Read Operational Areas\n\nshapefiles = glob.glob('alberta/*.shp')\nshapefiles\n\n['alberta\\\\lpr_000b21a_e.shp']\n\n\nReading the all the .shp files using geopandas.\n\ngdf = pd.concat([\n    gpd.read_file(shp)\n    for shp in shapefiles\n]).pipe(gpd.GeoDataFrame)\n\nhead of the data\n\ngdf.head()\n\n\n\n\n\n  \n    \n      \n      PRUID\n      DGUID\n      PRNAME\n      PRENAME\n      PRFNAME\n      PREABBR\n      PRFABBR\n      LANDAREA\n      geometry\n    \n  \n  \n    \n      0\n      10\n      2021A000210\n      Newfoundland and Labrador / Terre-Neuve-et-Lab...\n      Newfoundland and Labrador\n      Terre-Neuve-et-Labrador\n      N.L.\n      T.-N.-L.\n      3.581704e+05\n      MULTIPOLYGON (((8841194.729 2213093.663, 88411...\n    \n    \n      1\n      11\n      2021A000211\n      Prince Edward Island / Île-du-Prince-Édouard\n      Prince Edward Island\n      Île-du-Prince-Édouard\n      P.E.I.\n      Î.-P.-É.\n      5.681179e+03\n      MULTIPOLYGON (((8374335.443 1629502.597, 83743...\n    \n    \n      2\n      12\n      2021A000212\n      Nova Scotia / Nouvelle-Écosse\n      Nova Scotia\n      Nouvelle-Écosse\n      N.S.\n      N.-É.\n      5.282471e+04\n      MULTIPOLYGON (((8310463.217 1250722.263, 83104...\n    \n    \n      3\n      13\n      2021A000213\n      New Brunswick / Nouveau-Brunswick\n      New Brunswick\n      Nouveau-Brunswick\n      N.B.\n      N.-B.\n      7.124850e+04\n      MULTIPOLYGON (((7964100.720 1576822.289, 79641...\n    \n    \n      4\n      24\n      2021A000224\n      Quebec / Québec\n      Quebec\n      Québec\n      Que.\n      Qc\n      1.298600e+06\n      MULTIPOLYGON (((6948393.211 2760814.626, 69483...\n    \n  \n\n\n\n\n\ngdf.PRNAME.unique()\n\narray(['Newfoundland and Labrador / Terre-Neuve-et-Labrador',\n       'Prince Edward Island / Île-du-Prince-Édouard',\n       'Nova Scotia / Nouvelle-Écosse',\n       'New Brunswick / Nouveau-Brunswick', 'Quebec / Québec', 'Ontario',\n       'Manitoba', 'Saskatchewan', 'Alberta',\n       'British Columbia / Colombie-Britannique', 'Yukon',\n       'Northwest Territories / Territoires du Nord-Ouest', 'Nunavut'],\n      dtype=object)\n\n\nfilter the data to only include the Alberta province\n\ngdf = gdf[gdf.PRNAME.isin(['Alberta'])]\n\n\ngdf.geom_type.unique()\n\narray(['Polygon'], dtype=object)\n\n\nfilter the data to only include the MultiPolygon geometry type\n\ngdf = gdf[gdf.geom_type.isin(['Polygon', 'MultiPolygon'])]\n\nplot the data using geopandas\n\ngdf.plot()\n#add additional info to plot\nplt.title('Map of Alberta')\nplt.xlabel('Longitude')\nplt.ylabel('Latitude')\nplt.show()"
  },
  {
    "objectID": "posts/python-posts/WCSB Map/index.html#new-section-getting-alberta-oilsands-map",
    "href": "posts/python-posts/WCSB Map/index.html#new-section-getting-alberta-oilsands-map",
    "title": "Western Canadian Sedimentary Basin (WCSB) Mapping using Geopandas",
    "section": "New section: Getting Alberta Oilsands map",
    "text": "New section: Getting Alberta Oilsands map\n\nshapefiles = glob.glob('OilSandsLandCover2020.gdb/')\nshapefiles\n\ngdf = pd.concat([\n    gpd.read_file(shp)\n    for shp in shapefiles\n]).pipe(gpd.GeoDataFrame)\ngdf.head()\n\n\n\n\n\n  \n    \n      \n      WELLSITE_ID\n      DISTURBED_ID\n      WELLSITE_YEAR\n      WELLSITE_DESCRIPTION\n      geometry\n    \n  \n  \n    \n      0\n      38_82020\n      38_82020\n      2016\n      03\n      None\n    \n    \n      1\n      38_122020\n      38_122020\n      2008\n      03\n      None\n    \n    \n      2\n      38_132020\n      38_132020\n      2012\n      03\n      None\n    \n    \n      3\n      38_142020\n      38_142020\n      2009\n      03\n      None\n    \n    \n      4\n      38_192020\n      38_192020\n      2007\n      03\n      None\n    \n  \n\n\n\n\n\ngdf.geom_type.unique()\n\narray([None], dtype=object)\n\n\n\ngdf = gdf[gdf.geom_type.isin(['Polygon', 'MultiPolygon'])]\n\n\ngdf.plot()\n#add additional info to plot\nplt.title('Map of Alberta')\nplt.xlabel('Longitude')\nplt.ylabel('Latitude')\nplt.show()"
  },
  {
    "objectID": "posts/python-posts/WCSB Map/index.html#oilsands-land-coverage",
    "href": "posts/python-posts/WCSB Map/index.html#oilsands-land-coverage",
    "title": "Western Canadian Sedimentary Basin (WCSB) Mapping using Geopandas",
    "section": "Oilsands land coverage",
    "text": "Oilsands land coverage\n\n# shapefiles = glob.glob('OilSandsLandCover2020.gdb/')\nshapefiles = glob.glob('Oil_Sands_Industrial_Features_2020/OilSandsSimplifiedLandCover.gdb/')\nshapefiles\n\n['Oil_Sands_Industrial_Features_2020/OilSandsSimplifiedLandCover.gdb/']\n\n\nReading the all the .shp files using geopandas.\n\ngdf = pd.concat([gpd.read_file(shp) for shp in shapefiles]).pipe(gpd.GeoDataFrame)\n\n\n# show columns\ngdf.columns\n\nIndex(['LCU_ID', 'OSP_NO', 'OSP_NAME', 'PROJECT_NAME', 'EPEA_APPROVAL',\n       'WA_APPROVAL', 'INDUSTRY_TYPE', 'PROJECT_STATUS', 'RPT_NAME',\n       'LANDCOVER', 'SUBMISSION_TYPE', 'PDF_NAME', 'MAP_NAME', 'GEOTIFF_NAME',\n       'SOURCE', 'YEAR', 'YEAR_SUBMISSION', 'RMSE', 'PERIMETER', 'HECTARES',\n       'AREA', 'LANDCOVER_2', 'Shape_Length', 'Shape_Area', 'geometry'],\n      dtype='object')\n\n\nhead of the data\n\ngdf.head()\n\n\n\n\n\n  \n    \n      \n      LCU_ID\n      OSP_NO\n      OSP_NAME\n      PROJECT_NAME\n      EPEA_APPROVAL\n      WA_APPROVAL\n      INDUSTRY_TYPE\n      PROJECT_STATUS\n      RPT_NAME\n      LANDCOVER\n      ...\n      YEAR\n      YEAR_SUBMISSION\n      RMSE\n      PERIMETER\n      HECTARES\n      AREA\n      LANDCOVER_2\n      Shape_Length\n      Shape_Area\n      geometry\n    \n  \n  \n    \n      0\n      59_12020\n      59\n      Statoil Canada\n      Corner\n      NaN\n      NaN\n      02\n      03\n      Natural\n      01\n      ...\n      2016\n      2017\n      NaN\n      84369.572314\n      17141.012867\n      1.714101e+08\n      Natural\n      84369.572314\n      1.714101e+08\n      MULTIPOLYGON (((731224.572 6216173.992, 731312...\n    \n    \n      1\n      38_22020\n      38\n      Statoil Canada\n      Leismer\n      NaN\n      NaN\n      02\n      01\n      Natural\n      01\n      ...\n      2016\n      2017\n      NaN\n      9722.073266\n      523.240360\n      5.232404e+06\n      Natural\n      9722.073266\n      5.232404e+06\n      MULTIPOLYGON (((729025.743 6178762.620, 729798...\n    \n    \n      2\n      38_32020\n      38\n      Statoil Canada\n      Leismer\n      NaN\n      NaN\n      02\n      01\n      Natural\n      01\n      ...\n      2016\n      2017\n      NaN\n      261.242505\n      0.226023\n      2.260230e+03\n      Natural\n      261.242505\n      2.260230e+03\n      MULTIPOLYGON (((720998.230 6184621.870, 720998...\n    \n    \n      3\n      38_42020\n      38\n      Statoil Canada\n      Leismer\n      NaN\n      NaN\n      02\n      01\n      Natural\n      01\n      ...\n      2016\n      2017\n      NaN\n      539.848341\n      1.798870\n      1.798870e+04\n      Natural\n      539.848341\n      1.798870e+04\n      MULTIPOLYGON (((722168.492 6188978.678, 722048...\n    \n    \n      4\n      38_52020\n      38\n      Statoil Canada\n      Leismer\n      NaN\n      NaN\n      02\n      01\n      Natural\n      01\n      ...\n      2016\n      2017\n      NaN\n      148000.146309\n      32472.938111\n      3.247294e+08\n      Natural\n      148000.146309\n      3.247294e+08\n      MULTIPOLYGON (((728940.016 6180389.384, 728769...\n    \n  \n\n5 rows × 25 columns\n\n\n\nshow the geometry type of the data\n\ngdf.geom_type.unique()\n\narray(['MultiPolygon'], dtype=object)\n\n\n\ngdf.OSP_NAME.unique()\n\narray(['Statoil Canada', 'Cenovus FCCL Ltd.',\n       'Canadian Natural Resources Limited',\n       'Canadian Natural Upgrading Limited',\n       'ConocoPhillips Canada Resouces Corp.', 'Husky Energy Inc.',\n       'Imperial Oil Resources',\n       'China National Offshore Oil Corporation (CNOOC)',\n       'Shell Canada Limited', 'Suncor Energy Inc.',\n       'Suncor Energy Operating Inc.', 'Syncrude'], dtype=object)\n\n\nplot the data using geopandas\n\n# add color based on 'OSP_NAME' column, with legends outside of the box\ngdf.plot(column='OSP_NAME')\n#add additional info to plot\nplt.title('Alberta Mapping')\nplt.xlabel('Longitude')\nplt.ylabel('Latitude')\nplt.show()"
  },
  {
    "objectID": "posts/python-posts/WCSB Map/index.html#read-alberta-data",
    "href": "posts/python-posts/WCSB Map/index.html#read-alberta-data",
    "title": "Western Canadian Sedimentary Basin (WCSB) Mapping using Geopandas",
    "section": "Read Alberta Data",
    "text": "Read Alberta Data\n\nshapefiles = glob.glob('alberta/*.shp')\nshapefiles\n\n['alberta\\\\lpr_000b21a_e.shp']\n\n\nReading the all the .shp files using geopandas.\n\ngdf = pd.concat([\n    gpd.read_file(shp)\n    for shp in shapefiles\n]).pipe(gpd.GeoDataFrame)\n\nhead of the data\n\ngdf.head()\n\n\n\n\n\n  \n    \n      \n      PRUID\n      DGUID\n      PRNAME\n      PRENAME\n      PRFNAME\n      PREABBR\n      PRFABBR\n      LANDAREA\n      geometry\n    \n  \n  \n    \n      0\n      10\n      2021A000210\n      Newfoundland and Labrador / Terre-Neuve-et-Lab...\n      Newfoundland and Labrador\n      Terre-Neuve-et-Labrador\n      N.L.\n      T.-N.-L.\n      3.581704e+05\n      MULTIPOLYGON (((8841194.729 2213093.663, 88411...\n    \n    \n      1\n      11\n      2021A000211\n      Prince Edward Island / Île-du-Prince-Édouard\n      Prince Edward Island\n      Île-du-Prince-Édouard\n      P.E.I.\n      Î.-P.-É.\n      5.681179e+03\n      MULTIPOLYGON (((8374335.443 1629502.597, 83743...\n    \n    \n      2\n      12\n      2021A000212\n      Nova Scotia / Nouvelle-Écosse\n      Nova Scotia\n      Nouvelle-Écosse\n      N.S.\n      N.-É.\n      5.282471e+04\n      MULTIPOLYGON (((8310463.217 1250722.263, 83104...\n    \n    \n      3\n      13\n      2021A000213\n      New Brunswick / Nouveau-Brunswick\n      New Brunswick\n      Nouveau-Brunswick\n      N.B.\n      N.-B.\n      7.124850e+04\n      MULTIPOLYGON (((7964100.720 1576822.289, 79641...\n    \n    \n      4\n      24\n      2021A000224\n      Quebec / Québec\n      Quebec\n      Québec\n      Que.\n      Qc\n      1.298600e+06\n      MULTIPOLYGON (((6948393.211 2760814.626, 69483...\n    \n  \n\n\n\n\n\ngdf.PRNAME.unique()\n\narray(['Newfoundland and Labrador / Terre-Neuve-et-Labrador',\n       'Prince Edward Island / Île-du-Prince-Édouard',\n       'Nova Scotia / Nouvelle-Écosse',\n       'New Brunswick / Nouveau-Brunswick', 'Quebec / Québec', 'Ontario',\n       'Manitoba', 'Saskatchewan', 'Alberta',\n       'British Columbia / Colombie-Britannique', 'Yukon',\n       'Northwest Territories / Territoires du Nord-Ouest', 'Nunavut'],\n      dtype=object)\n\n\nfilter the data to only include the Alberta province\n\ngdf = gdf[gdf.PRNAME.isin(['Alberta'])]\n\n\ngdf.geom_type.unique()\n\narray(['Polygon'], dtype=object)\n\n\nfilter the data to only include the MultiPolygon geometry type\n\ngdf = gdf[gdf.geom_type.isin(['Polygon', 'MultiPolygon'])]\n\nplot the data using geopandas\n\ngdf.plot()\n#add additional info to plot\nplt.title('Map of Alberta')\nplt.xlabel('Longitude')\nplt.ylabel('Latitude')\nplt.show()"
  },
  {
    "objectID": "posts/python-posts/WCSB Map/index.html#read-layer-files",
    "href": "posts/python-posts/WCSB Map/index.html#read-layer-files",
    "title": "Western Canadian Sedimentary Basin (WCSB) Mapping using Geopandas",
    "section": "Read Layer files",
    "text": "Read Layer files\n\n# shapefiles = glob.glob('OilSandsLandCover2020.gdb/')\nshapefiles = glob.glob('Alberta_Census_Boundaries_SHP/Data/')\nshapefiles\n\n['Alberta_Census_Boundaries_SHP/Data/']\n\n\nReading the all the .shp files using geopandas.\n\ngdf = pd.concat([\n    gpd.read_file(shp)\n    for shp in shapefiles\n]).pipe(gpd.GeoDataFrame)\ngdf.crs\n\n<Derived Projected CRS: EPSG:3400>\nName: NAD83 / Alberta 10-TM (Forest)\nAxis Info [cartesian]:\n- E[east]: Easting (metre)\n- N[north]: Northing (metre)\nArea of Use:\n- name: Canada - Alberta.\n- bounds: (-120.0, 48.99, -109.98, 60.0)\nCoordinate Operation:\n- name: Alberta 10-degree TM (Forest)\n- method: Transverse Mercator\nDatum: North American Datum 1983\n- Ellipsoid: GRS 1980\n- Prime Meridian: Greenwich\n\n\n\n# show columns\ngdf.columns\n\nIndex(['CDUID', 'DGUID', 'CDNAME', 'CDTYPE', 'LANDAREA', 'PRUID', 'Shape_Leng',\n       'Shape_Area', 'geometry'],\n      dtype='object')\n\n\nhead of the data\n\ngdf.head()\n\n\n\n\n\n  \n    \n      \n      CDUID\n      DGUID\n      CDNAME\n      CDTYPE\n      LANDAREA\n      PRUID\n      Shape_Leng\n      Shape_Area\n      geometry\n    \n  \n  \n    \n      0\n      4801\n      2021A00034801\n      Division No.  1\n      CDR\n      20277.5235\n      48\n      731858.147928\n      2.106613e+10\n      POLYGON ((769392.116 5621501.264, 769424.875 5...\n    \n    \n      1\n      4802\n      2021A00034802\n      Division No.  2\n      CDR\n      17456.3337\n      48\n      968124.543163\n      1.816766e+10\n      POLYGON ((703274.537 5666369.084, 703265.420 5...\n    \n    \n      2\n      4803\n      2021A00034803\n      Division No.  3\n      CDR\n      13725.0719\n      48\n      720459.744611\n      1.401314e+10\n      POLYGON ((565857.674 5580957.780, 569640.425 5...\n    \n    \n      3\n      4804\n      2021A00034804\n      Division No.  4\n      CDR\n      21055.2056\n      48\n      744593.529088\n      2.225920e+10\n      POLYGON ((772971.984 5791887.223, 772996.565 5...\n    \n    \n      4\n      4805\n      2021A00034805\n      Division No.  5\n      CDR\n      16651.2279\n      48\n      848683.053145\n      1.711136e+10\n      POLYGON ((604596.201 5754808.983, 604596.219 5...\n    \n  \n\n\n\n\n\nplot the data using geopandas\n\ngdf.boundary.plot()\n#add additional info to plot\nplt.title('Alberta Mapping')\nplt.xlabel('Longitude')\nplt.ylabel('Latitude')\nplt.show()"
  },
  {
    "objectID": "posts/python-posts/WCSB Map/index.html#read-canada",
    "href": "posts/python-posts/WCSB Map/index.html#read-canada",
    "title": "Western Canadian Sedimentary Basin (WCSB) Mapping using Geopandas",
    "section": "Read Canada",
    "text": "Read Canada\n\n# shapefiles = glob.glob('OilSandsLandCover2020.gdb/')\nshapefiles = glob.glob('lpr_000b21f_e/lpr_000b21f_e.gdb/')\nshapefiles\n\n['lpr_000b21f_e/lpr_000b21f_e.gdb/']\n\n\nReading the all the .shp files using geopandas.\n\ngdf = pd.concat([\n    gpd.read_file(shp)\n    for shp in shapefiles\n]).pipe(gpd.GeoDataFrame)\ngdf.crs\n\n<Derived Projected CRS: PROJCS[\"NAD83_Statistics_Canada_Lambert\",GEOGCS[\"N ...>\nName: NAD83_Statistics_Canada_Lambert\nAxis Info [cartesian]:\n- [east]: Easting (metre)\n- [north]: Northing (metre)\nArea of Use:\n- undefined\nCoordinate Operation:\n- name: unnamed\n- method: Lambert Conic Conformal (2SP)\nDatum: North American Datum 1983\n- Ellipsoid: Geodetic_Reference_System_of_1980\n- Prime Meridian: Greenwich\n\n\n\n# show columns\ngdf.columns\n\nIndex(['PRUID', 'DGUID', 'PRNAME', 'PRENAME', 'PRFNAME', 'PREABBR', 'PRFABBR',\n       'LANDAREA', 'geometry'],\n      dtype='object')\n\n\nhead of the data\n\ngdf.head()\n\n\n\n\n\n  \n    \n      \n      PRUID\n      DGUID\n      PRNAME\n      PRENAME\n      PRFNAME\n      PREABBR\n      PRFABBR\n      LANDAREA\n      geometry\n    \n  \n  \n    \n      0\n      10\n      2021A000210\n      Newfoundland and Labrador / Terre-Neuve-et-Lab...\n      Newfoundland and Labrador\n      Terre-Neuve-et-Labrador\n      N.L.\n      T.-N.-L.\n      3.581704e+05\n      MULTIPOLYGON (((8841194.729 2213093.663, 88411...\n    \n    \n      1\n      11\n      2021A000211\n      Prince Edward Island / Île-du-Prince-Édouard\n      Prince Edward Island\n      Île-du-Prince-Édouard\n      P.E.I.\n      Î.-P.-É.\n      5.681179e+03\n      MULTIPOLYGON (((8374335.443 1629502.597, 83743...\n    \n    \n      2\n      12\n      2021A000212\n      Nova Scotia / Nouvelle-Écosse\n      Nova Scotia\n      Nouvelle-Écosse\n      N.S.\n      N.-É.\n      5.282471e+04\n      MULTIPOLYGON (((8310463.217 1250722.263, 83104...\n    \n    \n      3\n      13\n      2021A000213\n      New Brunswick / Nouveau-Brunswick\n      New Brunswick\n      Nouveau-Brunswick\n      N.B.\n      N.-B.\n      7.124850e+04\n      MULTIPOLYGON (((7964100.720 1576822.289, 79641...\n    \n    \n      4\n      24\n      2021A000224\n      Quebec / Québec\n      Quebec\n      Québec\n      Que.\n      Qc\n      1.298600e+06\n      MULTIPOLYGON (((6948393.211 2760814.626, 69483...\n    \n  \n\n\n\n\n\nplot the data using geopandas\n\ngdf.boundary.plot()\n#add additional info to plot\nplt.title('Alberta Mapping')\nplt.xlabel('Longitude')\nplt.ylabel('Latitude')\nplt.show()"
  },
  {
    "objectID": "posts/python-posts/Oilsands Data Analysis Part I/index.html#listing-all-the-saved-xls-files-in-the-current-directory",
    "href": "posts/python-posts/Oilsands Data Analysis Part I/index.html#listing-all-the-saved-xls-files-in-the-current-directory",
    "title": "Alberta In-situ Oilsands Production Analysis using Python - Part I",
    "section": "Listing all the saved xls files in the current directory:",
    "text": "Listing all the saved xls files in the current directory:\n\nimport os\n# filter only .xls files\nxls_files = [file for file in os.listdir(os.getcwd()) if file.endswith('.xls')]\nxls_files\n\n['ST53_2010-12.xls',\n 'ST53_2011-12.xls',\n 'ST53_2012-12.xls',\n 'ST53_2013-12.xls',\n 'ST53_2014-12.xls',\n 'ST53_2016-12.xls',\n 'ST53_2017-12.xls',\n 'ST53_2018-12.xls',\n 'ST53_2019-12.xls',\n 'ST53_2020-12.xls',\n 'ST53_2021-12.xls',\n 'ST53_Current.xls']\n\n\nIn the next post, I will show how to read the data from the .xls files and prepare the datasets for further analysis."
  },
  {
    "objectID": "posts/python-posts/Oilsands Data Analysis Part II/index.html#reading-the-first-file",
    "href": "posts/python-posts/Oilsands Data Analysis Part II/index.html#reading-the-first-file",
    "title": "Alberta In-situ Oilsands Production Analysis using Python - Part II",
    "section": "Reading the first file",
    "text": "Reading the first file\nTo start, we read the data from the ST53_2010.xls file using the read_excel function from the pandas library. We set the sheet_name argument to None to read all the sheets in the file. We also use the skiprows argument to skip the first three rows of each sheet. Finally, we use the keys() method to print the names of the sheets in the file.\n\nsheets = pd.read_excel(xls_files[0], sheet_name = None, skiprows = 3)\nprint(f'sheet names: {sheets.keys()}')\n\nsheet names: dict_keys(['BITUMEN', 'WATER', 'STEAM', 'WELLS', 'SOR', 'WSR'])"
  },
  {
    "objectID": "posts/python-posts/Oilsands Data Analysis Part II/index.html#cleaning-the-operator-column",
    "href": "posts/python-posts/Oilsands Data Analysis Part II/index.html#cleaning-the-operator-column",
    "title": "Alberta In-situ Oilsands Production Analysis using Python - Part II",
    "section": "Cleaning the Operator column",
    "text": "Cleaning the Operator column\nLet’s take a look at the Operator column.\n\nbitumen_2010['Operator'].unique()\n\narray(['Canadian Natural Resources Limited', 'Baytex Energy Ltd. (¹)',\n       'North Peace Energy Corp.', 'Penn West Petroleum Ltd.',\n       'Baytex Energy Ltd. (¹²)', 'Shell Canada Limited',\n       'Imperial Oil Resources (¹)',\n       'Canadian Natural Resources Limited (¹)',\n       'Devon NEC Corporation (¹)', 'Connacher Oil And Gas Limited',\n       'Meg Energy Corp.', 'Statoil Canada Ltd. (¹)',\n       'Cenovus Energy Inc.', 'Cenovus FCCL Ltd.', 'Suncor Energy Inc.',\n       'Japan Canada Oil Sands Limited (¹)', 'Suncor Energy Inc. (¹)',\n       'Total E&P Joslyn Ltd. (¹)',\n       'ConocoPhillips Canada Resources Corp.',\n       'ConocoPhillips Canada Limited', 'Nexen Inc.',\n       'Husky Oil Operations Limited', 'Canadian Natural Resources',\n       'Murphy Oil Company Ltd.', 'Cenovus Energy Inc. (¹)',\n       'Prosper Petroleum Ltd.', 'Penn West Energy Trust',\n       'Baytex Energy Ltd.', 'Shell Canada Energy',\n       'Husky Oil Operations Ltd.', 'Action Energy Inc.',\n       'Devon Canada Corporation', 'Bonavista Petroleum Ltd.',\n       'Murphy Oil Canada', 'Watch Resources Ltd.',\n       'Manitok Exploration Inc.', 'Koch Exploration Canada G/P Ltd.',\n       'Husky Oil Operations Limited (et Al)', 'Twin Butte Energy Ltd.',\n       'Sunshine Oilsands Ltd.', 'Solara Exploration Ltd.',\n       'Canadian Natural Resources Limited (¹²)',\n       'Bellatrix Exploration Ltd. (¹²)', 'Blackpearl Resources Inc. (¹)',\n       'Crispin Energy Inc.', 'Husky Oil Operations Limited (¹)',\n       'Buffalo Resources Corp.', 'ExxonMobil Canada Ltd.',\n       'Harvest Operations Corp.', 'Bronco Energy Ltd.',\n       'Frog Lake Energy Resources Corp.',\n       'Koch Exploration Canada G/P Ltd. (¹)'], dtype=object)\n\n\nThe Operator column contains several names that are followed by (subscripts). These additional pieces of information create inconsistencies in the Operator column and add unnecessary complexity to the dataset. Since they are not needed for our analysis, we can remove them using the replace method.\n\nbitumen_2010['Operator'] = bitumen_2010['Operator'].str.replace(r'\\(.*\\)', '').str.strip()\nbitumen_2010['Operator'].unique()\n\narray(['Canadian Natural Resources Limited', 'Baytex Energy Ltd.',\n       'North Peace Energy Corp.', 'Penn West Petroleum Ltd.',\n       'Shell Canada Limited', 'Imperial Oil Resources',\n       'Devon NEC Corporation', 'Connacher Oil And Gas Limited',\n       'Meg Energy Corp.', 'Statoil Canada Ltd.', 'Cenovus Energy Inc.',\n       'Cenovus FCCL Ltd.', 'Suncor Energy Inc.',\n       'Japan Canada Oil Sands Limited', 'Total E&P Joslyn Ltd.',\n       'ConocoPhillips Canada Resources Corp.',\n       'ConocoPhillips Canada Limited', 'Nexen Inc.',\n       'Husky Oil Operations Limited', 'Canadian Natural Resources',\n       'Murphy Oil Company Ltd.', 'Prosper Petroleum Ltd.',\n       'Penn West Energy Trust', 'Shell Canada Energy',\n       'Husky Oil Operations Ltd.', 'Action Energy Inc.',\n       'Devon Canada Corporation', 'Bonavista Petroleum Ltd.',\n       'Murphy Oil Canada', 'Watch Resources Ltd.',\n       'Manitok Exploration Inc.', 'Koch Exploration Canada G/P Ltd.',\n       'Twin Butte Energy Ltd.', 'Sunshine Oilsands Ltd.',\n       'Solara Exploration Ltd.', 'Bellatrix Exploration Ltd.',\n       'Blackpearl Resources Inc.', 'Crispin Energy Inc.',\n       'Buffalo Resources Corp.', 'ExxonMobil Canada Ltd.',\n       'Harvest Operations Corp.', 'Bronco Energy Ltd.',\n       'Frog Lake Energy Resources Corp.'], dtype=object)\n\n\nThe operator names in the dataset may contain inconsistencies where some operators are listed with different names. To make the names consistent, we can create a dictionary with the names to be replaced and the new names. However, it’s important to note that the following dictionary may contain additional names that are not in the 2010 dataset. This dictionary was created using data from all the files between 2010 and 2022.\n\n# create a dictionary to make Operator names consistent\noperators_dict = {'Athabasca Oil Corporation': 'Athabasca Oil',\n                  'Baytex Energy Ltd.': 'Baytex',\n                  'Blackpearl Resources Inc.': 'BlackPearl',\n                  'BlackPearl Resources Inc.': 'BlackPearl',\n                  'Bonavista Petroleum Ltd.': 'Bonavista',\n                  'Bonavista Energy Corporation': 'Bonavista',\n                  'CNOOC Petroleum North America ULC': 'CNOOC',\n                  'Canadian Natural Resources': 'CNRL',\n                  'Canadian Natural Resources Limited': 'CNRL',\n                  'Canadian Natural Upgrading Limited': 'CNRL',\n                  'Cenovus Energy Inc.': 'Cenovus',\n                  'Cenovus FCCL Ltd.': 'Cenovus',\n                  'ConocoPhillips Canada Resources Corp.': 'ConocoPhillips',\n                  'ConocoPhillips Canada Limited': 'ConocoPhillips',\n                  'Devon Canada Corporation': 'Devon',\n                  'Devon NEC Corporation': 'Devon',\n                  'ExxonMobil Canada Ltd.': 'Imperial',\n                  'Greenfire Hangingstone Operating Corporation': 'Greenfire',\n                  'Greenfire Resources Operating Corporation': 'Greenfire',\n                  'Husky Oil Operations Limited' : 'Husky',\n                  'Husky Oil Operations Ltd.' : 'Husky',\n                  'Imperial Oil Resources': 'Imperial',\n                  'Imperial Oil Resources Limited': 'Imperial',\n                  'Islander Oil & Gas Inc.': 'Islander',\n                  'Koch Exploration Canada G/P Ltd.': 'Koch',\n                  'Koch Oil Sands Operating ULC': 'Koch',\n                  'MEG Energy Corp.': 'MEG',\n                  'Meg Energy Corp.': 'MEG',\n                  'Murphy Oil Canada': 'Murphy',\n                  'Murphy Oil Company Ltd.': 'Murphy',\n                  'Nexen Energy ULC': 'Nexen',\n                  'Nexen Inc.': 'Nexen',\n                  'Obsidian Energy Ltd.': 'Obsidian',\n                  'OSUM Oil Sands Corp.': 'OSUM',\n                  'Osum Production Corp.': 'OSUM',\n                  'Pengrowth Corporation': 'Pengrowth',\n                  'Pengrowth Energy Corporation': 'Pengrowth',\n                  'Penn West Energy Trust': 'Penn West',\n                  'Penn West Petroleum Ltd.': 'Penn West',\n                  'Perpetual Energy Inc.': 'Perpetual',\n                  'Perpetual Energy Operating Corp.': 'Perpetual',\n                  'Perpetual Operating Corp.': 'Perpetual',\n                  'PetroChina Canada Ltd.': 'PetroChina',\n                  'Petrochina Canada Ltd.': 'PetroChina',\n                  'Strathcona Resources Ltd.': 'Strathcona',\n                  'Shell Canada Energy': 'Shell',\n                  'Shell Canada Limited': 'Shell',\n                  'Spur Petroleum Ltd.': 'Spur',\n                  'Spur Resources Ltd.': 'Spur',\n                  'Suncor Energy Inc.': 'Suncor',\n                  'Woodcote Oil & Gas Inc.': 'Woodcote',\n                  'Woodcote Oil Corp.': 'Woodcote'\n                  }\n\n\n# replace the names in the Operator column\nbitumen_2010['Operator'] = bitumen_2010['Operator'].replace(operators_dict)\nbitumen_2010['Operator'].unique()\n\narray(['CNRL', 'Baytex', 'North Peace Energy Corp.', 'Penn West', 'Shell',\n       'Imperial', 'Devon', 'Connacher Oil And Gas Limited', 'MEG',\n       'Statoil Canada Ltd.', 'Cenovus', 'Suncor',\n       'Japan Canada Oil Sands Limited', 'Total E&P Joslyn Ltd.',\n       'ConocoPhillips', 'Nexen', 'Husky', 'Murphy',\n       'Prosper Petroleum Ltd.', 'Action Energy Inc.', 'Bonavista',\n       'Watch Resources Ltd.', 'Manitok Exploration Inc.', 'Koch',\n       'Twin Butte Energy Ltd.', 'Sunshine Oilsands Ltd.',\n       'Solara Exploration Ltd.', 'Bellatrix Exploration Ltd.',\n       'BlackPearl', 'Crispin Energy Inc.', 'Buffalo Resources Corp.',\n       'Harvest Operations Corp.', 'Bronco Energy Ltd.',\n       'Frog Lake Energy Resources Corp.'], dtype=object)\n\n\nIt should be noted that there have been a number of acquisitions and mergers in the oil and gas industry in recent years, and this can lead to inconsistencies in the naming of operators across different years. However, for the sake of simplicity, we will ignore these changes and assume that operator names remain consistent across all years."
  },
  {
    "objectID": "posts/python-posts/Oilsands Data Analysis Part II/index.html#simplifiying-the-area-column",
    "href": "posts/python-posts/Oilsands Data Analysis Part II/index.html#simplifiying-the-area-column",
    "title": "Alberta In-situ Oilsands Production Analysis using Python - Part II",
    "section": "Simplifiying the Area column",
    "text": "Simplifiying the Area column\nTo simplify the Area column, we can replace the values Peace River Area 1 and Peace River Area 2 with a single value Peace River. This is done to aggregate the production data for the Peace River area.\n\nbitumen_2010['Area'] = bitumen_2010['Area'].replace({'Peace River Area 1': 'Peace River', 'Peace River Area 2': 'Peace River'}) \nbitumen_2010['Area'].unique()\n\narray(['Cold Lake', 'Peace River', 'Athabasca, Cold Lake', 'Athabasca'],\n      dtype=object)\n\n\nThere is only one row with an Area value of Athabasca, Cold Lake. To make it consistent with the other rows, we can change it to Cold Lake.\n\nbitumen_2010['Area'] = bitumen_2010['Area'].replace({'Athabasca, Cold Lake': 'Cold Lake'})\n\nWe also add a Year column to the dataframe.\n\nbitumen_2010['Year'] = int(xls_files[0].split('_')[-1].split('-')[0])\nbitumen_2010['Year'].unique()\n\narray([2010], dtype=int64)"
  },
  {
    "objectID": "posts/python-posts/Oilsands Data Analysis Part III/index.html",
    "href": "posts/python-posts/Oilsands Data Analysis Part III/index.html",
    "title": "Alberta In-situ Oilsands Production Analysis using Python - Part III",
    "section": "",
    "text": "This blog post is for educational purposes only. Any commercial use of the information provided in this blog post is prohibited. For more information about the AER copyright and permission to reproduce, please visit AER Copyright and Disclaimer. The author is not responsible for any damage or loss caused by the use of the information provided in this blog post."
  },
  {
    "objectID": "posts/python-posts/Oilsands Data Analysis Part III/index.html#alberta-average-bitumen-production-rate-per-year",
    "href": "posts/python-posts/Oilsands Data Analysis Part III/index.html#alberta-average-bitumen-production-rate-per-year",
    "title": "Alberta In-situ Oilsands Production Analysis using Python - Part III",
    "section": "Alberta average bitumen production rate per year",
    "text": "Alberta average bitumen production rate per year\nThe daily bitumen production rate is reported as a monthly average in m3/day. An approximation of the yearly average production rate in m3/day is calculated by taking the average of the monthly average production rates. The yearly average production rate is then converted to Mm3/day by dividing it by 1,000.\n\n# Calculate the average daily production rate for each year\nbitumen_agg = (bitumen\n              .assign(Production_Rate = lambda x: x.loc[:,\"Jan\":\"Dec\"].mean(axis = 1))\n              .drop(columns = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'])\n              .groupby(['Year'])\n              .sum()\n              .div(1000)\n              .reset_index()\n              )\nbitumen_agg\n\n\n\n\n\n  \n    \n      \n      Year\n      Production_Rate\n    \n  \n  \n    \n      0\n      2010\n      119.596470\n    \n    \n      1\n      2011\n      134.691030\n    \n    \n      2\n      2012\n      157.040421\n    \n    \n      3\n      2013\n      175.839908\n    \n    \n      4\n      2014\n      200.679804\n    \n    \n      5\n      2016\n      220.765067\n    \n    \n      6\n      2017\n      245.572865\n    \n    \n      7\n      2018\n      249.694999\n    \n    \n      8\n      2019\n      245.745934\n    \n    \n      9\n      2020\n      237.340961\n    \n    \n      10\n      2021\n      264.391272\n    \n    \n      11\n      2022\n      269.899715\n    \n  \n\n\n\n\nLet’s see the yearly average production rate in Mm3/day.\n\n# Plot the yearly average production rate\nplt.figure(figsize = (8, 6))\nsns.barplot(x = 'Year', y = 'Production_Rate', data = bitumen_agg)\nplt.title('Alberta average bitumen production rate')\nplt.xlabel('Year')\nplt.ylabel('Production Rate (Mm3/day)')\nplt.show()"
  },
  {
    "objectID": "posts/python-posts/Oilsands Data Analysis Part III/index.html#largest-bitumen-producers-in-alberta-since-2010",
    "href": "posts/python-posts/Oilsands Data Analysis Part III/index.html#largest-bitumen-producers-in-alberta-since-2010",
    "title": "Alberta In-situ Oilsands Production Analysis using Python - Part III",
    "section": "Largest bitumen producers in Alberta since 2010",
    "text": "Largest bitumen producers in Alberta since 2010\nThe top 10 largest bitumen producers in Alberta since 2010 are listed below. The data is sorted by the total bitumen production in descending order. The total bitumen production rate is converted to MMm3/day by dividing by 1,000,000.\n\n# Calculate the total bitumen production rate for each operator\nbitumen_agg = (bitumen\n              .assign(Cumulative_Production = lambda x: x.loc[:,\"Jan\":\"Dec\"].sum(axis = 1) * 365)\n              .drop(columns = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec', 'Year'])\n              .groupby(['Operator'])\n              .sum()\n              .div(1_000_000)\n              .sort_values(by = 'Cumulative_Production', ascending = False)\n              .reset_index()\n              .head(10)\n              )\nbitumen_agg \n\n\n\n\n\n  \n    \n      \n      Operator\n      Cumulative_Production\n    \n  \n  \n    \n      0\n      Cenovus\n      2561.630674\n    \n    \n      1\n      CNRL\n      2266.675729\n    \n    \n      2\n      Suncor\n      1550.949426\n    \n    \n      3\n      Imperial\n      1249.998787\n    \n    \n      4\n      ConocoPhillips\n      668.101066\n    \n    \n      5\n      Devon\n      533.488187\n    \n    \n      6\n      MEG\n      531.186018\n    \n    \n      7\n      Husky\n      359.571866\n    \n    \n      8\n      Nexen\n      157.297422\n    \n    \n      9\n      CNOOC\n      146.821801\n    \n  \n\n\n\n\nThe figure below illustrates the top 10 largest bitumen producers in Alberta since 2010.\n\n# Plot the top 10 largest bitumen producers in Alberta since 2010\nplt.figure(figsize = (8, 6))\nsns.barplot(x = 'Cumulative_Production', y = 'Operator', data = bitumen_agg)\nplt.title('Top 10 largest bitumen producers in Alberta since 2010')\nplt.xlabel('Cumulative Production (MMm3)')\nplt.ylabel('Operator')\nplt.show()"
  },
  {
    "objectID": "posts/python-posts/Oilsands Data Analysis Part III/index.html#largest-bitumen-producers-in-alberta-in-2022",
    "href": "posts/python-posts/Oilsands Data Analysis Part III/index.html#largest-bitumen-producers-in-alberta-in-2022",
    "title": "Alberta In-situ Oilsands Production Analysis using Python - Part III",
    "section": "Largest bitumen producers in Alberta in 2022",
    "text": "Largest bitumen producers in Alberta in 2022\nThe top 10 largest bitumen producers in Alberta in 2022 are listed below. The data is sorted by the bitumen production rate in descending order. The yearly bitumen production rate is converted to Mm3/day by dividing by 1,000.\n\n# Calculate the yearly bitumen production rate for each operator\nbitumen_agg = (bitumen\n              .query(\"Year == 2022\")\n              .assign(Production_Rate = lambda x: x.loc[:,\"Jan\":\"Dec\"].mean(axis = 1))\n              .drop(columns = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec', 'Year'])\n              .groupby(['Operator'])\n              .sum()\n              .div(1000)\n              .sort_values(by = 'Production_Rate', ascending = False)\n              .reset_index()\n              .head(10)\n              )\nbitumen_agg\n\n\n\n\n\n  \n    \n      \n      Operator\n      Production_Rate\n    \n  \n  \n    \n      0\n      Cenovus\n      76.725747\n    \n    \n      1\n      CNRL\n      55.968093\n    \n    \n      2\n      Suncor\n      36.721742\n    \n    \n      3\n      Imperial\n      23.121582\n    \n    \n      4\n      ConocoPhillips\n      22.142553\n    \n    \n      5\n      MEG\n      14.758539\n    \n    \n      6\n      Strathcona\n      7.995144\n    \n    \n      7\n      CNOOC\n      7.562969\n    \n    \n      8\n      Athabasca Oil\n      4.610921\n    \n    \n      9\n      Greenfire\n      4.151495\n    \n  \n\n\n\n\nThe top 10 largest bitumen producers in Alberta in 2022 are shown in the plot below.\n\n# Plot the top 10 largest bitumen producers in Alberta in 2022\nplt.figure(figsize = (8, 6))\nsns.barplot(x = 'Production_Rate', y = 'Operator', data = bitumen_agg)\nplt.title('Top 10 largest bitumen producers in Alberta in 2022')\nplt.xlabel('Production Rate (Mm3/day)')\nplt.ylabel('Operator')\nplt.show()"
  },
  {
    "objectID": "posts/python-posts/Oilsands Data Analysis Part III/index.html#largest-bitumen-producers-in-alberta-in-2022-by-area",
    "href": "posts/python-posts/Oilsands Data Analysis Part III/index.html#largest-bitumen-producers-in-alberta-in-2022-by-area",
    "title": "Alberta In-situ Oilsands Production Analysis using Python - Part III",
    "section": "Largest bitumen producers in Alberta in 2022 by area",
    "text": "Largest bitumen producers in Alberta in 2022 by area\nThe top 5 largest 2022 bitumen producers by area in Alberta are listed below. The data is sorted by the bitumen production rate in descending order. The yearly bitumen production rate is converted to Mm3/day by dividing by 1,000.\n\n# Calculate the yearly bitumen production rate for each operator by area\nbitumen_agg = (bitumen\n              .query(\"Year == 2022\")\n              .assign(Production_Rate = lambda x: x.loc[:,\"Jan\":\"Dec\"].mean(axis = 1))\n              .drop(columns = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec', 'Year'])\n              .groupby(['Area', 'Operator'])\n              .sum()\n              .div(1000)\n              .sort_values(by = 'Production_Rate', ascending = False)\n              .groupby('Area')\n              .head(5)\n              .reset_index()\n              )\nbitumen_agg\n\n\n\n\n\n  \n    \n      \n      Area\n      Operator\n      Production_Rate\n    \n  \n  \n    \n      0\n      Athabasca\n      Cenovus\n      76.565583\n    \n    \n      1\n      Athabasca\n      CNRL\n      36.756985\n    \n    \n      2\n      Athabasca\n      Suncor\n      36.721742\n    \n    \n      3\n      Cold Lake\n      Imperial\n      23.121582\n    \n    \n      4\n      Athabasca\n      ConocoPhillips\n      22.142553\n    \n    \n      5\n      Cold Lake\n      CNRL\n      17.712652\n    \n    \n      6\n      Athabasca\n      MEG\n      14.758539\n    \n    \n      7\n      Cold Lake\n      Strathcona\n      7.995144\n    \n    \n      8\n      Peace River\n      Baytex\n      2.889908\n    \n    \n      9\n      Peace River\n      CNRL\n      1.498456\n    \n    \n      10\n      Peace River\n      Obsidian\n      0.889067\n    \n    \n      11\n      Cold Lake\n      Baytex\n      0.308280\n    \n    \n      12\n      Peace River\n      Islander\n      0.273017\n    \n    \n      13\n      Cold Lake\n      Cenovus\n      0.160163\n    \n    \n      14\n      Peace River\n      Woodcote\n      0.031730\n    \n  \n\n\n\n\nThe figure below shows the top 5 largest bitumen producers in Alberta in 2022 by area.\n\nfig, ax = plt.subplots(3, 1, figsize = (6, 15))\nfor i, area in enumerate(bitumen_agg['Area'].unique()):\n    sns.barplot(x = 'Production_Rate', y = 'Operator', data = bitumen_agg.query(\"Area == @area\"), ax = ax[i])\n    ax[i].set_title(area)\n    ax[i].set_xlabel('Production Rate (Mm3/day)')\n    ax[i].set_ylabel('Operator')\nfig.subplots_adjust(top = 0.95)\nplt.show()"
  },
  {
    "objectID": "posts/julia-posts/Thermal Recovery Part I/index.html",
    "href": "posts/julia-posts/Thermal Recovery Part I/index.html",
    "title": "Thermal Recovery - Part I",
    "section": "",
    "text": "This blog post is for educational purposes only. Any commercial use of the information provided in this blog post is prohibited. The author is not responsible for any damage or loss caused by the use of the information provided in this blog post."
  },
  {
    "objectID": "posts/julia-posts/Thermal Recovery Part I/index.html#the-heat-conduction-equation",
    "href": "posts/julia-posts/Thermal Recovery Part I/index.html#the-heat-conduction-equation",
    "title": "Thermal Recovery - Part I",
    "section": "The Heat Conduction Equation",
    "text": "The Heat Conduction Equation\nThe heat conduction equation is solved using the Julia programming language. The Plots module is used to create the plots.\nLet’s assign the values of the thermal conductivity, the wellbore temperature, the reservoir boundary temperature, and the reservoir length.\n\n# thermal conductivity (W/m.K)\nk = 2.0\n# wellbore temperature (°C)\nT_steam = 200.0\n# reservoir boundary temperature (°C)\nT_reservoir = 10.0\n# reservoir length (m)\nL = 50.0\n\n50.0\n\n\nLet’s define the function that solves the heat conduction equation.\n\n# define a function with erfc() to solve the heat conduction equation in a 1D reservoir\nfunction solve_heat_conduction_equation(T_reservoir, T_steam, k, L, t)\n    # distance from the wellbore (m)\n    x = LinRange(0.0, L, 100)\n    # temperature (°C)\n    T = T_reservoir .+ (T_steam .- T_reservoir) .* erfc.(x ./ (2 .* sqrt.(k .* t)))\n    return x, T\nend\n\nsolve_heat_conduction_equation (generic function with 1 method)\n\n\nLet’s solve the heat conduction equation for different times.\n\n# solve the heat conduction equation for different times\n# time (days)\nt = [1, 10, 100, 1_000]\n# create a DataFrame to store the results\ndf = DataFrame(x = [], T = [], t = [])\n# solve the heat conduction equation for different times\nfor i in 1:length(t)\n    x, T = solve_heat_conduction_equation(T_reservoir, T_steam, k, L, t[i])\n    df = vcat(df, DataFrame(x = x, T = T, t = t[i]))\nend\n\nLet’s plot the temperature profile for different times.\n\n# plot the temperature profile for different times\n@df df plot(:x, :T, group = :t, xlabel = \"Distance from the wellbore (m)\", ylabel = \"Temperature (°C)\", legend = :topright, title = \"Temperature Profile\", lw = 3, label = [\"t = 1 day\" \"t = 10 days\" \"t = 100 days\" \"t = 1,000 days\"])"
  },
  {
    "objectID": "posts/julia-posts/Thermal Recovery Part I/index.html#the-heat-conduction-equation-with-a-wellbore",
    "href": "posts/julia-posts/Thermal Recovery Part I/index.html#the-heat-conduction-equation-with-a-wellbore",
    "title": "Thermal Recovery - Part I",
    "section": "The Heat Conduction Equation with a Wellbore",
    "text": "The Heat Conduction Equation with a Wellbore"
  },
  {
    "objectID": "posts/julia-posts/Thermal Recovery Part II/index.html",
    "href": "posts/julia-posts/Thermal Recovery Part II/index.html",
    "title": "Thermal Recovery - Part II",
    "section": "",
    "text": "This blog post is for educational purposes only. Any commercial use of the information provided in this blog post is prohibited. The author is not responsible for any damage or loss caused by the use of the information provided in this blog post."
  },
  {
    "objectID": "posts/julia-posts/Thermal Recovery Part I/index.html#the-heat-conduction-equation-1",
    "href": "posts/julia-posts/Thermal Recovery Part I/index.html#the-heat-conduction-equation-1",
    "title": "Thermal Recovery - Part I",
    "section": "The Heat Conduction Equation",
    "text": "The Heat Conduction Equation\nThe heat conduction equation is solved using the Julia programming language. The Plots module is used to create the plots.\nLet’s assign the values of the thermal conductivity, the wellbore temperature, the reservoir boundary temperature, and the reservoir length.\nquarto-executable-code-5450563D\n# thermal conductivity (W/m.K)\nk = 2.0\n# wellbore temperature (°C)\nT_steam = 200.0\n# reservoir boundary temperature (°C)\nT_reservoir = 10.0\n# reservoir length (m)\nL = 50.0\nLet’s define the function that solves the heat conduction equation.\nquarto-executable-code-5450563D\n# define a function with erfc() to solve the heat conduction equation in a 1D reservoir\nfunction solve_heat_conduction_equation(T_reservoir, T_steam, k, L, t)\n    # distance from the wellbore (m)\n    x = LinRange(0.0, L, 100)\n    # temperature (°C)\n    T = T_reservoir .+ (T_steam .- T_reservoir) .* erfc.(x ./ (2 .* sqrt.(k .* t)))\n    return x, T\nend\nLet’s solve the heat conduction equation for different times.\nquarto-executable-code-5450563D\n# solve the heat conduction equation for different times\n# time (days)\nt = [1, 10, 100, 1_000]\n# create a DataFrame to store the results\ndf = DataFrame(x = [], T = [], t = [])\n# solve the heat conduction equation for different times\nfor i in 1:length(t)\n    x, T = solve_heat_conduction_equation(T_reservoir, T_steam, k, L, t[i])\n    df = vcat(df, DataFrame(x = x, T = T, t = t[i]))\nend\nLet’s plot the temperature profile for different times.\nquarto-executable-code-5450563D\n# plot the temperature profile for different times\n@df df plot(:x, :T, group = :t, xlabel = \"Distance from the wellbore (m)\", ylabel = \"Temperature (°C)\", legend = :topright, title = \"Temperature Profile\", lw = 3, label = [\"t = 1 day\" \"t = 10 days\" \"t = 100 days\" \"t = 1,000 days\"])"
  },
  {
    "objectID": "posts/julia-posts/Thermal Recovery Part I/index.html#solving-the-heat-conduction-equation",
    "href": "posts/julia-posts/Thermal Recovery Part I/index.html#solving-the-heat-conduction-equation",
    "title": "Thermal Recovery - Part I",
    "section": "Solving the heat conduction equation",
    "text": "Solving the heat conduction equation\nLet’s assign the values of thermal diffusivity, steam temperature, overburden temperature.\n\n# thermal diffusivity (m^2/day)\nalpha = 8.333e-7 * 86400\n# steam temperature (°C)\nT_steam = 264.0\n# overburden temperature (°C)\nT_reservoir = 15.0\n# distance from the boundary (m)\nx = range(0, 20, length = 10_000)\n\n0.0:0.002000200020002:20.0\n\n\nWe define a function that solves the heat conduction equation.\n\nfunction solve_heat_conduction_equation(T_reservoir, T_steam, alpha, x, t)\n    T = T_reservoir .+ (T_steam .- T_reservoir) .* erfc.(x ./ (2 .* sqrt.(alpha .* t)))\n    return x, T\nend\n\nsolve_heat_conduction_equation (generic function with 1 method)\n\n\nLet’s solve the heat conduction equation for different times.\n\nt = [1/365.0, 1, 2, 3, 4] * 365 # days\n# create a DataFrame to store the results\ndf = DataFrame(x = [], T = [], t = [])\n# solve the heat conduction equation for different times\nfor i in 1:length(t)\n    x, T = solve_heat_conduction_equation(T_reservoir, T_steam, alpha, x, t[i])\n    df = vcat(df, DataFrame(x = x, T = T, t = t[i]))\nend\n\nLet’s plot the temperature profile for different times.\n\n@df df plot(:x, :T, group = :t, \nxlabel = \"Distance from the boundary (m)\", ylabel = \"Temperature (°C)\", \nlegend = :topright, title = \"Temperature Profile\", lw = 3, \nlabel = [\"t = 1 day\" \"t = 365 days\" \"t = 730 days\" \"t = 1095 days\" \"t = 1460 days\"])"
  },
  {
    "objectID": "posts/julia-posts/Thermal Recovery Part I/index.html#constant-surface-area",
    "href": "posts/julia-posts/Thermal Recovery Part I/index.html#constant-surface-area",
    "title": "Thermal Recovery - Part I",
    "section": "1.0 Constant Surface Area",
    "text": "1.0 Constant Surface Area\nThe heat flux to overburden over a constant surface area (A) is given by:\n\\[q = \\frac{Q}{A} = -\\kappa (\\frac{\\partial T}{\\partial x})_{x=0}\\]\nwhere \\(\\kappa\\) is the thermal conductivity, \\(T\\) is the temperature, and \\(x\\) is the distance from the boundary. The cumulative heat loss to overburden is given by:\n\\[q_{c} = \\int_0^t -\\kappa (\\frac{\\partial T}{\\partial x})_{_{x=0}} dt\\]\nwhere \\(t\\) is time. Using the temperature profile given above, we can calculate the cumulative heat flux to overburden as:\n\\[q_{c} = 2(T_{steam} - T_{overburden})\\kappa\\sqrt{\\frac{t}{\\pi \\alpha}}\\]\nWe define a function that calculates the cumulative heat flux to overburden.\n\nfunction cumulative_heat_flux_constant_area(T_reservoir, T_steam, α, κ, t)\n    q = 2.0 * (T_steam - T_reservoir) * κ * sqrt.(t ./ (π .* α))\n    return q\nend;\n\nLet’s calculate the cumulative heat loss to overburden over a constant surface area of 40,000 \\(m^2\\) over 10 years. We are assuming that from day 0 to day 3650, the surface area exposed to steam is 40,000 \\(m^2\\).\n\nt = range(0, 10 * 365) * 1.0 # days\n# thermal conductivity (J/day/m/K)\nκ = 1.7 * 86400\nA = 40_000.0 # m^2\n# calculate the cumulative heat loss to overburden in Joules\nQ = A * cumulative_heat_flux_constant_area(T_reservoir, T_steam, α, κ, t) / 1e6 # MJ\n# create a DataFrame to store the results\ndf = DataFrame(t = t, year = t / 365.0, Q = Q);\n\nBelow, we plot the cumulative heat loss to overburden.\n\n@df df plot(:t, :Q, xlabel = \"Time (days)\", ylabel = \"Cumulative heat loss to overburden (MJoules)\",\ntitle = \"Cumulative Heat Loss To Overburden\", lw = 3, label = \"A = 40000 m^2\")\n\n\n\n\nWe also calculate and plot the rate of heat loss to overburden at the reservoir/overburden boundary as:\n\n# define the heat loss rate function\nfunction heat_flux_rate_constant_area(T_reservoir, T_steam, α, κ, t)\n    q = (T_steam - T_reservoir) * κ ./ sqrt.(π * α .* t)\n    return q\nend;\n\nIncreamental heat loss to the overburden over years is calculated as follows:\n\ndf_sub = df[df.year .== round.(df.year, digits = 0), :]\n# create a lag column from Q column\ndf_sub[!, :Q_lag] = ShiftedArrays.lag(df_sub.Q, 1)\n# calculate the increamental heat loss to overburden\ndf_sub[!, :Q_incremental] = df_sub.Q - df_sub.Q_lag\n@df df_sub bar(:year, :Q_incremental, xlabel = \"Time (Year)\", ylabel = \"Increamental heat loss to overburden (MJoules)\",\ntitle = \"Increamental Heat Loss To Overburden\", lw = 3, label = \"A = 40_000 m^2\")\n\n\n\n\n\nt = range(0, 10 * 365) * 1.0 # days\n# calculate the heat loss rate in MJoules/day\nq = A * heat_flux_rate_constant_area(T_reservoir, T_steam, α, κ, t) / 1e6 # MJ/day\n# create a DataFrame to store the results\ndf = DataFrame(t = t, q = q);\n\n\n@df df plot(:t, :q, xlabel = \"Time (days)\", ylabel = \"Rate of heat loss to overburden (MJoules/day)\",\ntitle = \"Rate of Heat Loss To Overburden\", lw = 3, label = \"A = 40000 m^2\")"
  },
  {
    "objectID": "posts/julia-posts/Thermal Recovery Part I/index.html#surface-area-increase-with-time",
    "href": "posts/julia-posts/Thermal Recovery Part I/index.html#surface-area-increase-with-time",
    "title": "Thermal Recovery - Part I",
    "section": "Surface Area Increase With Time",
    "text": "Surface Area Increase With Time\nSurface area of the overburden exposed to the steam increases with time. The cumulative heat loss to overburden is calculated as follows if we assume the surface area changes proportionaly with the n^{th} power of time:\n\\[q = 2(T_{steam} - T_{overburden})\\kappa\\sqrt{\\frac{t}{\\pi \\alpha}} \\psi(n)\\]\nwhere \\(n\\) is the power of time and the values can be derived from the following formul:\n\\[\\psi(n) = \\frac{n \\sqrt\\pi}{2}\\frac{\\Gamma(n)}{\\Gamma(n + 3/2)}\\]"
  },
  {
    "objectID": "posts/julia-posts/Thermal Recovery Part I/index.html#surface-area-increases-with-time",
    "href": "posts/julia-posts/Thermal Recovery Part I/index.html#surface-area-increases-with-time",
    "title": "Thermal Recovery - Part I",
    "section": "Surface Area Increases With Time",
    "text": "Surface Area Increases With Time\nSurface area of the overburden exposed to the steam increases with time. The cumulative heat loss to overburden is calculated as follows if we assume the surface area changes proportionaly with the n^{th} power of time:\n\\[q = 2(T_{steam} - T_{overburden})\\kappa\\sqrt{\\frac{t}{\\pi \\alpha}} \\psi(n)\\]\nwhere \\(n\\) is the power of time and the values can be derived from the following formul:\n\\[\\psi(n) = \\frac{n \\sqrt\\pi}{2}\\frac{\\Gamma(n)}{\\Gamma(n + 3/2)}\\]\nSimilar to the previous case, we define a function that calculates the cumulative heat loss to overburden.\n\nfunction cumulative_heat_flux_variable_area(T_reservoir, T_steam, α, κ, t, n)\n    q = 2.0 * (T_steam - T_reservoir) * κ * sqrt.(t ./ (π .* α)) .* (n * sqrt(π) / 2.0) .* (gamma(n) / gamma(n + 3.0 / 2.0))\n    return q\nend;\n\nLet’s calculate the cumulative heat loss to overburden over a surface area that linearly changes with time (n = 1) for different times.\n\nt = range(0, 4, length = 365) * 365 # days\n# thermal conductivity (J/day/m/K)\nκ = 1.7 * 86400\nA = 4_000.0 # m^2\nn = 1.0\n# calculate the cumulative heat loss to overburden in Joules\nQ = A * cumulative_heat_flux_variable_area(T_reservoir, T_steam, α, κ, t, n) / 1e6 # MJ\n# create a DataFrame to store the results\ndf = DataFrame(t = t, Q = Q);\n\nBelow, we plot the cumulative heat loss to overburden.\n\n@df df plot(:t, :Q, xlabel = \"Time (days)\", ylabel = \"Cumulative heat loss to overburden (MJoules)\",\ntitle = \"Cumulative Heat Loss To Overburden\", lw = 3, label = \"A = 4000 m^2\")"
  },
  {
    "objectID": "posts/julia-posts/Thermal Recovery Part I/index.html#surface-area-increases-with-time-heat-transfer-from-a-spreading-hot-zone",
    "href": "posts/julia-posts/Thermal Recovery Part I/index.html#surface-area-increases-with-time-heat-transfer-from-a-spreading-hot-zone",
    "title": "Thermal Recovery - Part I",
    "section": "2. Surface Area Increases With Time (Heat Transfer From A Spreading Hot Zone)",
    "text": "2. Surface Area Increases With Time (Heat Transfer From A Spreading Hot Zone)\nSurface area of the overburden exposed to the steam increases with time. The cumulative heat loss to overburden is calculated as follows if we assume the surface area changes linearly with time:\n\\[Q_{c} = \\frac{4}{3} \\frac{(T_{steam} - T_{overburden})\\kappa \\dot{A}}{\\sqrt{\\pi \\alpha}} t^{1.5}\\]\nwhere \\(\\dot{A}\\) is the rate of change of surface area with time.\nThe heat loss rate is given by: \\[Q = 2 (T_{steam} - T_{overburden})\\kappa \\dot{A} \\sqrt{\\frac{t}{\\pi \\alpha}} \\]\nSimilar to the previous case, we define two functions that calculate the cumulative heat loss and rate of heat loss to overburden.\n\nfunction cumulative_heat_loss_variable_area(T_reservoir, T_steam, α, κ, A_dot, t)\n    Q = 4.0 / 3.0 * (T_steam - T_reservoir) * κ / sqrt(π * α) * A_dot .* t .^ 1.5\n    return Q\nend;\n\n\nfunction heat_loss_rate_variable_area(T_reservoir, T_steam, α, κ, A_dot, t)\n    q = 2.0 * (T_steam - T_reservoir) * κ / sqrt(π * α) * A_dot .* t .^ 0.5\n    return q\nend;\n\nLet’s calculate the cumulative heat loss to overburden over a surface area that linearly changes with time over 10 years. The surface area increases linearly with a rate of 4,000/365 \\(m^2/day\\) over 10 years.\n\nt = range(0, 10 * 365) * 1.0 # days\n# thermal conductivity (J/day/m/K)\nκ = 1.7 * 86400\nA = 40_000.0 # m^2\nA_dot  = 4_000.0 / 365.0 # m^2/day\n# calculate the cumulative heat loss to overburden in Joules\nQ = cumulative_heat_loss_variable_area(T_reservoir, T_steam, α, κ, A_dot, t) / 1e6 # MJ\ndf = DataFrame(t = t, year = t / 365.0, Q = Q);\n\nBelow, we plot the cumulative and increamental heat losses to overburden.\n\n@df df plot(:t, :Q, xlabel = \"Time (days)\", ylabel = \"Cumulative heat loss to overburden (MJoules)\",\ntitle = \"Cumulative Heat Loss To Overburden\", lw = 3, label = \"A = Linearly increasing\")\n\n\n\n\n\ndf_sub = df[df.year .== round.(df.year, digits = 0), :]\n# create a lag column from Q column\ndf_sub[!, :Q_lag] = ShiftedArrays.lag(df_sub.Q, 1)\n# calculate the increamental heat loss to overburden\ndf_sub[!, :Q_incremental] = df_sub.Q - df_sub.Q_lag\n@df df_sub bar(:year, :Q_incremental, xlabel = \"Time (Year)\", ylabel = \"Increamental heat loss to overburden (MJoules)\",\ntitle = \"Increamental Heat Loss To Overburden\", lw = 3, label = \"A = Linearly increasing\")\n\n\n\n\nWe also calculate and plot the rate of heat loss to overburden at the reservoir/overburden boundary as:\n\n# calculate the heat loss rate in MJoules/day\nq = heat_loss_rate_variable_area(T_reservoir, T_steam, α, κ, A_dot, t) / 1e6 # MJ/day\n# create a DataFrame to store the results\ndf = DataFrame(t = t, q = q);\n\n\n@df df plot(:t, :q, xlabel = \"Time (days)\", ylabel = \"Rate of heat loss to overburden (MJoules/day)\",\ntitle = \"Rate of Heat Loss To Overburden\", lw = 3, label = \"A = Linearly increasing\")"
  },
  {
    "objectID": "posts/julia-posts/Thermal Recovery Part I/index.html#constant-surface-area-1",
    "href": "posts/julia-posts/Thermal Recovery Part I/index.html#constant-surface-area-1",
    "title": "Thermal Recovery - Part I",
    "section": "Constant Surface Area",
    "text": "Constant Surface Area\nThe heat flux to overburden over a constant surface area (A) is given by:\n\\[q = \\frac{Q}{A} = -\\kappa (\\frac{\\partial T}{\\partial x})_{x=0}\\]\nwhere \\(\\kappa\\) is the thermal conductivity, \\(T\\) is the temperature, and \\(x\\) is the distance from the boundary. The cumulative heat loss to overburden is given by:\n\\[q = \\int_0^t -\\kappa (\\frac{\\partial T}{\\partial x})_{_{x=0}} dt\\]\nwhere \\(t\\) is time. Using the temperature profile given above, we can calculate the cumulative heat loss to overburden as:\n\\[q = 2(T_{steam} - T_{overburden})\\kappa\\sqrt{\\frac{t}{\\pi \\alpha}}\\]\nWe define a function that calculates the cumulative heat loss to overburden.\nquarto-executable-code-5450563D\nfunction cumulative_heat_flux_constant_area(T_reservoir, T_steam, α, κ, t)\n    q = 2.0 * (T_steam - T_reservoir) * κ * sqrt.(t ./ (π .* α))\n    return q\nend;\nLet’s calculate the cumulative heat loss to overburden over a constant surface area for different times.\nquarto-executable-code-5450563D\nt = range(0, 4, length = 365) * 365 # days\n# thermal conductivity (J/day/m/K)\nκ = 1.7 * 86400\nA = 4_000.0 # m^2\n# calculate the cumulative heat loss to overburden in Joules\nQ = A * cumulative_heat_flux_constant_area(T_reservoir, T_steam, α, κ, t) / 1e6 # MJ\n# create a DataFrame to store the results\ndf = DataFrame(t = t, Q = Q);\nBelow, we plot the cumulative heat loss to overburden.\nquarto-executable-code-5450563D\n@df df plot(:t, :Q, xlabel = \"Time (days)\", ylabel = \"Cumulative heat loss to overburden (MJoules)\",\ntitle = \"Cumulative Heat Loss To Overburden\", lw = 3, label = \"A = 4000 m^2\")"
  },
  {
    "objectID": "posts/julia-posts/Thermal Recovery Part I/index.html#surface-area-increases-with-time-heat-transfer-from-a-spreading-hot-zone-1",
    "href": "posts/julia-posts/Thermal Recovery Part I/index.html#surface-area-increases-with-time-heat-transfer-from-a-spreading-hot-zone-1",
    "title": "Thermal Recovery - Part I",
    "section": "Surface Area Increases With Time (Heat Transfer From A Spreading Hot Zone)",
    "text": "Surface Area Increases With Time (Heat Transfer From A Spreading Hot Zone)\nSurface area of the overburden exposed to the steam increases with time. The cumulative heat loss to overburden is calculated as follows if we assume the surface area changes proportionaly with the n^{th} power of time:\n\\[q = 2(T_{steam} - T_{overburden})\\kappa\\sqrt{\\frac{t}{\\pi \\alpha}} \\psi(n)\\]\nwhere \\(n\\) is the power of time and the values can be derived from the following formul:\n\\[\\psi(n) = \\frac{n \\sqrt\\pi}{2}\\frac{\\Gamma(n)}{\\Gamma(n + 3/2)}\\]\nSimilar to the previous case, we define a function that calculates the cumulative heat loss to overburden.\nquarto-executable-code-5450563D\nfunction cumulative_heat_flux_variable_area(T_reservoir, T_steam, α, κ, t, n)\n    q = 2.0 * (T_steam - T_reservoir) * κ * sqrt.(t ./ (π .* α)) .* (n * sqrt(π) / 2.0) .* (gamma(n) / gamma(n + 3.0 / 2.0))\n    return q\nend;\nLet’s calculate the cumulative heat loss to overburden over a surface area that linearly changes with time (n = 1) for different times.\nquarto-executable-code-5450563D\nt = range(0, 4, length = 365) * 365 # days\n# thermal conductivity (J/day/m/K)\nκ = 1.7 * 86400\nA = 4_000.0 # m^2\nn = 1.0\n# calculate the cumulative heat loss to overburden in Joules\nQ = A * cumulative_heat_flux_variable_area(T_reservoir, T_steam, α, κ, t, n) / 1e6 # MJ\n# create a DataFrame to store the results\ndf = DataFrame(t = t, Q = Q);\nBelow, we plot the cumulative heat loss to overburden.\nquarto-executable-code-5450563D\n@df df plot(:t, :Q, xlabel = \"Time (days)\", ylabel = \"Cumulative heat loss to overburden (MJoules)\",\ntitle = \"Cumulative Heat Loss To Overburden\", lw = 3, label = \"A = Linearly increasing\")\n\n:::"
  },
  {
    "objectID": "posts/julia-posts/Thermal Recovery Part I/index.html#surface-area-increases-to-a-limit-and-then-stops",
    "href": "posts/julia-posts/Thermal Recovery Part I/index.html#surface-area-increases-to-a-limit-and-then-stops",
    "title": "Thermal Recovery - Part I",
    "section": "3. Surface Area Increases To A Limit And Then Stops",
    "text": "3. Surface Area Increases To A Limit And Then Stops\nSurface area of the overburden exposed to the steam increases with time and reaches a limit. The cumulative heat loss to overburden is calculated as follows if we assume the surface area changes proportionaly with the \\(n^{th}\\) power of time for the first \\(t_{1}\\) days and then remains constant:\nFor \\(t \\leq t_{1}\\):\n\\[\nQ = \\frac{2 \\psi(n) (T_{steam} - T_{overburden}) \\kappa \\dot{A}} {\\sqrt{\\pi \\alpha}} t^{(0.5 + n)}\n\\]\nand for \\(t > t_{1}\\):\n\\[\n\\begin{split}\nQ = \\frac{2 \\psi(n) (T_{steam} - T_{overburden}) \\kappa \\dot{A}} {\\sqrt{\\pi \\alpha}} \\\\ (t^{(0.5 + n)} - (t - t_{1})^{(0.5 + n)})\n\\end{split}\n\\]\nwhere \\(\\dot{A}\\) is the rate of change of area.\nSimilar to the previous case, we define a function that calculates the cumulative heat loss to overburden.\n\nfunction cumulative_heat_flux_variable_area_limit(T_reservoir, T_steam, α, κ, t, n, t1, Å)\n    # Å = @. A / t ^ n * (t <= t1) + A / t1 ^ n * (t > t1)\n    Q = zeros(length(t))\n    # Å = zeros(length(t))\n    for i in 1:length(t)\n        if t[i] <= t1\n            # Å[i] = A / t[i] ^ n\n            Q[i] = 2.0 * ψ(n) * (T_steam - T_reservoir) * κ * Å / sqrt(π * α) * (t[i] ^ (0.5 + 1))\n        else\n            # Å[i] = A / t1 ^ n\n            Q[i] = 2.0 * ψ(n) * (T_steam - T_reservoir) * κ * Å / sqrt(π * α) * (t[i] ^ (0.5 + 1) - (t[i] - t1) ^ (0.5 + 1))\n        end\n    end\n    return Q\nend;\n\nLet’s calculate the cumulative heat loss to overburden over a surface area that linearly changes with time (n = 1) for two years and then stops expanding for the next two years.\n\nt = range(0, 5, length = 365) * 365.0 # days\n# thermal conductivity (J/day/m/K)\nκ = 1.7 * 86400\nA = 10_000.0 # m^2\nn = 1.0\nt1 = 4 * 365.0 # days\nÅ = A / 365 ^ n\n# calculate the cumulative heat loss to overburden in Joules\nQ = cumulative_heat_flux_variable_area_limit(T_reservoir, T_steam, α, κ, t, n, t1, Å) / 1e6 # MJ\n# create a DataFrame to store the results\ndf = DataFrame(t = t, Q = Q)\n\n\n365×2 DataFrame340 rows omittedRowtQFloat64Float6410.00.025.0137431536.8310.027589199.5415.0412163870.0520.05492.52294e5625.06873.52592e5730.08244.63494e5835.09625.8407e5940.10997.13596e51045.12368.51494e51150.13749.97281e51255.15111.15055e61360.16481.31096e6⋮⋮⋮3541769.851.93839e83551774.861.94355e83561779.881.94869e83571784.891.95382e83581789.91.95893e83591794.921.96402e83601799.931.9691e83611804.951.97416e83621809.961.9792e83631814.971.98423e83641819.991.98924e83651825.01.99424e8\n\n\nBelow, we plot the cumulative heat loss to overburden.\n\n@df df plot(:t, :Q, xlabel = \"Time (days)\", ylabel = \"Cumulative heat loss to overburden (MJoules)\",\ntitle = \"Cumulative Heat Loss To Overburden\", lw = 3, label = \"A = Linearly increasing and then constant\")"
  },
  {
    "objectID": "posts/julia-posts/Thermal Recovery Part I/index.html#surface-area-increases-to-a-limit-and-then-stops-expanding",
    "href": "posts/julia-posts/Thermal Recovery Part I/index.html#surface-area-increases-to-a-limit-and-then-stops-expanding",
    "title": "Thermal Recovery - Part I",
    "section": "3. Surface Area Increases To A Limit And Then Stops Expanding",
    "text": "3. Surface Area Increases To A Limit And Then Stops Expanding\nSurface area of the overburden exposed to the steam chamber increases with time and reaches a limit. The cumulative heat loss to overburden is calculated as follows if we assume the surface area expands linearly with time for the first \\(t_{1}\\) days and then remains constant:\nFor \\(t \\leq t_{1}\\):\n\\[\nQ_{c} = \\frac{\\frac{4}{3} (T_{steam} - T_{overburden}) \\kappa Å} {\\sqrt{\\pi \\alpha}} [t^{1.5}]\n\\]\nand for \\(t \\geq t_{1}\\):\n\\[\n% \\begin{split}\nQ_{c} = \\frac{\\frac{4}{3} (T_{steam} - T_{overburden}) \\kappa Å} {\\sqrt{\\pi \\alpha}} [t^{1.5} - (t - t_{1})^{1.5}]\n% \\end{split}\n\\]\nwhere \\(\\dot{A}\\) is the rate of change of area.\nSimilar to the previous case, we define a function that calculates the cumulative heat loss to overburden.\n\nfunction cumulative_heat_loss_variable_area_limit(T_reservoir, T_steam, α, κ, A_dot, t, t1)\n    \n    Q = zeros(length(t))\n    for i in 1:length(t)\n        if t[i] <= t1\n            Q[i] = 4.0 / 3.0 * (T_steam - T_reservoir) * κ / sqrt(π * α) * A_dot * (t[i] ^ 1.5)\n        else\n            Q[i] = 4.0 / 3.0 * (T_steam - T_reservoir) * κ / sqrt(π * α) * A_dot * (t[i] ^ 1.5 - (t[i] - t1) ^ 1.5)\n        end\n    end\n    return Q\nend;\n\nLet’s calculate the cumulative heat loss to overburden over a surface area that linearly increases with time for 4 years and then stops expanding for the next 6 years.\n\nt = range(0, 10 * 365) * 1.0 # days\n# thermal conductivity (J/day/m/K)\nκ = 1.7 * 86400\nA = 40_000.0 # m^2\nt1 = 4 * 365.0 # days\nA_dot = 10_000 / 365 # m^2/day\n# calculate the cumulative heat loss to overburden in Joules\nQ = cumulative_heat_loss_variable_area_limit(T_reservoir, T_steam, α, κ, A_dot, t, t1) / 1e6 # MJ\n# create a DataFrame to store the results\ndf = DataFrame(t = t, year = t / 365.0, Q = Q);\n\nBelow, we plot the cumulative heat loss to overburden.\n\n@df df plot(:t, :Q, xlabel = \"Time (days)\", ylabel = \"Cumulative heat loss to overburden (MJoules)\",\ntitle = \"Cumulative Heat Loss To Overburden\", lw = 3, label = \"A = Linearly increasing to a limit and remains constant\")\n\n\n\n\nThe increamental heat loss to overburden is calculated as follows:\n\n# subset df dataframe for column year as natural number\ndf_sub = df[df.year .== round.(df.year, digits = 0), :]\n# create a lag column from Q column\ndf_sub[!, :Q_lag] = ShiftedArrays.lag(df_sub.Q, 1)\n# calculate the increamental heat loss to overburden\ndf_sub[!, :Q_incremental] = df_sub.Q - df_sub.Q_lag\n@df df_sub bar(:year, :Q_incremental / 1.441 / 1e3, xlabel = \"Time (Year)\", ylabel = \"Increamental heat loss to overburden (MJoules)\",\ntitle = \"Increamental Heat Loss To Overburden\", lw = 3, label = \"A = Linearly increasing and reamins constant\")\n\n\n\n\nThe rate of heat loss to overburden is calculated as follows:\nFor \\(t \\leq t_{1}\\):\n\\[Q = \\frac{2 (T_{steam} - T_{overburden})\\kappa \\dot{A}} {\\sqrt{\\pi \\alpha}} [t^{0.5}] \\]\nand for \\(t \\geq t_{1}\\):\n\\[Q = \\frac{2 (T_{steam} - T_{overburden})\\kappa \\dot{A}} {\\sqrt{\\pi \\alpha}} [t^{0.5} - (t - t_{1})^{0.5}] \\]\nWe define a function that calculates the rate of heat loss to overburden.\n\nfunction heat_loss_rate_variable_area_limit(T_reservoir, T_steam, α, κ, A_dot, t, t1)\n    \n    q = zeros(length(t))\n    for i in 1:length(t)\n        if t[i] <= t1\n            q[i] = 2.0 * (T_steam - T_reservoir) * κ / sqrt(π * α) * A_dot * (t[i] ^ 0.5)\n        else\n            q[i] = 2.0 * (T_steam - T_reservoir) * κ / sqrt(π * α) * A_dot * (t[i] ^ 0.5 - (t[i] - t1) ^ 0.5)\n        end\n    end\n    return q\nend;\n\nLet’s calculate the rate of heat loss to overburden over a surface area that linearly increases with time for 4 years and then stops expanding for the next 6 years.\n\nt = range(0, 10 * 365) * 1.0 # days\n# thermal conductivity (J/day/m/K)\nκ = 1.7 * 86400\nA = 40_000.0 # m^2\nt1 = 4 * 365.0 # days\nA_dot = 10_000 / 365 # m^2/day\n# calculate the rate of heat loss to overburden in Joules\nq = heat_loss_rate_variable_area_limit(T_reservoir, T_steam, α, κ, A_dot, t, t1) / 1e6 # MJ\n# create a DataFrame to store the results\ndf = DataFrame(t = t, q = q);\n\nBelow, we plot the rate of heat loss to overburden.\n\n@df df plot(:t, :q, xlabel = \"Time (days)\", ylabel = \"Rate of heat loss to overburden (MJoules/day)\",\ntitle = \"Rate Of Heat Loss To Overburden\", lw = 3, label = \"A = Linearly increasing to a limit and remains constant\", legend = :bottomright)"
  },
  {
    "objectID": "posts/julia-posts/Thermal Recovery Part II/index.html#total-heat-stored-ahead-of-the-front-at-steady-state",
    "href": "posts/julia-posts/Thermal Recovery Part II/index.html#total-heat-stored-ahead-of-the-front-at-steady-state",
    "title": "Thermal Recovery - Part II",
    "section": "Total heat stored ahead of the front at steady state",
    "text": "Total heat stored ahead of the front at steady state\nThe cumulative heat stored ahead of the advancing front at steady state is given by:\n\\[\n\\frac{Q_{c}}{A} = \\kappa \\frac {(T_{steam} - T_{reservoir})}{U}\n\\]\nThe following function is calculates the total heat stored ahead of the front at steady state:\n\nfunction cumulative_heat_flux_stored_steady(U, kappa, T_steam, T_reservoir)\n    return kappa * (T_steam - T_reservoir) / U\nend;"
  },
  {
    "objectID": "posts/julia-posts/Thermal Recovery Part II/index.html#total-heat-stored-ahead-of-the-front-at-transient-state",
    "href": "posts/julia-posts/Thermal Recovery Part II/index.html#total-heat-stored-ahead-of-the-front-at-transient-state",
    "title": "Thermal Recovery - Part II",
    "section": "Total heat stored ahead of the front at transient state",
    "text": "Total heat stored ahead of the front at transient state\nThe total heat stored ahead of the front at transient state is given by:\n\\[\n\\frac{Q_{c}}{A} = \\kappa \\frac {(T_{steam} - T_{reservoir})}{U} \\int_{0}^{\\infty} T^{*} \\mathrm d \\zeta^{*}\n\\]\nwhere \\(T^{*}\\) is the temperature profile for the transient case. By substituting the solution for \\(T^{*}\\), the heat integral can be computed as follows:\n\\[\nHI = \\int_{0}^{\\infty} T^{*} \\mathrm d \\zeta^{*} = \\sqrt \\frac{t^{*}}{\\pi} e^{-t^{*}/4} + (1 + \\frac{t^{*}}{2}) erf(\\sqrt \\frac {t^{*}}{4}) - \\frac{t^{*}}{2}\n\\]\nFigure below shows the behavior of heat integral with respect to \\(t^{*}\\). At infinity the value of heat integral is equal to the steady state value (\\(HI_{\\infty} = 1.0\\)).\n\nt_star = range(0, 25, length = 1000);\n\n\nplot(t_star, sqrt.(t_star / pi) .* exp.(-t_star / 4) .+ (1 .+ t_star / 2) .* erf.(sqrt.(t_star / 4)) .- t_star / 2,\n    lw = 3, \n    label = \"Heat Integral\")\nxlabel!(L\"t^{*}\")\nylabel!(\"Heat Integral\")\n\n\n\n\nThe total heat stored ahead of the front at transient state is calculated as follows:\n\n# make it broadcastable over t_star\nfunction cumulative_heat_flux_stored_transient(U, kappa, T_steam, T_reservoir, t_star)\n\n    return kappa * (T_steam - T_reservoir) / U * (sqrt.(t_star / pi) .* exp.(-t_star / 4) .+ (1 .+ t_star / 2) .* erf.(sqrt.(t_star / 4)) .- t_star / 2)\nend;"
  },
  {
    "objectID": "posts/julia-posts/Thermal Recovery Part II/index.html#example",
    "href": "posts/julia-posts/Thermal Recovery Part II/index.html#example",
    "title": "Thermal Recovery - Part II",
    "section": "Example",
    "text": "Example\nFollowing the example in previous post and by assuming that the steam chamber spread rapidly over the reservoir (constant surface area), we calculate the total heat stored ahead of the front at transient state for the following parameters:\n\n\\(U = 1.5 \\mathrm m/365 \\quad days\\)\n\\(\\alpha = 8.333e-7 * 86400 \\quad \\mathrm m^{2}/day\\)\n\\(\\kappa = 1.7 * 86400 \\quad \\mathrm J/day/m/K\\)\n\\(T_{steam} = 264 \\quad ^{\\circ}C\\)\n\\(T_{reservoir} = 15 \\quad ^{\\circ}C\\)\n\\(A = 40000 \\quad \\mathrm m^{2}\\)\n\nIt is assumed that the steam chamber moves downward at a speed of 1.5 m/year.\nThe annual total heat stored ahead of the front at transient state in 10 years is calculated as follows:\n\nt = range(0, 10 * 365) * 1.0 # days\nU = 1.5 / 365\nα = 8.333e-7 * 86400\nt_star = U * U .* t / α\nkappa = 1.7 * 86400\nT_steam = 264\nT_reservoir = 15\nA = 40000\n# calculate the cumulative heat stored ahead of the front in overburden in MJoules\nQ = A * cumulative_heat_flux_stored_transient(U, kappa, T_steam, T_reservoir, t_star) / 1e6 # MJ\n# create a DataFrame to store the results\ndf = DataFrame(t = t, year = t / 365.0, Q = Q);\n\nThe annual cumulative heat stored ahead of the front at transient state in 10 years is calculated as follows:\n\ndf_sub = df[df.year .== round.(df.year, digits = 0), :]\n# create a lag column from Q column\ndf_sub[!, :Q_lag] = ShiftedArrays.lag(df_sub.Q, 1)\n# calculate the increamental heat loss to overburden\ndf_sub[!, :Q_incremental] = df_sub.Q - df_sub.Q_lag\n@df df_sub bar(:year, :Q_incremental, xlabel = \"Time (Year)\", ylabel = \"Annual heat stored ahead of the front (MJoules)\",\ntitle = \"Annual Cumulative Heat Stored Ahead of the Front\", lw = 3, label = L\"A = 40000 m^{2}\")"
  },
  {
    "objectID": "posts/julia-posts/Thermal Recovery Part II/index.html#conclusion",
    "href": "posts/julia-posts/Thermal Recovery Part II/index.html#conclusion",
    "title": "Thermal Recovery - Part II",
    "section": "Conclusion",
    "text": "Conclusion\nIn this post, we showed that the maximum accumulated heat ahead of a moving front is equal to the steady state value. In many practical cases, the energy accumulation ahead of the steam front is close to the steady state value."
  },
  {
    "objectID": "posts/julia-posts/Thermal Recovery Part I/index.html#saturation-pressure",
    "href": "posts/julia-posts/Thermal Recovery Part I/index.html#saturation-pressure",
    "title": "Thermal Recovery - Part I",
    "section": "Saturation pressure",
    "text": "Saturation pressure\nSaturation pressure of water can be estimated using the SteamTables.Psat function. The water phase envelope is generated below from the tripple point \\(\\mathrm T_{3p}\\) = 273.16 K to the critical point \\(\\mathrm T_{crit}\\) = 647.096 K.\n\nT_tripple = 273.16 # K\n\nT_critical = 647.096 # K\n\nT = unique(vcat(T_tripple, ceil(T_tripple):1.0: floor(T_critical), T_critical))\n\np = [Psat(t) for t in T]\n\nplt = plot(T, p, \nxlabel=\"Temperature [K]\", \nylabel=\"Pressure [MPa]\", \nlabel=\"Sat. pressure\", \nlw = 3, \nlegend=:topleft,\nlegendfontsize = 10,\nframe=:box)\nxgrid!(:on, :cadetblue, 2, :dashdot, 0.4)\nygrid!(:on, :cadetblue, 2, :dashdot, 0.4)\n\nplot!([T_tripple], [Psat(T_tripple)], \nseriestype=:scatter, \nlabel=\"Triple point\",\nmarkersize = 6)\n\nplot!([T_critical], [Psat(T_critical)], \nseriestype=:scatter, \nlabel=\"Critical point\",\nmarkersize = 6)"
  },
  {
    "objectID": "posts/julia-posts/Thermal Recovery Part I/index.html#saturated-density",
    "href": "posts/julia-posts/Thermal Recovery Part I/index.html#saturated-density",
    "title": "Thermal Recovery - Part I",
    "section": "Saturated density",
    "text": "Saturated density\nSaturated liquid and vapor densities are estimated using the SteamTables.SatDensL and SteamTables.SatDensV functions.\n\n# saturated liquid density\nρ = [SatDensL(t) for t in T]\n\nplt = plot(T, ρ, \nxlabel=\"Temperature [K]\", \nylabel=\"Density [kg/m³]\", \nlabel=\"Sat. liquid density\",\nlw = 3, \nlegend=:topright,\nlegendfontsize = 10,\nframe=:box)\nxgrid!(:on, :cadetblue, 2, :dashdot, 0.4)\nygrid!(:on, :cadetblue, 2, :dashdot, 0.4)\n\n# saturated vapor density \nρ = [SatDensV(t) for t in T]\n\nplot!(T, ρ, \nlabel=\"Sat. vapor density\",\nlw = 3)\n\nplot!([T_critical], [SatDensL(T_critical)], \nseriestype=:scatter, \nlabel=\"Critical point\",\nmarkersize = 6)"
  },
  {
    "objectID": "posts/julia-posts/Thermal Recovery Part I/index.html#saturated-enthalpy",
    "href": "posts/julia-posts/Thermal Recovery Part I/index.html#saturated-enthalpy",
    "title": "Thermal Recovery - Part I",
    "section": "Saturated enthalpy",
    "text": "Saturated enthalpy\nSaturated liquid and vapor enthalpies are estimated using the SteamTables.SatHL and SteamTables.SatHV functions.\n\n# saturated liquid enthalpy\nh = [SatHL(t) for t in T] / 1e3\n\nplt = plot(T, h, \nxlabel=\"Temperature [K]\", \nylabel=\"Enthalpy [kJ/kg]\", \nlabel=\"Sat. liquid enthalpy\",\nlw = 3, \nlegend=:bottomright,\nlegendfontsize = 10,\nframe=:box)\nxgrid!(:on, :cadetblue, 2, :dashdot, 0.4)\nygrid!(:on, :cadetblue, 2, :dashdot, 0.4)\n\n# saturated vapor enthalpy\nh = [SatHV(t) for t in T] / 1e3\n\nplot!(T, h, \nlabel=\"Sat. vapor enthalpy\",\nlw = 3)\n\nplot!([T_critical], [SatHL(T_critical) / 1e3], \nseriestype=:scatter, \nlabel=\"Critical point\",\nmarkersize = 6)"
  },
  {
    "objectID": "posts/julia-posts/Thermal Recovery Part I/index.html#latent-heat-of-vaporization",
    "href": "posts/julia-posts/Thermal Recovery Part I/index.html#latent-heat-of-vaporization",
    "title": "Thermal Recovery - Part I",
    "section": "Latent heat of vaporization",
    "text": "Latent heat of vaporization\nThe latent heat of vaporization curve is generated using the SteamTables.DeltaHvap function.\n\nh_lv = [DeltaHvap(t) for t in T] / 1e3\n\nplt = plot(T, h_lv, \nxlabel=\"Temperature [K]\", \nylabel=\"Latent heat of vaporization [kJ/kg]\", \nlabel=\"Latent heat of vaporization\",\nlw = 3, \nlegend=:topright,\nlegendfontsize = 10,\nframe=:box)\nxgrid!(:on, :cadetblue, 2, :dashdot, 0.4)\nygrid!(:on, :cadetblue, 2, :dashdot, 0.4)\n\nplot!([T_critical], [h_lv[end]], \nseriestype=:scatter, \nlabel=\"Critical point\",\nmarkersize = 6)\n\n\n\n\nA list of all the available functions can be found in the SteamTables.jl documentation."
  },
  {
    "objectID": "posts/julia-posts/Thermal Recovery Part I/index.html#specific-properties",
    "href": "posts/julia-posts/Thermal Recovery Part I/index.html#specific-properties",
    "title": "Thermal Recovery - Part I",
    "section": "Specific properties",
    "text": "Specific properties\nThe specific properties of water are calculated using the SteamTables.SpecificH, SteamTables.SpecificS, SteamTables.SpecificV, and SteamTables.SpecificCP functions. The specific enthalpy curve is generated below from 273.16 K to 747.096 K at a constant pressure of 10 MPa.\n\nT = vcat(274:1.0:800) # K\nP = 10 # MPa\n\nh = zeros(length(T))\ns = zeros(length(T))\nv = zeros(length(T))\nCp = zeros(length(T))\n\nfor i in 1:length(T)\n    h[i] = SpecificH(P, T[i])\n    s[i] = SpecificS(P, T[i])\n    v[i] = SpecificV(P, T[i])\n    Cp[i] = SpecificCP(P, T[i])\nend\n\nThe figure below shows the change in specific enthalpy over a wide range of temperatures at a constant pressure of 10 MPa.\n\nplt = plot(T, h, \nxlabel=\"Temperature [K]\", \nylabel=\"Enthalpy [kJ/kg]\", \nlabel=\"Specific enthalpy\",\nlw = 3, \nlegend=:bottomright,\nlegendfontsize = 10,\nframe=:box)\nxgrid!(:on, :cadetblue, 2, :dashdot, 0.4)\nygrid!(:on, :cadetblue, 2, :dashdot, 0.4)\n\n\n\n\nA similar plot can be generated for the specific volume curve.\n\nplt = plot(T, v, \nxlabel=\"Temperature [K]\", \nylabel=\"Volume [m3/kg]\", \nlabel=\"Specific volume\",\nlw = 3, \nlegend=:bottomright,\nlegendfontsize = 10,\nframe=:box)\nxgrid!(:on, :cadetblue, 2, :dashdot, 0.4)\nygrid!(:on, :cadetblue, 2, :dashdot, 0.4)\n\n\n\n\nThere are other functions for calculating the specific properties of water. A list of all the available functions can be found in the SteamTables.jl documentation."
  },
  {
    "objectID": "posts/julia-posts/Thermal Recovery Part II/index.html#constant-surface-area",
    "href": "posts/julia-posts/Thermal Recovery Part II/index.html#constant-surface-area",
    "title": "Thermal Recovery - Part II",
    "section": "1.0 Constant Surface Area",
    "text": "1.0 Constant Surface Area\nThe heat flux to overburden over a constant surface area (A) is given by:\n\\[q = \\frac{Q}{A} = -\\kappa (\\frac{\\partial T}{\\partial x})_{x=0}\\]\nwhere \\(\\kappa\\) is the thermal conductivity, \\(T\\) is the temperature, and \\(x\\) is the distance from the boundary. The cumulative heat loss to overburden is given by:\n\\[q_{c} = \\int_0^t -\\kappa (\\frac{\\partial T}{\\partial x})_{_{x=0}} dt\\]\nwhere \\(t\\) is time. Using the temperature profile given above, we can calculate the cumulative heat flux to overburden as:\n\\[q_{c} = 2(T_{steam} - T_{overburden})\\kappa\\sqrt{\\frac{t}{\\pi \\alpha}}\\]\nWe define a function that calculates the cumulative heat flux to overburden.\n\nfunction cumulative_heat_flux_constant_area(T_reservoir, T_steam, α, κ, t)\n    q = 2.0 * (T_steam - T_reservoir) * κ * sqrt.(t ./ (π .* α))\n    return q\nend;\n\nLet’s calculate the cumulative heat loss to overburden over a constant surface area of 40,000 \\(m^2\\) over 10 years. We are assuming that from day 0 to day 3650, the surface area exposed to steam is 40,000 \\(m^2\\).\n\nt = range(0, 10 * 365) * 1.0 # days\n# thermal conductivity (J/day/m/K)\nκ = 1.7 * 86400\nA = 40_000.0 # m^2\n# calculate the cumulative heat loss to overburden in Joules\nQ = A * cumulative_heat_flux_constant_area(T_reservoir, T_steam, α, κ, t) / 1e6 # MJ\n# create a DataFrame to store the results\ndf = DataFrame(t = t, year = t / 365.0, Q = Q);\n\nBelow, we plot the cumulative heat loss to overburden.\n\n@df df plot(:t, :Q, xlabel = \"Time (days)\", ylabel = \"Cumulative heat loss to overburden (MJoules)\",\ntitle = \"Cumulative Heat Loss To Overburden\", lw = 3, label = \"A = 40000 m^2\")\n\n\n\n\nWe also calculate and plot the rate of heat loss to overburden at the reservoir/overburden boundary as:\n\n# define the heat loss rate function\nfunction heat_flux_rate_constant_area(T_reservoir, T_steam, α, κ, t)\n    q = (T_steam - T_reservoir) * κ ./ sqrt.(π * α .* t)\n    return q\nend;\n\nIncreamental heat loss to the overburden over years is calculated as follows:\n\ndf_sub = df[df.year .== round.(df.year, digits = 0), :]\n# create a lag column from Q column\ndf_sub[!, :Q_lag] = ShiftedArrays.lag(df_sub.Q, 1)\n# calculate the increamental heat loss to overburden\ndf_sub[!, :Q_incremental] = df_sub.Q - df_sub.Q_lag\n@df df_sub bar(:year, :Q_incremental, xlabel = \"Time (Year)\", ylabel = \"Increamental heat loss to overburden (MJoules)\",\ntitle = \"Increamental Heat Loss To Overburden\", lw = 3, label = \"A = 40_000 m^2\")\n\n\n\n\n\nt = range(0, 10 * 365) * 1.0 # days\n# calculate the heat loss rate in MJoules/day\nq = A * heat_flux_rate_constant_area(T_reservoir, T_steam, α, κ, t) / 1e6 # MJ/day\n# create a DataFrame to store the results\ndf = DataFrame(t = t, q = q);\n\n\n@df df plot(:t, :q, xlabel = \"Time (days)\", ylabel = \"Rate of heat loss to overburden (MJoules/day)\",\ntitle = \"Rate of Heat Loss To Overburden\", lw = 3, label = \"A = 40000 m^2\")"
  },
  {
    "objectID": "posts/julia-posts/Thermal Recovery Part II/index.html#surface-area-increases-with-time-heat-transfer-from-a-spreading-hot-zone",
    "href": "posts/julia-posts/Thermal Recovery Part II/index.html#surface-area-increases-with-time-heat-transfer-from-a-spreading-hot-zone",
    "title": "Thermal Recovery - Part II",
    "section": "2. Surface area increases with time (Heat transfer from a spreading hot zone)",
    "text": "2. Surface area increases with time (Heat transfer from a spreading hot zone)\nIn this scenario, heat is transferred to the overburden from a hot zone that expands over time. (Butler 1997) has provided a general solution for this problem when the surface area of the hot zone increases as a power of time. When the surface area of the hot zone increases linearly with time, the cumulative and rate of heat loss to overburden are given by Equation 4 and Equation 5, respectively.\n\\[Q = \\frac{4}{3} \\frac{(T_{s} - T_{o}) K \\cdot \\dot{A}}{\\sqrt{\\pi \\alpha}} t^{1.5}  \\tag{4}\\]\n\\[q = 2 (T_{s} - T_{o}) K \\cdot \\dot{A} \\cdot \\sqrt{\\frac{t}{\\pi \\alpha}}  \\tag{5}\\]\nwhere \\(\\dot{A}\\) is the rate of change of surface area and is assumed to be constant.\nSimilar to the previous case, we define two functions that calculate the cumulative heat loss and rate of heat loss to overburden.\n\nfunction cumulative_heat_loss_variable_area(Ts, To, α, K, A_dot, t)\n    Q = 4.0 / 3.0 * (Ts - To) * K * A_dot / sqrt.(π * α) .* t.^1.5\n    return Q\nend;\n\n\nfunction heat_loss_rate_variable_area(Ts, To, α, K, A_dot, t)\n    q = 2.0 * (Ts - To) * K * A_dot .* sqrt.(t / (π * α))\n    return q\nend;\n\nLet’s calculate the cumulative heat loss to overburden over a period of 10 years, where the surface area increases linearly with time at a rate of 4000/365 \\((\\mathrm m^2/ \\mathrm day)\\).\n\nt = 0:1.0:10 * 365 # days\n\nA_dot  = 4000.0 / 365.0 # m^2/day\n\nQ = cumulative_heat_loss_variable_area(Ts, To, α, K, A_dot, t) / 1e6 # MJ\n\ndf_Q = DataFrame(t = t, year = t / 365.0, Q = Q);\n\n@df df_Q plot(:t, :Q, \nxlabel = \"Time (days)\", \nylabel = \"Heat loss to overburden (MJoules)\",\nlabel = \"A_dot = 4000 m^2/year\",\nlw = 3, \nlegend=:topleft,\nlegendfontsize = 10,\nframe=:box)\nxgrid!(:on, :cadetblue, 2, :dashdot, 0.4)\nygrid!(:on, :cadetblue, 2, :dashdot, 0.4)\n\n\n\n\nThe annual heat loss to overburden and the steam requirement to compensate for the heat loss to overburden are calculated as follows:\n\ndf_Q_sub = df_Q[df_Q.year .== round.(df_Q.year, digits = 0), :]\ndf_Q_sub[!, :Q_lag] = lag(df_Q_sub.Q, 1)\ndf_Q_sub[!, :Q_incremental] = df_Q_sub.Q - df_Q_sub.Q_lag\ndf_Q_sub[!, :steam_requirement] = df_Q_sub.Q_incremental ./ \n                                                net_heat_per_tonne_of_steam\n\n@df df_Q_sub bar(:year, :steam_requirement,\nxlabel = \"Time (Year)\",\nylabel = \"Steam requirement (tonnes)\",\ntitle = \"Annual Steam Requirement\",\nlabel = \"A_dot = 4000 m^2/year\",\nlw = 3,\nlegend=:topleft,\nlegendfontsize = 10,\nframe=:box)\nxgrid!(:on, :cadetblue, 2, :dashdot, 0.4)\nygrid!(:on, :cadetblue, 2, :dashdot, 0.4)\n\n\n\n\nThe rate of heat loss to overburden is calculated as follows:\n\nq = heat_loss_rate_variable_area(Ts, To, α, K, A_dot, t) / 1e6 # MJ/day\n\ndf_q = DataFrame(t = t, year = t / 365.0, q = q)\n\n@df df_q plot(:t, :q, \nxlabel = \"Time (days)\", \nylabel = \"Rate of heat loss to overburden (MJoules/day)\",\nlabel = \"A_dot = 4000 m^2/year\",\nlw = 3, \nlegend=:topleft,\nlegendfontsize = 10,\nframe=:box)\nxgrid!(:on, :cadetblue, 2, :dashdot, 0.4)\nygrid!(:on, :cadetblue, 2, :dashdot, 0.4)"
  },
  {
    "objectID": "posts/julia-posts/Thermal Recovery Part II/index.html#surface-area-increases-to-a-limit-and-then-stops-expanding",
    "href": "posts/julia-posts/Thermal Recovery Part II/index.html#surface-area-increases-to-a-limit-and-then-stops-expanding",
    "title": "Thermal Recovery - Part II",
    "section": "3. Surface area increases to a limit and then stops expanding",
    "text": "3. Surface area increases to a limit and then stops expanding\nIn this scenario, the surface area that is exposed to the steam chamber increases linearly with time until it reaches a certain limit and then stops expanding. This situation is common in steam-assisted gravity drainage (SAGD) operations. The solution to this problem is also provided by (Butler 1997). The linear expansion period occurs during the first \\(t_{1}\\) days. After that, the surface area remains constant and no further expansion occurs.\nFor \\(t \\leq t_{1}\\):\n\\[\nQ = \\frac{4}{3} \\frac{ (T_{s} - T_{o}) \\cdot K \\cdot \\dot{A}} {\\sqrt{\\pi \\alpha}} [t^{1.5}]\n\\]\nand for \\(t \\gt t_{1}\\):\n\\[\n% \\begin{split}\nQ = \\frac{4}{3} \\frac{ (T_{s} - T_{o}) \\cdot K \\cdot \\dot{A}} {\\sqrt{\\pi \\alpha}} [t^{1.5} - (t - t_{1})^{1.5}]\n% \\end{split}\n\\]\nwhere \\(\\dot{A}\\) is the rate of change of surface area.\nThe following function estimates the cumulative heat loss to overburden:\n\nfunction cumulative_heat_loss_variable_area_limit(Ts, To, α, K, A_dot, t, t1)\n    \n    Q = zeros(length(t))\n        for i in 1:length(t)\n            if t[i] <= t1\n                Q[i] = 4.0 / 3.0 * (Ts - To) * K * A_dot / \n                sqrt(π * α) * (t[i] ^ 1.5)\n            else\n                Q[i] = 4.0 / 3.0 * (Ts - To) * K * A_dot /\n                sqrt(π * α) * (t[i] ^ 1.5 - (t[i] - t1) ^ 1.5)\n            end\n        end\n    return Q\nend;\n\nFor this scenario, we will estimate the cumulative heat loss to overburden over a surface area that linearly increases with time for 4 years and then stops expanding for the next 6 years, with a total surface area of 40,000 \\(\\mathrm m^{2}\\).\n\nt = 0:1.0:10 * 365 # days\n\nt1 = 4 * 365 # days\n\nA_dot  = 10000.0 / 365.0 # m^2/day\n\nQ = cumulative_heat_loss_variable_area_limit(Ts, To, α, K, A_dot, t, t1) / \n                                                                        1e6 # MJ\n\ndf_Q = DataFrame(t = t, year = t / 365.0, Q = Q);\n\n@df df_Q plot(:t, :Q, \nxlabel = \"Time (days)\", \nylabel = \"Heat loss to overburden (MJoules)\",\nlabel = \"A_dot = 10000 m^2/year\",\nlw = 3, \nlegend=:topleft,\nlegendfontsize = 10,\nframe=:box)\nxgrid!(:on, :cadetblue, 2, :dashdot, 0.4)\nygrid!(:on, :cadetblue, 2, :dashdot, 0.4)\n\n\n\n\nThe annual heat loss to overburden and the steam requirement to compensate for the heat loss to overburden can be calculated as follows:\n\ndf_Q_sub = df_Q[df_Q.year .== round.(df_Q.year, digits = 0), :]\ndf_Q_sub[!, :Q_lag] = lag(df_Q_sub.Q, 1)\ndf_Q_sub[!, :Q_incremental] = df_Q_sub.Q - df_Q_sub.Q_lag\ndf_Q_sub[!, :steam_requirement] = df_Q_sub.Q_incremental ./ \n                                        net_heat_per_tonne_of_steam\n\n@df df_Q_sub bar(:year, :steam_requirement,\nxlabel = \"Time (Year)\",\nylabel = \"Steam requirement (tonnes)\",\ntitle = \"Annual Steam Requirement\",\nlabel = \"A_dot = 10000 m^2/year\",\nlw = 3,\nlegend=:topright,\nlegendfontsize = 10,\nframe=:box)\nxgrid!(:on, :cadetblue, 2, :dashdot, 0.4)\nygrid!(:on, :cadetblue, 2, :dashdot, 0.4)\n\n\n\n\nThe rate of heat loss to overburden can be estimated as follows:\nFor \\(t \\leq t_{1}\\):\n\\[q = 2 \\frac{(T_{s} - T_{o}) \\cdot K \\cdot \\dot{A}} {\\sqrt{\\pi \\alpha}} [t^{0.5}] \\]\nand for \\(t \\gt t_{1}\\):\n\\[q = 2 \\frac{(T_{s} - T_{o}) \\cdot K \\cdot \\dot{A}} {\\sqrt{\\pi \\alpha}} [t^{0.5} - (t - t_{1})^{0.5}] \\]\nHere’s a function that calculates the rate of heat loss to overburden for the scenario where surface area increases to a limit and then stops expanding.\n\nfunction heat_loss_rate_variable_area_limit(Ts, To, α, κ, A_dot, t, t1)\n    \n    q = zeros(length(t))\n    for i in 1:length(t)\n        if t[i] <= t1\n            q[i] = 2.0 * (Ts - To) * K * A_dot / sqrt(π * α) * \n            (t[i] ^ 0.5)\n        else\n            q[i] = 2.0 * (Ts - To) * K * A_dot / sqrt(π * α) * \n            (t[i] ^ 0.5 - (t[i] - t1) ^ 0.5)\n        end\n    end\n    return q\nend;\n\nThe results for the rate of heat loss to overburden are shown below.\n\nq = heat_loss_rate_variable_area_limit(Ts, To, α, K, A_dot, t, t1) / 1e6 # MJ/day\n\ndf_q = DataFrame(t = t, year = t / 365.0, q = q)\n\n@df df_q plot(:t, :q, \nxlabel = \"Time (days)\", \nylabel = \"Rate of heat loss to overburden (MJoules/day)\",\nlabel = \"A_dot = 10000 m^2/year\",\nlw = 3, \nlegend=:bottomright,\nlegendfontsize = 10,\nframe=:box)\nxgrid!(:on, :cadetblue, 2, :dashdot, 0.4)\nygrid!(:on, :cadetblue, 2, :dashdot, 0.4)"
  },
  {
    "objectID": "posts/julia-posts/Thermal Recovery Part II/index.html#heat-conduction-through-a-constant-surface-area",
    "href": "posts/julia-posts/Thermal Recovery Part II/index.html#heat-conduction-through-a-constant-surface-area",
    "title": "Thermal Recovery - Part II",
    "section": "1.0 Heat conduction through a constant surface area",
    "text": "1.0 Heat conduction through a constant surface area\nThe rate of heat loss to overburden at the reservoir/overburden interface over a constant surface area (A) is given by:\n\\[q = - K \\cdot A (\\frac{\\partial T}{\\partial x})_{x=0} \\tag{2}\\]\nwhere K is the thermal conductivity, T is the temperature, and x is the distance from the boundary. The cumulative heat loss to overburden is given by:\n\\[Q_{c} = \\int_0^t - K \\cdot A (\\frac{\\partial T}{\\partial x})_{_{x=0}} dt \\tag{3}\\]\nwhere \\(t\\) is time. Using the temperature profile given in Equation 1, we can calculate the cumulative heat loss to overburden as:\n\\[Q_{c} = 2 (T_{s} - T_{o}) \\cdot K \\cdot A \\sqrt{\\frac{t}{\\pi \\alpha}}\\]\nThe following function is defined to calculate the cumulative heat loss to overburden.\n\nfunction cumulative_heat_loss_constant_area(Ts, To, α, K, A, t)\n    Q = 2.0 * (Ts - To) * K * A * sqrt.(t ./ (π .* α))\n    return Q\nend;\n\nFor a reservoir/overburden interface with a constant surface area of 40,000 \\(\\mathrm m^2\\), the cumulative heat loss to overburden over 10 years is estimated as follows.\n\nt = 0:1.0:10 * 365 # days\n\nA = 40000.0 # m^2\n\nQ = cumulative_heat_loss_constant_area(Ts, To, α, K, A, t) / 1e6 # MJ\n\ndf_Q = DataFrame(t = t, year = t / 365.0, Q = Q)\n\n@df df_Q plot(:t, :Q, \nxlabel = \"Time (days)\", \nylabel = \"Heat loss to overburden (MJoules)\",\nlabel = \"Area = 40000 m^2\",\nlw = 3, \nlegend=:topleft,\nlegendfontsize = 10,\nframe=:box)\nxgrid!(:on, :cadetblue, 2, :dashdot, 0.4)\nygrid!(:on, :cadetblue, 2, :dashdot, 0.4)\n\n\n\n\nCombining Equation 1 and Equation 2, the rate of heat loss to overburden at the reservoir/overburden interface over a constant surface area (A) is given by:\n\\[q = (T_{s} - T_{o}) \\cdot K \\cdot A \\sqrt{\\frac{1}{\\pi \\alpha t}}\\]\nThe following function is defined to calculate the rate of heat loss to overburden.\n\nfunction heat_rate_constant_area(Ts, To, α, K, A, t)\n    q = (Ts - To) * K * A ./ sqrt.(π * α .* t)\n    return q\nend;\n\nThe estimate rate of heat loss to overburden over 10 years is shown below.\n\nt = 0:1.0:10 * 365 # days\n\nA = 40000.0 # m^2\n\nq = heat_rate_constant_area(Ts, To, α, K, A, t) / 1e6 # MJ/day\n\ndf_q = DataFrame(t = t, year = t / 365.0, q = q)\n\n@df df_q plot(:t, :q, \nxlabel = \"Time (days)\", \nylabel = \"Rate of heat loss to overburden (MJoules/day)\",\nlabel = \"Area = 40000 m^2\",\nlw = 3, \nlegend=:topright,\nlegendfontsize = 10,\nframe=:box)\nxgrid!(:on, :cadetblue, 2, :dashdot, 0.4)\nygrid!(:on, :cadetblue, 2, :dashdot, 0.4)\n\n\n\n\nThe annual heat loss to overburden is calculated as follows:\n\ndf_Q_sub = df_Q[df_Q.year .== round.(df_Q.year, digits = 0), :]\ndf_Q_sub[!, :Q_lag] = lag(df_Q_sub.Q, 1)\ndf_Q_sub[!, :Q_incremental] = df_Q_sub.Q - df_Q_sub.Q_lag\n\n@df df_Q_sub bar(:year, :Q_incremental, \nxlabel = \"Time (Year)\", \nylabel = \"Heat loss to overburden (MJoules)\",\ntitle = \"Annual Heat Loss To Overburden\", \nlabel = \"A = 40_000 m^2\",\nlw = 3, \nlegend=:topright,\nlegendfontsize = 10,\nframe=:box)\nxgrid!(:on, :cadetblue, 2, :dashdot, 0.4)\nygrid!(:on, :cadetblue, 2, :dashdot, 0.4)\n\n\n\n\nIf the injection pressure of steam is 5.0 MPa, the steam quality is 70%, and the condenstae is produced at an average temperature of \\(\\mathrm T_{o} + 0.75 * {T_{s} - T_{o}}\\), the annual steam requirement to compensate for the heat loss to overburden is calculated as follows:\n\nP = 5.0 # MPa\nx = 0.7\n\nT_sat = Tsat(P) # K\nH_vap = SatHV(T_sat) / 1e6 # MJ/kg\nH_liq = SatHL(T_sat) / 1e6 # MJ/kg\nH_wetsteam = (1 - x) * H_liq + x * H_vap # MJ/kg\n\nT_cond = To + 0.75 * (Ts - To) # C\nH_cond = SpecificH(P, T_cond + 273.15) / 1e3 # MJ/kg\n\nnet_heat_per_tonne_of_steam = (H_wetsteam - H_cond) * 1000; # MJ/tonne\n\ndf_Q_sub[!, :steam_requirement] = df_Q_sub.Q_incremental ./ net_heat_per_tonne_of_steam\n\n@df df_Q_sub bar(:year, :steam_requirement,\nxlabel = \"Time (Year)\",\nylabel = \"Steam requirement (tonnes)\",\ntitle = \"Annual Steam Requirement\",\nlabel = \"A = 40_000 m^2\",\nlw = 3,\nlegend=:topright,\nlegendfontsize = 10,\nframe=:box)\nxgrid!(:on, :cadetblue, 2, :dashdot, 0.4)\nygrid!(:on, :cadetblue, 2, :dashdot, 0.4)"
  },
  {
    "objectID": "posts/julia-posts/Thermal Recovery Part II/index.html#heat-conduction-from-a-constant-surface-area",
    "href": "posts/julia-posts/Thermal Recovery Part II/index.html#heat-conduction-from-a-constant-surface-area",
    "title": "Thermal Recovery - Part II",
    "section": "1.0 Heat conduction from a constant surface area",
    "text": "1.0 Heat conduction from a constant surface area\nThe rate of heat loss to overburden at the reservoir/overburden interface over a constant surface area (A) is given by:\n\\[q = - K \\cdot A (\\frac{\\partial T}{\\partial x})_{x=0} \\tag{2}\\]\nwhere K is the thermal conductivity, T is the temperature, and x is the distance from the boundary. The cumulative heat loss to overburden is given by:\n\\[Q_{c} = \\int_0^t - K \\cdot A (\\frac{\\partial T}{\\partial x})_{_{x=0}} dt \\tag{3}\\]\nwhere \\(t\\) is time. Using the temperature profile given in Equation 1, we can calculate the cumulative heat loss to overburden as:\n\\[Q_{c} = 2 (T_{s} - T_{o}) \\cdot K \\cdot A \\sqrt{\\frac{t}{\\pi \\alpha}}\\]\nThe following function is defined to calculate the cumulative heat loss to overburden.\n\nfunction cumulative_heat_loss_constant_area(Ts, To, α, K, A, t)\n    Q = 2.0 * (Ts - To) * K * A * sqrt.(t ./ (π .* α))\n    return Q\nend;\n\nFor a reservoir/overburden interface with a constant surface area of 40,000 \\(\\mathrm m^2\\), the cumulative heat loss to overburden over 10 years is estimated as follows.\n\nt = 0:1.0:10 * 365 # days\n\nA = 40000.0 # m^2\n\nQ = cumulative_heat_loss_constant_area(Ts, To, α, K, A, t) / 1e6 # MJ\n\ndf_Q = DataFrame(t = t, year = t / 365.0, Q = Q)\n\n@df df_Q plot(:t, :Q, \nxlabel = \"Time (days)\", \nylabel = \"Heat loss to overburden (MJoules)\",\nlabel = \"Area = 40000 m^2\",\nlw = 3, \nlegend=:topleft,\nlegendfontsize = 10,\nframe=:box)\nxgrid!(:on, :cadetblue, 2, :dashdot, 0.4)\nygrid!(:on, :cadetblue, 2, :dashdot, 0.4)\n\n\n\n\nThe rate of heat loss to overburden at the reservoir/overburden interface over a constant surface area (A) can be calculated by combining Equation 1 and Equation 2:\n\\[q = (T_{s} - T_{o}) \\cdot K \\cdot A \\sqrt{\\frac{1}{\\pi \\alpha t}}\\]\nHere’s the implementation of the function that calculates the rate of heat loss to overburden using the equation mentioned above:\n\nfunction heat_rate_constant_area(Ts, To, α, K, A, t)\n    q = (Ts - To) * K * A ./ sqrt.(π * α .* t)\n    return q\nend;\n\nThe rate of heat loss to overburden over 10 years is plotted below.\n\nt = 0:1.0:10 * 365 # days\n\nA = 40000.0 # m^2\n\nq = heat_rate_constant_area(Ts, To, α, K, A, t) / 1e6 # MJ/day\n\ndf_q = DataFrame(t = t, year = t / 365.0, q = q)\n\n@df df_q plot(:t, :q, \nxlabel = \"Time (days)\", \nylabel = \"Rate of heat loss to overburden (MJoules/day)\",\nlabel = \"Area = 40000 m^2\",\nlw = 3, \nlegend=:topright,\nlegendfontsize = 10,\nframe=:box)\nxgrid!(:on, :cadetblue, 2, :dashdot, 0.4)\nygrid!(:on, :cadetblue, 2, :dashdot, 0.4)\n\n\n\n\nThe annual heat loss to overburden can be calculated as follows:\n\ndf_Q_sub = df_Q[df_Q.year .== round.(df_Q.year, digits = 0), :]\ndf_Q_sub[!, :Q_lag] = lag(df_Q_sub.Q, 1)\ndf_Q_sub[!, :Q_incremental] = df_Q_sub.Q - df_Q_sub.Q_lag\n\n@df df_Q_sub bar(:year, :Q_incremental, \nxlabel = \"Time (Year)\", \nylabel = \"Heat loss to overburden (MJoules)\",\ntitle = \"Annual Heat Loss To Overburden\", \nlabel = \"A = 40_000 m^2\",\nlw = 3, \nlegend=:topright,\nlegendfontsize = 10,\nframe=:box)\nxgrid!(:on, :cadetblue, 2, :dashdot, 0.4)\nygrid!(:on, :cadetblue, 2, :dashdot, 0.4)\n\n\n\n\nAssuming an injection pressure of 5.0 MPa and a steam quality of 70%, and assuming that the condensate is produced at an average temperature of \\(\\mathrm T_{o} + 0.75 * (T_{s} - T_{o})\\), the annual steam requirement needed to compensate for the heat loss to overburden can be estimated as follows:\n\nP = 5.0 # MPa\n\nx = 0.7\n\nT_sat = Tsat(P) # K\nH_vap = SatHV(T_sat) / 1e6 # MJ/kg\nH_liq = SatHL(T_sat) / 1e6 # MJ/kg\nH_wetsteam = (1 - x) * H_liq + x * H_vap # MJ/kg\n\nT_cond = To + 0.75 * (Ts - To) # C\nH_cond = SpecificH(P, T_cond + 273.15) / 1e3 # MJ/kg\n\nnet_heat_per_tonne_of_steam = (H_wetsteam - H_cond) * 1000; # MJ/tonne\n\ndf_Q_sub[!, :steam_requirement] = df_Q_sub.Q_incremental ./ \n                                    net_heat_per_tonne_of_steam\n\n@df df_Q_sub bar(:year, :steam_requirement,\nxlabel = \"Time (Year)\",\nylabel = \"Steam requirement (tonnes)\",\ntitle = \"Annual Steam Requirement\",\nlabel = \"A = 40_000 m^2\",\nlw = 3,\nlegend=:topright,\nlegendfontsize = 10,\nframe=:box)\nxgrid!(:on, :cadetblue, 2, :dashdot, 0.4)\nygrid!(:on, :cadetblue, 2, :dashdot, 0.4)"
  },
  {
    "objectID": "about.html#areas-of-expertiseinterest",
    "href": "about.html#areas-of-expertiseinterest",
    "title": "About",
    "section": "Areas of Expertise/Interest:",
    "text": "Areas of Expertise/Interest:\n\nComputational Thermodynamics\nReservoir Characterization\nReservoir Simulation\nThermal Recovery\nPTA/RTA\nEOR of Unconventional Reservoirs\nHydraulic Fracturing Modeling and Simulation\nDFIT and DFIT-Flowback Design and Analysis\nProcess Analytics\nArtificial Intelligence\nMachine Learning"
  },
  {
    "objectID": "about.html#education",
    "href": "about.html#education",
    "title": "About",
    "section": "Education",
    "text": "Education\n\nCertificate in Proffesional Management (PEG) | University of Calgary | 2018\nCertificate in Spanish Language and Culture | University of Calgary | 2016\nPhD in Petroleum Engineering | University of Calgary | 2011\nMEng in Reservoir Engineering | University of Calgary | 2006\nMSc in Reservoir Engineering | Petroleum University of Technology | 2006\nBSc in Reservoir Engineering | Petroleum University of Technology | 2003"
  },
  {
    "objectID": "about.html#side-note",
    "href": "about.html#side-note",
    "title": "About me",
    "section": "Side note",
    "text": "Side note\nThe entire weblog is created by the amazing Quarto package. A great contribution from the Posit team. Thanks a lot!"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "Welcome to my weblog!\nMy goal with this blog is to share my expertise and experience with Julia, R, and Python in the domains of petroleum and process engineering. Through my posts, I will cover various topics that are relevant to the oil and gas industry, including engineering modeling, data visualization, data analysis, and machine learning applications.\nAs a process analytics engineer, I rely heavily on R for its powerful machine learning capabilities. I have extensive experience with R, having contributed several petroleum engineering packages to the CRAN repository and written several R packages for my own use. My experience with R has given me valuable insights into its potential applications within the oil and gas industry, and I am excited to share this knowledge with others.\nPython is my language of choice for building infrastructure for automated cloud-based data science projects. I use it for data wrangling, visualization, and deep learning modeling due to its flexibility and versatility. With over 5 years of experience working with Python, I have a deep understanding of how it can be applied to various challenges within the petroleum and process engineering domains.\nJulia is my go-to language for scientific studies and data science projects. I first started using Julia for reservoir and geomechanics studies four years ago and was impressed by its power and versatility in scientific computing. Julia’s exceptional speed and ease of use make it an excellent choice for engineering modeling and simulation tasks. With my experience in utilizing Julia for these purposes, I am excited to share my knowledge of this language and demonstrate its potential applications within the oil and gas industry.\nTo summarize, this blog aims to share my expertise and knowledge of Julia, R, and Python in the fields of petroleum and process engineering. My posts will cover a wide range of topics, with a focus on engineering applications utilizing Julia, and also including posts using Python and R primarily focused on data science and machine learning. I hope my readers will find my content informative and valuable, providing them with insights on how to use these languages for practical engineering applications.\nThe entire weblog is created by the amazing Quarto package which supports Julia, Python, and R languages. A great contribution from the Posit team. Thanks a lot!"
  },
  {
    "objectID": "posts/python-posts/Oilsands Data Analysis Part I/index.html#listing-all-the-saved-xls-files",
    "href": "posts/python-posts/Oilsands Data Analysis Part I/index.html#listing-all-the-saved-xls-files",
    "title": "Alberta In-situ Oilsands Production Analysis using Python - Part I",
    "section": "Listing all the saved xls files",
    "text": "Listing all the saved xls files\n\nimport os\n# filter only .xls files\nxls_files = [file for file in os.listdir(os.getcwd()) if file.endswith('.xls')]\nxls_files\n\n['ST53_2010-12.xls',\n 'ST53_2011-12.xls',\n 'ST53_2012-12.xls',\n 'ST53_2013-12.xls',\n 'ST53_2014-12.xls',\n 'ST53_2016-12.xls',\n 'ST53_2017-12.xls',\n 'ST53_2018-12.xls',\n 'ST53_2019-12.xls',\n 'ST53_2020-12.xls',\n 'ST53_2021-12.xls',\n 'ST53_2022-12.xls',\n 'ST53_Current.xls']\n\n\nIn the next post, I will show how to read the data from the .xls files and prepare the datasets for further analysis. This analysis will provide insights into the production trends and patterns of in-situ oilsands projects in Alberta."
  },
  {
    "objectID": "posts/python-posts/Oilsands Data Analysis Part II/index.html#reading-the-bitumen-sheet",
    "href": "posts/python-posts/Oilsands Data Analysis Part II/index.html#reading-the-bitumen-sheet",
    "title": "Alberta In-situ Oilsands Production Analysis using Python - Part II",
    "section": "Reading the BITUMEN sheet",
    "text": "Reading the BITUMEN sheet\n\n# read the BITUMEN sheet\nbitumen_2010 = sheets['BITUMEN']\n\nThe info method is used to print the column names and data types of each column in the DataFrame.\n\nbitumen_2010.info()\n\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 177 entries, 0 to 176\nData columns (total 18 columns):\n #   Column           Non-Null Count  Dtype  \n---  ------           --------------  -----  \n 0   Operator         172 non-null    object \n 1   Scheme Name      26 non-null     object \n 2   Area             163 non-null    object \n 3   Approval Number  163 non-null    object \n 4   Recovery Method  164 non-null    object \n 5   Jan              166 non-null    float64\n 6   Feb              166 non-null    float64\n 7   Mar              166 non-null    float64\n 8   Apr              165 non-null    float64\n 9   May              165 non-null    float64\n 10  Jun              162 non-null    float64\n 11  Jul              162 non-null    float64\n 12  Aug              162 non-null    float64\n 13  Sep              161 non-null    float64\n 14  Oct              159 non-null    float64\n 15  Nov              159 non-null    float64\n 16  Dec              156 non-null    float64\n 17  Monthly Average  153 non-null    float64\ndtypes: float64(13), object(5)\nmemory usage: 25.0+ KB\n\n\nThe head method is used to display the first 5 rows of the DataFrame.\n\nbitumen_2010.head()\n\n\n\n\n\n  \n    \n      \n      Operator\n      Scheme Name\n      Area\n      Approval Number\n      Recovery Method\n      Jan\n      Feb\n      Mar\n      Apr\n      May\n      Jun\n      Jul\n      Aug\n      Sep\n      Oct\n      Nov\n      Dec\n      Monthly Average\n    \n  \n  \n    \n      0\n      Canadian Natural Resources Limited\n      NaN\n      Cold Lake\n      4746P\n      Commercial\n      587.48\n      596.72\n      637.59\n      678.74\n      705.61\n      718.99\n      697.25\n      696.88\n      763.21\n      702.21\n      696.32\n      674.99\n      679.67\n    \n    \n      1\n      Canadian Natural Resources Limited\n      NaN\n      Cold Lake\n      6726I\n      Commercial\n      171.54\n      193.66\n      187.71\n      177.54\n      176.90\n      174.50\n      160.53\n      155.97\n      168.22\n      168.27\n      139.73\n      143.48\n      168.17\n    \n    \n      2\n      Baytex Energy Ltd. (¹)\n      Cliffdale Pilot\n      Peace River Area 2\n      11034E\n      Commercial-CSS\n      0.00\n      2.55\n      6.15\n      2.25\n      4.16\n      10.59\n      5.83\n      3.27\n      9.18\n      20.09\n      15.42\n      13.15\n      8.42\n    \n    \n      3\n      North Peace Energy Corp.\n      Red Earth\n      Peace River Area 2\n      11209A\n      Commercial-CSS\n      10.30\n      4.70\n      3.11\n      2.21\n      1.63\n      0.51\n      0.00\n      0.00\n      0.40\n      0.00\n      0.00\n      0.00\n      3.27\n    \n    \n      4\n      Penn West Petroleum Ltd.\n      Seal\n      Peace River Area 2\n      11377A\n      Commercial-CSS\n      0.00\n      0.00\n      0.00\n      0.00\n      0.00\n      0.00\n      0.00\n      0.00\n      0.00\n      0.00\n      0.00\n      0.00\n      NaN\n    \n  \n\n\n\n\nThe tail method is used to print the last 20 rows of the DataFrame.\n\nbitumen_2010.tail(20)\n\n\n\n\n\n  \n    \n      \n      Operator\n      Scheme Name\n      Area\n      Approval Number\n      Recovery Method\n      Jan\n      Feb\n      Mar\n      Apr\n      May\n      Jun\n      Jul\n      Aug\n      Sep\n      Oct\n      Nov\n      Dec\n      Monthly Average\n    \n  \n  \n    \n      157\n      Bronco Energy Ltd.\n      NaN\n      Athabasca\n      9774E\n      Primary\n      28.65\n      28.58\n      27.94\n      22.84\n      91.39\n      80.23\n      77.59\n      83.21\n      64.28\n      74.45\n      69.66\n      63.98\n      59.40\n    \n    \n      158\n      Devon Canada Corporation\n      NaN\n      Cold Lake\n      9821\n      Primary\n      4.00\n      3.41\n      3.42\n      0.00\n      1.87\n      0.00\n      1.74\n      1.04\n      4.18\n      4.09\n      1.94\n      2.76\n      2.85\n    \n    \n      159\n      Frog Lake Energy Resources Corp.\n      NaN\n      Cold Lake\n      9827B\n      Primary\n      11.42\n      5.22\n      5.11\n      8.76\n      12.08\n      16.21\n      13.78\n      11.12\n      17.36\n      18.75\n      19.41\n      22.18\n      13.45\n    \n    \n      160\n      Husky Oil Operations Limited\n      NaN\n      Cold Lake\n      9873\n      Primary\n      12.32\n      12.80\n      12.66\n      11.27\n      12.93\n      11.56\n      11.63\n      11.27\n      10.62\n      10.79\n      11.50\n      10.50\n      11.65\n    \n    \n      161\n      Canadian Natural Resources Limited\n      NaN\n      Athabasca\n      9884D\n      Primary\n      65.64\n      68.55\n      69.79\n      64.72\n      68.09\n      64.18\n      63.37\n      66.10\n      64.25\n      62.55\n      59.87\n      55.29\n      64.37\n    \n    \n      162\n      Koch Exploration Canada G/P Ltd. (¹)\n      NaN\n      Cold Lake\n      9908D\n      Primary\n      0.00\n      0.00\n      0.00\n      0.00\n      0.00\n      0.00\n      0.00\n      0.00\n      0.00\n      0.00\n      0.00\n      0.00\n      NaN\n    \n    \n      163\n      NaN\n      NaN\n      NaN\n      NaN\n      Total\n      109423.83\n      116311.68\n      120054.09\n      116601.43\n      121671.30\n      122439.61\n      122234.75\n      121215.19\n      108260.73\n      118808.23\n      128196.96\n      129913.57\n      119594.28\n    \n    \n      164\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n    \n    \n      165\n      Conventional Bitumen Recovery\n      NaN\n      NaN\n      NaN\n      NaN\n      537.49\n      544.67\n      560.36\n      541.87\n      560.71\n      524.96\n      482.84\n      555.27\n      555.21\n      545.33\n      601.13\n      593.86\n      550.31\n    \n    \n      166\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n    \n    \n      167\n      Total\n      NaN\n      NaN\n      NaN\n      NaN\n      109961.32\n      116856.35\n      120614.45\n      117143.30\n      122232.01\n      122964.57\n      122717.59\n      121770.46\n      108815.94\n      119353.56\n      128798.09\n      130507.43\n      120144.59\n    \n    \n      168\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n    \n    \n      169\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n    \n    \n      170\n      Notes:\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n    \n    \n      171\n      - Monthly production totals may be revised due...\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n    \n    \n      172\n      - Total may not add due to rounding\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n    \n    \n      173\n      - Conventional Bitumen production consists of ...\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n    \n    \n      174\n      - Monthly average does not include months ther...\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n    \n    \n      175\n      ¹ Amended this month\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n    \n    \n      176\n      ¹ Amended this month\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n    \n  \n\n\n\n\nSince the number of producers in the file can vary, we cannot rely on a fixed index number to subset the dataset. However, the last row of the dataset always contains a summary of the total production, which is identified by the cell value of Total in the Recovery Method column. Therefore, we can use the index number of the row with Total in the Recovery Method column to subset the dataset and exclude the summary row and any other rows with additional information.\n\n# get the index of the last row using np.where\nlast_row_idx = np.where(bitumen_2010[[\"Recovery Method\"]] == \"Total \")[0][0]\nbitumen_2010 = bitumen_2010.iloc[:last_row_idx, :]\n\nIn addition, we can remove the Monthly Average column from the dataset since we will be aggregating the data in our analysis and therefore do not need the monthly averages.\n\nbitumen_2010 = bitumen_2010.drop(columns = ['Monthly Average'])"
  }
]