{"title":"Thermal Recovery - Part I","markdown":{"yaml":{"title":"Thermal Recovery - Part I","subtitle":"Water/Steam Properties","author":"Farshad Tabasinejad","date":"2023-03-11","toc":true,"draft":false,"categories":["julia","thermal recovery","steam properties","SteamTable.jl"],"image":"steam_enthalpy.svg","execute":{"cache":false,"output":true},"format":{"html":{"code-fold":false,"code-tools":false,"code-overflow":"wrap","code-block-bg":true,"code-block-border-left":"#31BAE9","code-copy":"hover","highlight":"zenburn"}},"jupyter":"julia-1.8"},"headingText":"Disclaimer","containsRefs":false,"markdown":"\n\n\nThis blog post is for educational purposes only. Any commercial use of the information provided in this blog post is prohibited. The author is not responsible for any damage or loss caused by the use of the information provided in this blog post. \n\n# Introduction\n\nIn this post we will use Julia `SteamTable.jl` package to estimate water and steam properties. The `SteamTable.jl` package is a Julia implementation of IAPWS-IF97 formulation.\n\n# Loading required packages\n\n```{julia}\nusing SteamTables\nusing Plots\n```\n\n\n# Physical properties of water \n\nThe triple point of water is defined as the temperature and pressure at which the solid, liquid and vapor phases coexist in thermodynamic equilibrium. The triple point of water is $\\mathrm T_{3p}$ = `273.16 K` and $\\mathrm P_{3p}$ = `611.657 Pa`. The vapor-liquid critical point of water is defined as the temperature and pressure at which both phases become identical. The critical point of water is $\\mathrm T_{crit}$ = `647.096 K` and $\\mathrm P_{crit}$ = `22.064 MPa`.\n\n# Saturation properties\n\n## Saturation pressure\n\nSaturation pressure of water can be estimated using the `SteamTables.Psat` function. The water phase envelope is generated below from the tripple point $\\mathrm T_{3p}$ = 273.16 K to the critical point $\\mathrm T_{crit}$ = 647.096 K.\n\n```{julia}\nT_tripple = 273.16 # K\n\nT_critical = 647.096 # K\n\nT = unique(vcat(T_tripple, ceil(T_tripple):1.0: floor(T_critical), T_critical))\n\np = [Psat(t) for t in T]\n\nplt = plot(T, p, \nxlabel=\"Temperature [K]\", \nylabel=\"Pressure [MPa]\", \nlabel=\"Sat. pressure\", \nlw = 3, \nlegend=:topleft,\nlegendfontsize = 10,\nframe=:box)\nxgrid!(:on, :cadetblue, 2, :dashdot, 0.4)\nygrid!(:on, :cadetblue, 2, :dashdot, 0.4)\n\nplot!([T_tripple], [Psat(T_tripple)], \nseriestype=:scatter, \nlabel=\"Triple point\",\nmarkersize = 6)\n\nplot!([T_critical], [Psat(T_critical)], \nseriestype=:scatter, \nlabel=\"Critical point\",\nmarkersize = 6)\n\n```\n\n## Saturated density\n\nSaturated liquid and vapor densities are estimated using the `SteamTables.SatDensL` and `SteamTables.SatDensV` functions.\n\n```{julia}\n# saturated liquid density\nρ = [SatDensL(t) for t in T]\n\nplt = plot(T, ρ, \nxlabel=\"Temperature [K]\", \nylabel=\"Density [kg/m³]\", \nlabel=\"Sat. liquid density\",\nlw = 3, \nlegend=:topright,\nlegendfontsize = 10,\nframe=:box)\nxgrid!(:on, :cadetblue, 2, :dashdot, 0.4)\nygrid!(:on, :cadetblue, 2, :dashdot, 0.4)\n\n# saturated vapor density \nρ = [SatDensV(t) for t in T]\n\nplot!(T, ρ, \nlabel=\"Sat. vapor density\",\nlw = 3)\n\nplot!([T_critical], [SatDensL(T_critical)], \nseriestype=:scatter, \nlabel=\"Critical point\",\nmarkersize = 6)\n```\n\n## Saturated enthalpy\n\nSaturated liquid and vapor enthalpies are estimated using the `SteamTables.SatHL` and `SteamTables.SatHV` functions.\n\n```{julia}\n# saturated liquid enthalpy\nh = [SatHL(t) for t in T] / 1e3\n\nplt = plot(T, h, \nxlabel=\"Temperature [K]\", \nylabel=\"Enthalpy [kJ/kg]\", \nlabel=\"Sat. liquid enthalpy\",\nlw = 3, \nlegend=:bottomright,\nlegendfontsize = 10,\nframe=:box)\nxgrid!(:on, :cadetblue, 2, :dashdot, 0.4)\nygrid!(:on, :cadetblue, 2, :dashdot, 0.4)\n\n# saturated vapor enthalpy\nh = [SatHV(t) for t in T] / 1e3\n\nplot!(T, h, \nlabel=\"Sat. vapor enthalpy\",\nlw = 3)\n\nplot!([T_critical], [SatHL(T_critical) / 1e3], \nseriestype=:scatter, \nlabel=\"Critical point\",\nmarkersize = 6)\n```\n\n## Latent heat of vaporization\n\nThe latent heat of vaporization curve is generated using the `SteamTables.DeltaHvap` function.\n\n```{julia}\nh_lv = [DeltaHvap(t) for t in T] / 1e3\n\nplt = plot(T, h_lv, \nxlabel=\"Temperature [K]\", \nylabel=\"Latent heat of vaporization [kJ/kg]\", \nlabel=\"Latent heat of vaporization\",\nlw = 3, \nlegend=:topright,\nlegendfontsize = 10,\nframe=:box)\nxgrid!(:on, :cadetblue, 2, :dashdot, 0.4)\nygrid!(:on, :cadetblue, 2, :dashdot, 0.4)\n\nplot!([T_critical], [h_lv[end]], \nseriestype=:scatter, \nlabel=\"Critical point\",\nmarkersize = 6)\n```\n\nA list of all the available functions can be found in the [SteamTables.jl](https://github.com/braamvandyk/SteamTables.jl) documentation.\n\n# Wet steam properties\n\nThe physical properties of a wet steam mixture (saturated vapor and liquid) is defined by the following equations:\n\n$$\n\\begin{align}\np &= p_{sat}(T) \\\\[10pt]\nh &= \\left(1 - x \\right) h_{sat}^{l}(T) + x \\left( h_{sat}^{v}(T) \\right) \\\\[10pt]\ns &= \\left(1 - x \\right) s_{sat}^{l}(T) + x \\left( s_{sat}^{v}(T) \\right) \\\\[10pt]\n\\rho &= \\left(1 - x \\right) \\rho_{sat}^{l}(T) + x \\left( \\rho_{sat}^{v}(T) \\right)\n\\end{align}\n$$\n\nwhere steam quality $x$ is in weight fraction and defined as:\n\n$$\nx = \\frac{mass_{vapor}}{mass_{total}}\n$$\n\nThe saturated enthalpy curves are generated below for a wet steam at several steam qualities.\n\n```{julia}\nx = [0.0, 0.25, 0.50, 0.75, 1.0]\n\nh = [(1 - x[1]) * SatHL(t) + x[1] * SatHV(t) for t in T] / 1e3\n\nplt = plot(h, T, \nxlabel = \"Enthalpy [kJ/kg]\", \nylabel = \"Temperature [K]\", \nlabel = \"x = $(x[1])\", \nlw = 3, \nlegend=:topleft,\nlegendfontsize = 10,\nframe=:box,\ntitle = \"Enthalpy plot for wet steam\")\nxgrid!(:on, :cadetblue, 2, :dashdot, 0.4)\nygrid!(:on, :cadetblue, 2, :dashdot, 0.4)\n\nfor i in 2:length(x)\n    h = [(1 - x[i]) * SatHL(t) + x[i] * SatHV(t) for t in T] / 1e3\n    plot!(h, T, \n    label = \"x = $(x[i])\", \n    lw = 3)\nend\n\nplot!([SatHL(T_critical) / 1e3], [T_critical], \nseriestype=:scatter, \nlabel=\"Critical point\",\nmarkersize = 6)\n```\n\n# Subcooled liquid and superheated vapor properties\n\n`SteamTables.jl` also provides functions for calculating the properties of subcooled liquid and superheated vapor. The following examples shows the application of specific functions in predicting water propertis over a wide range of temperature and pressure.\n\n## Specific properties\n\nThe specific properties of water are calculated using the `SteamTables.SpecificH`, `SteamTables.SpecificS`, `SteamTables.SpecificV`, and `SteamTables.SpecificCP` functions. The specific enthalpy curve is generated below from 273.16 K to 747.096 K at a constant pressure of 10 MPa.\n\n```{julia}\nT = vcat(274:1.0:800) # K\nP = 10 # MPa\n\nh = zeros(length(T))\ns = zeros(length(T))\nv = zeros(length(T))\nCp = zeros(length(T))\n\nfor i in 1:length(T)\n    h[i] = SpecificH(P, T[i])\n    s[i] = SpecificS(P, T[i])\n    v[i] = SpecificV(P, T[i])\n    Cp[i] = SpecificCP(P, T[i])\nend\n```\n\nThe figure below shows the change in specific enthalpy over a wide range of temperatures at a constant pressure of 10 MPa.\n\n\n```{julia}\nplt = plot(T, h, \nxlabel=\"Temperature [K]\", \nylabel=\"Enthalpy [kJ/kg]\", \nlabel=\"Specific enthalpy\",\nlw = 3, \nlegend=:bottomright,\nlegendfontsize = 10,\nframe=:box)\nxgrid!(:on, :cadetblue, 2, :dashdot, 0.4)\nygrid!(:on, :cadetblue, 2, :dashdot, 0.4)\n```\n\nA similar plot can be generated for the specific volume curve.\n\n```{julia}\nplt = plot(T, v, \nxlabel=\"Temperature [K]\", \nylabel=\"Volume [m3/kg]\", \nlabel=\"Specific volume\",\nlw = 3, \nlegend=:bottomright,\nlegendfontsize = 10,\nframe=:box)\nxgrid!(:on, :cadetblue, 2, :dashdot, 0.4)\nygrid!(:on, :cadetblue, 2, :dashdot, 0.4)\n```\n\nThere are other functions for calculating the specific properties of water. A list of all the available functions can be found in the [SteamTables.jl](https://github.com/braamvandyk/SteamTables.jl) documentation.\n\n\n# Pressure-Volume diagram construction\n\nThe pressure-volume diagram of water can be constructed using the `SteamTables.SatDensL`, `SteamTables.SatDensV`, and `SteamTables.SpecificV` functions. Firstly, the saturated liquid and vapor volume curves are generated from the triple point to the critical point. Then, the specific volume of water is calculated at several constant temperatures over a wide pressure range.\n\n```{julia}\nT_tripple = 273.16 # K\n\nT_critical = 647.096 # K\n\nT = unique(vcat(T_tripple, ceil(T_tripple):0.1: floor(T_critical), T_critical))\n\np = [Psat(t) for t in T]\n\nν_l = 1.0 ./ [SatDensL(t) for t in T]\n\nν_v = 1.0 ./ [SatDensV(t) for t in T]\n\nx_log_range = [1e-3, 1e-2, 1e-1, 1e0, 1e1, 1e2]\ny_log_range = [1e-3, 1e-2, 1e-1, 1e0, 1e1]\n\nplt = plot(ν_l, p,\nxlabel = \"Specific volume [m3/kg]\",\nylabel = \"Pressure [MPa]\",\nlabel = :none,\nxscale=:log10, \nxticks=(x_log_range, x_log_range),\nyscale=:log10, \nyticks=(y_log_range, y_log_range),\nlw = 3,\nlinecolor = :red,\nlegend=:topright,\nlegendfontsize = 10,\nframe=:box,\ntitle = \"Pressure-Volume diagram of water\")\nxgrid!(:on, :cadetblue, 2, :dashdot, 0.4)\nygrid!(:on, :cadetblue, 2, :dashdot, 0.4)\n\nplot!(ν_v, p,\nlw = 3,\nlinecolor = :red,\nlabel = :none)\n\nplot!([1.0 / SatDensL(T_critical)], [Psat(T_critical)],  \nseriestype=:scatter, \nlabel=\"Critical point\",\nmarkersize = 6)\n\n# construct subcooled liquid and superheated vapor curves\nT_ = vcat(350:100:550)\np_ = 0.001:0.001:40.0\n\nfor i in 1:length(T_)\n    ν_ = [SpecificV(p, T_[i]) for p in p_]\n    plot!(ν_, p_,\n    lw = 3,\n    line =:dash,\n    label = \"T = $(T_[i])\")\nend\n\ndisplay(plt)\n```\n\n"},"formats":{"html":{"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":false,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"jupyter"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":false,"code-overflow":"wrap","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../../styles.css"],"toc":true,"output-file":"index.html"},"language":{},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.2.335","theme":{"light":["Yeti","../../../theme.scss"]},"title-block-banner":false,"title":"Thermal Recovery - Part I","subtitle":"Water/Steam Properties","author":"Farshad Tabasinejad","date":"2023-03-11","draft":false,"categories":["julia","thermal recovery","steam properties","SteamTable.jl"],"image":"steam_enthalpy.svg","jupyter":"julia-1.8","code-block-bg":true,"code-block-border-left":"#31BAE9","code-copy":"hover","highlight":"zenburn"},"extensions":{"book":{"multiFile":true}}}}}