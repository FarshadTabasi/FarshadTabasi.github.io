{
  "hash": "79116fb7b6e1d6d9098b016d91abc1a8",
  "result": {
    "markdown": "---\ntitle: Western Canadian Sedimentary Basin (WCSB) Mapping using Geopandas\nauthor: Farshad Tabasinejad\ndate: '2023-03-04'\ndate-modified: '2021-03-04'\ntoc: true\ndraft: false\ncategories:\n  - python\n  - pandas\n  - Geopandas\n  - data analysis\n  - data visualization\nimage: ''\nexecute:\n  cache: false\n  output: true\nformat:\n  html:\n    code-fold: false\n    code-tools: true\n    code-overflow: wrap\n    code-block-bg: true\n    code-block-border-left: '#31BAE9'\n    code-copy: hover\n    highlight: zenburn\n---\n\n# Disclaimer\n\nThis blog post is for educational purposes only. Any commercial use of the information provided in this blog post is prohibited. For more information about the AER copyright and permission to reproduce, please visit [AER Copyright and Disclaimer](https://www.aer.ca/copyright-disclaimer).\nThe author is not responsible for any damage or loss caused by the use of the information provided in this blog post. \n\n# Introduction\n\nAlberta Energy Regulator (AER) lists the monthly injection and production data for all in-situ oilsands projects in Alberta on its website [Alberta Energy Regulator](https://www.aer.ca/). The data is available in several spreadsheets and can be downloaded from [ST53: Alberta In Situ Oil Sands Production Summary](https://ags.aer.ca/reports/atlas-western-canada-sedimentary-basin). The annual data are reported in separate files in **`.xls`** format. Each file has 6 different sheets with information about bitumen, water, steam, wells, SOR, and WSR.\n\nIn the previous post [Downloading Alberta Oilsands Monthly Production Data using Python](), I have shown how to download the data using python. In this post we use the downloaded data for data analysis and visualization. The entire source code can be downloaded by clicking on **`</>Code`** next to the blog title.\n\n## Loading the Data\n\nAll files are stored on a local directory. We use the `glob` module to list all **XLS** files in the directory and then use `pandas` to read the data into a `DataFrame`. The `xlrd` module is used as an engine in pandas to read the **XLS** files. The `matplotlib` module is used to create the plots. The `seaborn` module is used to create the plots. The `numpy` module is used to perform mathematical operations on the data. The `warnings` module is used to suppress the warnings. The `os` module is used to save the plots in the current directory.\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\n#install geopandas\n\nimport sys\n# !{sys.executable} -m pip install geopandas\n```\n:::\n\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nimport os\nimport glob\nimport pandas as pd\nimport geopandas as gpd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\nimport warnings\nwarnings.filterwarnings('ignore')\n```\n:::\n\n\nThe `glob` module is used to list all `XLS` files in the directory. \n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\nshapefiles = glob.glob('OSProjects2015.gdb/')\nshapefiles\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\n['OSProjects2015.gdb/']\n```\n:::\n:::\n\n\nReading the all the `.shp` files using `geopandas`.\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\ngdf = pd.concat(\n    [gpd.read_file(shp) for shp in shapefiles]).pipe(gpd.GeoDataFrame)\n```\n:::\n\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\n# show columns\ngdf.columns\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```\nIndex(['OSP_NO', 'Operator_Name', 'Project_Name', 'Industry_Type',\n       'Project_Status', 'Year', 'OS_Area', 'Shape_Length', 'Shape_Area',\n       'geometry'],\n      dtype='object')\n```\n:::\n:::\n\n\nhead of the data\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\ngdf.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>OSP_NO</th>\n      <th>Operator_Name</th>\n      <th>Project_Name</th>\n      <th>Industry_Type</th>\n      <th>Project_Status</th>\n      <th>Year</th>\n      <th>OS_Area</th>\n      <th>Shape_Length</th>\n      <th>Shape_Area</th>\n      <th>geometry</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>Imperial Oil Resources</td>\n      <td>Cold Lake Operations</td>\n      <td>02</td>\n      <td>01</td>\n      <td>2015</td>\n      <td>CL</td>\n      <td>193203.948339</td>\n      <td>6.881845e+08</td>\n      <td>MULTIPOLYGON (((801641.764 6051679.134, 801580...</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>3</td>\n      <td>Shell Canada Limited</td>\n      <td>Jackpine Mine</td>\n      <td>01</td>\n      <td>01</td>\n      <td>2015</td>\n      <td>ATHA</td>\n      <td>47371.700342</td>\n      <td>7.672034e+07</td>\n      <td>MULTIPOLYGON (((724976.295 6352079.157, 725042...</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>4</td>\n      <td>Connacher Oil and Gas Limited</td>\n      <td>Great Divide</td>\n      <td>02</td>\n      <td>01</td>\n      <td>2015</td>\n      <td>ATHA</td>\n      <td>78260.017147</td>\n      <td>1.289022e+08</td>\n      <td>MULTIPOLYGON (((695353.230 6217610.084, 695132...</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>7</td>\n      <td>Canadian Natural Resources Limited (CNRL)</td>\n      <td>Horizon Mine</td>\n      <td>01</td>\n      <td>01</td>\n      <td>2015</td>\n      <td>ATHA</td>\n      <td>81197.290618</td>\n      <td>2.887134e+08</td>\n      <td>MULTIPOLYGON (((702953.989 6370378.694, 702949...</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>9</td>\n      <td>MEG Energy Corp.</td>\n      <td>Christina Lake Regional Project</td>\n      <td>02</td>\n      <td>01</td>\n      <td>2015</td>\n      <td>ATHA</td>\n      <td>94158.628161</td>\n      <td>1.899070e+08</td>\n      <td>MULTIPOLYGON (((767062.950 6169585.372, 767060...</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nshow the geometry type of the data\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\ngdf.geom_type.unique()\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```\narray(['MultiPolygon'], dtype=object)\n```\n:::\n:::\n\n\n<!-- \nsubset the data to only include the `Polygon`, `MultiPolygon` geometry types\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\ngdf = gdf[gdf.geom_type.isin(['Polygon', 'MultiPolygon'])]\n```\n:::\n\n\n -->\n\nplot the data using `geopandas`\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\n# plot gdf and add color based on 'OS_Area' column\ngdf.plot()\n#add additional info to plot\nplt.title('Western Canadian Sedimentary Basin (WCSB) Mapping')\nplt.xlabel('Longitude')\nplt.ylabel('Latitude')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-10-output-1.png){}\n:::\n:::\n\n\n## Oilsands land coverage\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\n# shapefiles = glob.glob('OilSandsLandCover2020.gdb/')\nshapefiles = glob.glob('Oil_Sands_Industrial_Features_2020/OilSandsSimplifiedLandCover.gdb/')\nshapefiles\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```\n['Oil_Sands_Industrial_Features_2020/OilSandsSimplifiedLandCover.gdb/']\n```\n:::\n:::\n\n\nReading the all the `.shp` files using `geopandas`.\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\ngdf = pd.concat([gpd.read_file(shp) for shp in shapefiles]).pipe(gpd.GeoDataFrame)\n```\n:::\n\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\n# show columns\ngdf.columns\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n```\nIndex(['LCU_ID', 'OSP_NO', 'OSP_NAME', 'PROJECT_NAME', 'EPEA_APPROVAL',\n       'WA_APPROVAL', 'INDUSTRY_TYPE', 'PROJECT_STATUS', 'RPT_NAME',\n       'LANDCOVER', 'SUBMISSION_TYPE', 'PDF_NAME', 'MAP_NAME', 'GEOTIFF_NAME',\n       'SOURCE', 'YEAR', 'YEAR_SUBMISSION', 'RMSE', 'PERIMETER', 'HECTARES',\n       'AREA', 'LANDCOVER_2', 'Shape_Length', 'Shape_Area', 'geometry'],\n      dtype='object')\n```\n:::\n:::\n\n\nhead of the data\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\ngdf.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>LCU_ID</th>\n      <th>OSP_NO</th>\n      <th>OSP_NAME</th>\n      <th>PROJECT_NAME</th>\n      <th>EPEA_APPROVAL</th>\n      <th>WA_APPROVAL</th>\n      <th>INDUSTRY_TYPE</th>\n      <th>PROJECT_STATUS</th>\n      <th>RPT_NAME</th>\n      <th>LANDCOVER</th>\n      <th>...</th>\n      <th>YEAR</th>\n      <th>YEAR_SUBMISSION</th>\n      <th>RMSE</th>\n      <th>PERIMETER</th>\n      <th>HECTARES</th>\n      <th>AREA</th>\n      <th>LANDCOVER_2</th>\n      <th>Shape_Length</th>\n      <th>Shape_Area</th>\n      <th>geometry</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>59_12020</td>\n      <td>59</td>\n      <td>Statoil Canada</td>\n      <td>Corner</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>02</td>\n      <td>03</td>\n      <td>Natural</td>\n      <td>01</td>\n      <td>...</td>\n      <td>2016</td>\n      <td>2017</td>\n      <td>NaN</td>\n      <td>84369.572314</td>\n      <td>17141.012867</td>\n      <td>1.714101e+08</td>\n      <td>Natural</td>\n      <td>84369.572314</td>\n      <td>1.714101e+08</td>\n      <td>MULTIPOLYGON (((731224.572 6216173.992, 731312...</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>38_22020</td>\n      <td>38</td>\n      <td>Statoil Canada</td>\n      <td>Leismer</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>02</td>\n      <td>01</td>\n      <td>Natural</td>\n      <td>01</td>\n      <td>...</td>\n      <td>2016</td>\n      <td>2017</td>\n      <td>NaN</td>\n      <td>9722.073266</td>\n      <td>523.240360</td>\n      <td>5.232404e+06</td>\n      <td>Natural</td>\n      <td>9722.073266</td>\n      <td>5.232404e+06</td>\n      <td>MULTIPOLYGON (((729025.743 6178762.620, 729798...</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>38_32020</td>\n      <td>38</td>\n      <td>Statoil Canada</td>\n      <td>Leismer</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>02</td>\n      <td>01</td>\n      <td>Natural</td>\n      <td>01</td>\n      <td>...</td>\n      <td>2016</td>\n      <td>2017</td>\n      <td>NaN</td>\n      <td>261.242505</td>\n      <td>0.226023</td>\n      <td>2.260230e+03</td>\n      <td>Natural</td>\n      <td>261.242505</td>\n      <td>2.260230e+03</td>\n      <td>MULTIPOLYGON (((720998.230 6184621.870, 720998...</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>38_42020</td>\n      <td>38</td>\n      <td>Statoil Canada</td>\n      <td>Leismer</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>02</td>\n      <td>01</td>\n      <td>Natural</td>\n      <td>01</td>\n      <td>...</td>\n      <td>2016</td>\n      <td>2017</td>\n      <td>NaN</td>\n      <td>539.848341</td>\n      <td>1.798870</td>\n      <td>1.798870e+04</td>\n      <td>Natural</td>\n      <td>539.848341</td>\n      <td>1.798870e+04</td>\n      <td>MULTIPOLYGON (((722168.492 6188978.678, 722048...</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>38_52020</td>\n      <td>38</td>\n      <td>Statoil Canada</td>\n      <td>Leismer</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>02</td>\n      <td>01</td>\n      <td>Natural</td>\n      <td>01</td>\n      <td>...</td>\n      <td>2016</td>\n      <td>2017</td>\n      <td>NaN</td>\n      <td>148000.146309</td>\n      <td>32472.938111</td>\n      <td>3.247294e+08</td>\n      <td>Natural</td>\n      <td>148000.146309</td>\n      <td>3.247294e+08</td>\n      <td>MULTIPOLYGON (((728940.016 6180389.384, 728769...</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 25 columns</p>\n</div>\n```\n:::\n:::\n\n\nshow the geometry type of the data\n\n::: {.cell execution_count=14}\n``` {.python .cell-code}\ngdf.geom_type.unique()\n```\n\n::: {.cell-output .cell-output-display execution_count=14}\n```\narray(['MultiPolygon'], dtype=object)\n```\n:::\n:::\n\n\n::: {.cell execution_count=15}\n``` {.python .cell-code}\ngdf.OSP_NAME.unique()\n```\n\n::: {.cell-output .cell-output-display execution_count=15}\n```\narray(['Statoil Canada', 'Cenovus FCCL Ltd.',\n       'Canadian Natural Resources Limited',\n       'Canadian Natural Upgrading Limited',\n       'ConocoPhillips Canada Resouces Corp.', 'Husky Energy Inc.',\n       'Imperial Oil Resources',\n       'China National Offshore Oil Corporation (CNOOC)',\n       'Shell Canada Limited', 'Suncor Energy Inc.',\n       'Suncor Energy Operating Inc.', 'Syncrude'], dtype=object)\n```\n:::\n:::\n\n\nplot the data using `geopandas`\n\n::: {.cell execution_count=16}\n``` {.python .cell-code}\n# add color based on 'OSP_NAME' column, with legends outside of the box\ngdf.plot(column='OSP_NAME')\n#add additional info to plot\nplt.title('Alberta Mapping')\nplt.xlabel('Longitude')\nplt.ylabel('Latitude')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-17-output-1.png){}\n:::\n:::\n\n\n## Read Layer files\n\n::: {.cell execution_count=17}\n``` {.python .cell-code}\n# shapefiles = glob.glob('OilSandsLandCover2020.gdb/')\nshapefiles = glob.glob('Alberta_Census_Boundaries_SHP/Data/')\nshapefiles\n```\n\n::: {.cell-output .cell-output-display execution_count=17}\n```\n['Alberta_Census_Boundaries_SHP/Data/']\n```\n:::\n:::\n\n\nReading the all the `.shp` files using `geopandas`.\n\n::: {.cell execution_count=18}\n``` {.python .cell-code}\ngdf = pd.concat([\n    gpd.read_file(shp)\n    for shp in shapefiles\n]).pipe(gpd.GeoDataFrame)\ngdf.crs\n```\n\n::: {.cell-output .cell-output-display execution_count=18}\n```\n<Derived Projected CRS: EPSG:3400>\nName: NAD83 / Alberta 10-TM (Forest)\nAxis Info [cartesian]:\n- E[east]: Easting (metre)\n- N[north]: Northing (metre)\nArea of Use:\n- name: Canada - Alberta.\n- bounds: (-120.0, 48.99, -109.98, 60.0)\nCoordinate Operation:\n- name: Alberta 10-degree TM (Forest)\n- method: Transverse Mercator\nDatum: North American Datum 1983\n- Ellipsoid: GRS 1980\n- Prime Meridian: Greenwich\n```\n:::\n:::\n\n\n::: {.cell execution_count=19}\n``` {.python .cell-code}\n# show columns\ngdf.columns\n```\n\n::: {.cell-output .cell-output-display execution_count=19}\n```\nIndex(['CDUID', 'DGUID', 'CDNAME', 'CDTYPE', 'LANDAREA', 'PRUID', 'Shape_Leng',\n       'Shape_Area', 'geometry'],\n      dtype='object')\n```\n:::\n:::\n\n\nhead of the data\n\n::: {.cell execution_count=20}\n``` {.python .cell-code}\ngdf.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=20}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>CDUID</th>\n      <th>DGUID</th>\n      <th>CDNAME</th>\n      <th>CDTYPE</th>\n      <th>LANDAREA</th>\n      <th>PRUID</th>\n      <th>Shape_Leng</th>\n      <th>Shape_Area</th>\n      <th>geometry</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>4801</td>\n      <td>2021A00034801</td>\n      <td>Division No.  1</td>\n      <td>CDR</td>\n      <td>20277.5235</td>\n      <td>48</td>\n      <td>731858.147928</td>\n      <td>2.106613e+10</td>\n      <td>POLYGON ((769392.116 5621501.264, 769424.875 5...</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>4802</td>\n      <td>2021A00034802</td>\n      <td>Division No.  2</td>\n      <td>CDR</td>\n      <td>17456.3337</td>\n      <td>48</td>\n      <td>968124.543163</td>\n      <td>1.816766e+10</td>\n      <td>POLYGON ((703274.537 5666369.084, 703265.420 5...</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>4803</td>\n      <td>2021A00034803</td>\n      <td>Division No.  3</td>\n      <td>CDR</td>\n      <td>13725.0719</td>\n      <td>48</td>\n      <td>720459.744611</td>\n      <td>1.401314e+10</td>\n      <td>POLYGON ((565857.674 5580957.780, 569640.425 5...</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4804</td>\n      <td>2021A00034804</td>\n      <td>Division No.  4</td>\n      <td>CDR</td>\n      <td>21055.2056</td>\n      <td>48</td>\n      <td>744593.529088</td>\n      <td>2.225920e+10</td>\n      <td>POLYGON ((772971.984 5791887.223, 772996.565 5...</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>4805</td>\n      <td>2021A00034805</td>\n      <td>Division No.  5</td>\n      <td>CDR</td>\n      <td>16651.2279</td>\n      <td>48</td>\n      <td>848683.053145</td>\n      <td>1.711136e+10</td>\n      <td>POLYGON ((604596.201 5754808.983, 604596.219 5...</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n<!-- \nshow the geometry type of the data\n\n::: {.cell execution_count=21}\n``` {.python .cell-code}\ngdf.geom_type.unique()\n```\n\n::: {.cell-output .cell-output-display execution_count=21}\n```\narray(['Polygon'], dtype=object)\n```\n:::\n:::\n\n\n -->\n\n\nplot the data using `geopandas`\n\n::: {.cell execution_count=22}\n``` {.python .cell-code}\ngdf.boundary.plot()\n#add additional info to plot\nplt.title('Alberta Mapping')\nplt.xlabel('Longitude')\nplt.ylabel('Latitude')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-23-output-1.png){}\n:::\n:::\n\n\n## Read Canada\n\n::: {.cell execution_count=23}\n``` {.python .cell-code}\n# shapefiles = glob.glob('OilSandsLandCover2020.gdb/')\nshapefiles = glob.glob('lpr_000b21f_e/lpr_000b21f_e.gdb/')\nshapefiles\n```\n\n::: {.cell-output .cell-output-display execution_count=23}\n```\n['lpr_000b21f_e/lpr_000b21f_e.gdb/']\n```\n:::\n:::\n\n\nReading the all the `.shp` files using `geopandas`.\n\n::: {.cell execution_count=24}\n``` {.python .cell-code}\ngdf = pd.concat([\n    gpd.read_file(shp)\n    for shp in shapefiles\n]).pipe(gpd.GeoDataFrame)\ngdf.crs\n```\n\n::: {.cell-output .cell-output-display execution_count=24}\n```\n<Derived Projected CRS: PROJCS[\"NAD83_Statistics_Canada_Lambert\",GEOGCS[\"N ...>\nName: NAD83_Statistics_Canada_Lambert\nAxis Info [cartesian]:\n- [east]: Easting (metre)\n- [north]: Northing (metre)\nArea of Use:\n- undefined\nCoordinate Operation:\n- name: unnamed\n- method: Lambert Conic Conformal (2SP)\nDatum: North American Datum 1983\n- Ellipsoid: Geodetic_Reference_System_of_1980\n- Prime Meridian: Greenwich\n```\n:::\n:::\n\n\n::: {.cell execution_count=25}\n``` {.python .cell-code}\n# show columns\ngdf.columns\n```\n\n::: {.cell-output .cell-output-display execution_count=25}\n```\nIndex(['PRUID', 'DGUID', 'PRNAME', 'PRENAME', 'PRFNAME', 'PREABBR', 'PRFABBR',\n       'LANDAREA', 'geometry'],\n      dtype='object')\n```\n:::\n:::\n\n\nhead of the data\n\n::: {.cell execution_count=26}\n``` {.python .cell-code}\ngdf.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=26}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PRUID</th>\n      <th>DGUID</th>\n      <th>PRNAME</th>\n      <th>PRENAME</th>\n      <th>PRFNAME</th>\n      <th>PREABBR</th>\n      <th>PRFABBR</th>\n      <th>LANDAREA</th>\n      <th>geometry</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>10</td>\n      <td>2021A000210</td>\n      <td>Newfoundland and Labrador / Terre-Neuve-et-Lab...</td>\n      <td>Newfoundland and Labrador</td>\n      <td>Terre-Neuve-et-Labrador</td>\n      <td>N.L.</td>\n      <td>T.-N.-L.</td>\n      <td>3.581704e+05</td>\n      <td>MULTIPOLYGON (((8841194.729 2213093.663, 88411...</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>11</td>\n      <td>2021A000211</td>\n      <td>Prince Edward Island / Île-du-Prince-Édouard</td>\n      <td>Prince Edward Island</td>\n      <td>Île-du-Prince-Édouard</td>\n      <td>P.E.I.</td>\n      <td>Î.-P.-É.</td>\n      <td>5.681179e+03</td>\n      <td>MULTIPOLYGON (((8374335.443 1629502.597, 83743...</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>12</td>\n      <td>2021A000212</td>\n      <td>Nova Scotia / Nouvelle-Écosse</td>\n      <td>Nova Scotia</td>\n      <td>Nouvelle-Écosse</td>\n      <td>N.S.</td>\n      <td>N.-É.</td>\n      <td>5.282471e+04</td>\n      <td>MULTIPOLYGON (((8310463.217 1250722.263, 83104...</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>13</td>\n      <td>2021A000213</td>\n      <td>New Brunswick / Nouveau-Brunswick</td>\n      <td>New Brunswick</td>\n      <td>Nouveau-Brunswick</td>\n      <td>N.B.</td>\n      <td>N.-B.</td>\n      <td>7.124850e+04</td>\n      <td>MULTIPOLYGON (((7964100.720 1576822.289, 79641...</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>24</td>\n      <td>2021A000224</td>\n      <td>Quebec / Québec</td>\n      <td>Quebec</td>\n      <td>Québec</td>\n      <td>Que.</td>\n      <td>Qc</td>\n      <td>1.298600e+06</td>\n      <td>MULTIPOLYGON (((6948393.211 2760814.626, 69483...</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n<!-- \nshow the geometry type of the data\n\n::: {.cell execution_count=27}\n``` {.python .cell-code}\ngdf.geom_type.unique()\n```\n\n::: {.cell-output .cell-output-display execution_count=27}\n```\narray(['MultiPolygon'], dtype=object)\n```\n:::\n:::\n\n\n -->\n\n\nplot the data using `geopandas`\n\n::: {.cell execution_count=28}\n``` {.python .cell-code}\ngdf.boundary.plot()\n#add additional info to plot\nplt.title('Alberta Mapping')\nplt.xlabel('Longitude')\nplt.ylabel('Latitude')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-29-output-1.png){}\n:::\n:::\n\n\n<!-- \n\n## Read Alberta Data\n\n::: {.cell execution_count=29}\n``` {.python .cell-code}\nshapefiles = glob.glob('alberta/*.shp')\nshapefiles\n```\n\n::: {.cell-output .cell-output-display execution_count=29}\n```\n['alberta\\\\lpr_000b21a_e.shp']\n```\n:::\n:::\n\n\nReading the all the `.shp` files using `geopandas`.\n\n::: {.cell execution_count=30}\n``` {.python .cell-code}\ngdf = pd.concat([\n    gpd.read_file(shp)\n    for shp in shapefiles\n]).pipe(gpd.GeoDataFrame)\n```\n:::\n\n\nhead of the data\n\n::: {.cell execution_count=31}\n``` {.python .cell-code}\ngdf.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=31}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PRUID</th>\n      <th>DGUID</th>\n      <th>PRNAME</th>\n      <th>PRENAME</th>\n      <th>PRFNAME</th>\n      <th>PREABBR</th>\n      <th>PRFABBR</th>\n      <th>LANDAREA</th>\n      <th>geometry</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>10</td>\n      <td>2021A000210</td>\n      <td>Newfoundland and Labrador / Terre-Neuve-et-Lab...</td>\n      <td>Newfoundland and Labrador</td>\n      <td>Terre-Neuve-et-Labrador</td>\n      <td>N.L.</td>\n      <td>T.-N.-L.</td>\n      <td>3.581704e+05</td>\n      <td>MULTIPOLYGON (((8841194.729 2213093.663, 88411...</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>11</td>\n      <td>2021A000211</td>\n      <td>Prince Edward Island / Île-du-Prince-Édouard</td>\n      <td>Prince Edward Island</td>\n      <td>Île-du-Prince-Édouard</td>\n      <td>P.E.I.</td>\n      <td>Î.-P.-É.</td>\n      <td>5.681179e+03</td>\n      <td>MULTIPOLYGON (((8374335.443 1629502.597, 83743...</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>12</td>\n      <td>2021A000212</td>\n      <td>Nova Scotia / Nouvelle-Écosse</td>\n      <td>Nova Scotia</td>\n      <td>Nouvelle-Écosse</td>\n      <td>N.S.</td>\n      <td>N.-É.</td>\n      <td>5.282471e+04</td>\n      <td>MULTIPOLYGON (((8310463.217 1250722.263, 83104...</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>13</td>\n      <td>2021A000213</td>\n      <td>New Brunswick / Nouveau-Brunswick</td>\n      <td>New Brunswick</td>\n      <td>Nouveau-Brunswick</td>\n      <td>N.B.</td>\n      <td>N.-B.</td>\n      <td>7.124850e+04</td>\n      <td>MULTIPOLYGON (((7964100.720 1576822.289, 79641...</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>24</td>\n      <td>2021A000224</td>\n      <td>Quebec / Québec</td>\n      <td>Quebec</td>\n      <td>Québec</td>\n      <td>Que.</td>\n      <td>Qc</td>\n      <td>1.298600e+06</td>\n      <td>MULTIPOLYGON (((6948393.211 2760814.626, 69483...</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=32}\n``` {.python .cell-code}\ngdf.PRNAME.unique()\n```\n\n::: {.cell-output .cell-output-display execution_count=32}\n```\narray(['Newfoundland and Labrador / Terre-Neuve-et-Labrador',\n       'Prince Edward Island / Île-du-Prince-Édouard',\n       'Nova Scotia / Nouvelle-Écosse',\n       'New Brunswick / Nouveau-Brunswick', 'Quebec / Québec', 'Ontario',\n       'Manitoba', 'Saskatchewan', 'Alberta',\n       'British Columbia / Colombie-Britannique', 'Yukon',\n       'Northwest Territories / Territoires du Nord-Ouest', 'Nunavut'],\n      dtype=object)\n```\n:::\n:::\n\n\nfilter the data to only include the `Alberta` province\n\n::: {.cell execution_count=33}\n``` {.python .cell-code}\ngdf = gdf[gdf.PRNAME.isin(['Alberta'])]\n```\n:::\n\n\n::: {.cell execution_count=34}\n``` {.python .cell-code}\ngdf.geom_type.unique()\n```\n\n::: {.cell-output .cell-output-display execution_count=34}\n```\narray(['Polygon'], dtype=object)\n```\n:::\n:::\n\n\nfilter the data to only include the `MultiPolygon` geometry type\n\n::: {.cell execution_count=35}\n``` {.python .cell-code}\ngdf = gdf[gdf.geom_type.isin(['Polygon', 'MultiPolygon'])]\n```\n:::\n\n\nplot the data using `geopandas`\n\n::: {.cell execution_count=36}\n``` {.python .cell-code}\ngdf.plot()\n#add additional info to plot\nplt.title('Map of Alberta')\nplt.xlabel('Longitude')\nplt.ylabel('Latitude')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-37-output-1.png){}\n:::\n:::\n\n\n -->\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}