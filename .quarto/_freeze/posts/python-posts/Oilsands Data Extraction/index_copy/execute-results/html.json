{
  "hash": "d2391eed874ac9bb19f43766540cd186",
  "result": {
    "markdown": "---\ntitle: Downloading Alberta Oilsands Production Data using Python\nauthor: Farshad Tabasinejad\ndate: '2023-02-23'\ndate-modified: '2021-02-23'\ntoc: true\ndraft: true\ncategories:\n  - python\n  - web scraping\nimage: Oilsands_monthly_production_2010.png\nexecute:\n  cache: false\n  output: true\nformat:\n  html:\n    code-fold: false\n    code-tools: true\n    code-overflow: wrap\n    code-block-bg: true\n    code-block-border-left: '#31BAE9'\n    code-copy: hover\n    highlight: zenburn\n---\n\n# Disclaimer\n\nThis blog post is for educational purposes only. Any commercial use of the information provided in this blog post is prohibited. For more information about the AER copyright and permission to reproduce, please visit [AER Copyright and Disclaimer](https://www.aer.ca/copyright-disclaimer).\nThe author is not responsible for any damage or loss caused by the use of the information provided in this blog post. \n\n# Introduction\n\nAlberta Energy Regulator (AER) lists the monthly injection and production data for all in-situ oilsands projects in Alberta on its website [Alberta Energy Regulator](https://www.aer.ca/). The data is available in several spreadsheets and can be downloaded from [ST53: Alberta In Situ Oil Sands Production Summary](https://www.aer.ca/providing-information/data-and-reports/statistical-reports/st53). The annual data are reported in separate files in **`.xls`** format. Each file has 6 different sheets with information about bitumen, water, steam, wells, SOR, and WSR.\n\nIn the following, It is shown how to download the data using Python. The entire source code can be downloaded by clicking on **`</>Code`** next to the blog title.\n\n## Downloading the Data\n\n`requests` and `BeautifulSoup` are used to download the xls files. The following code downloads all the xls files from the AER website and saves them in the current directory:\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport requests\nfrom bs4 import BeautifulSoup\n# get the html\nurl = 'https://www.aer.ca/providing-information/data-and-reports/statistical-reports/st53'\nr = requests.get(url)\ndata = r.text\n# parse the html\nsoup = BeautifulSoup(data, 'html.parser')\n# find all the links\nlinks = soup.findAll('a', href = True) \n# filter links for xls files\nxls_links = [link for link in links if link.get('href').endswith('xls')]\n# download the xls files and save them in the current directory\nfor link in xls_links:\n    xls_url = link.get('href')\n    xls_name = xls_url.split('/')[-1]\n    xls = requests.get(xls_url)\n    with open(xls_name, 'wb') as f:\n        f.write(xls.content)\n```\n:::\n\n\n## Listing all the saved xls files in the current directory:\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nimport os\n# filter only .xls files\nxls_files = [file for file in os.listdir(os.getcwd()) if file.endswith('.xls')]\nxls_files\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```\n['ST53_2010-12.xls',\n 'ST53_2011-12.xls',\n 'ST53_2012-12.xls',\n 'ST53_2013-12.xls',\n 'ST53_2014-12.xls',\n 'ST53_2016-12.xls',\n 'ST53_2017-12.xls',\n 'ST53_2018-12.xls',\n 'ST53_2019-12.xls',\n 'ST53_2020-12.xls',\n 'ST53_2021-12.xls',\n 'ST53_Current.xls']\n```\n:::\n:::\n\n\n## Reading the Data\n\nThe `.xls` format is supported by Pandas using the `xrld` engine. Therefore, we import the **xrld** library along pandas and numpy libraries:\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\nimport xlrd\nimport pandas as pd\nimport numpy as np\n```\n:::\n\n\nTo get a better understanding of each file, we can read the 2010 data file:\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\nsheets = pd.read_excel(xls_files[0], sheet_name = None, skiprows = 3)\nprint(f'sheet names: {sheets.keys()}')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nsheet names: dict_keys(['BITUMEN', 'WATER', 'STEAM', 'WELLS', 'SOR', 'WSR'])\n```\n:::\n:::\n\n\nThis file has 6 sheets. The first three rows of each sheet are not useful. Therefore, we can skip them using the `skiprows` argument. The last few rows of each sheet are also not useful. There are some footnote information that can be skipped. The total production/injection/number of wells are also reported at the end of the first 4 sheets (BITUMEN, WATER, STEAM, and WELLS). We can skip them as well since we do the aggregation ourselves. Monthly \"Conventional Bitumen Recovery\" data are also reported in the BITUMEN sheet. We can skip them as well since we are only interested in the in-situ oilsands data.\n\nThe SOR and WSR sheets have a different structure and should be handled separately. We will skip them for now.\n\nThe number of rows to skip is not the same for all the sheets. However, there is a shared column called __Recovery Method__ in the first 4 sheets (BITUMEN, WATER, STEAM, and WELLS) with an input string value, __Total__, in its last row. The row index of this cell can be used to remove all the rows below it in all 4 sheets. The following code finds the row index of the cell with the value __Total__ in the __Recovery Method__ column for the Bitumen sheet:\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\nbitumen = sheets['BITUMEN']\nbitumen.iloc[-15:-1, 0:5]\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Operator</th>\n      <th>Scheme Name</th>\n      <th>Area</th>\n      <th>Approval Number</th>\n      <th>Recovery Method</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>162</th>\n      <td>Koch Exploration Canada G/P Ltd. (ยน)</td>\n      <td>NaN</td>\n      <td>Cold Lake</td>\n      <td>9908D</td>\n      <td>Primary</td>\n    </tr>\n    <tr>\n      <th>163</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>Total</td>\n    </tr>\n    <tr>\n      <th>164</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>165</th>\n      <td>Conventional Bitumen Recovery</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>166</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>167</th>\n      <td>Total</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>168</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>169</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>170</th>\n      <td>Notes:</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>171</th>\n      <td>- Monthly production totals may be revised due...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>172</th>\n      <td>- Total may not add due to rounding</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>173</th>\n      <td>- Conventional Bitumen production consists of ...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>174</th>\n      <td>- Monthly average does not include months ther...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>175</th>\n      <td>ยน Amended this month</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\n# get the index of the last row using np.where\nlast_row_idx = np.where(bitumen[[\"Recovery Method\"]] == \"Total \")[0][0]\nlast_row_idx\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```\n163\n```\n:::\n:::\n\n\n::: {.cell tbl-font-size='12pt' execution_count=7}\n``` {.python .cell-code}\nbitumen = bitumen.iloc[0:last_row_idx,:]\nbitumen.iloc[-4:, 0:5]\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Operator</th>\n      <th>Scheme Name</th>\n      <th>Area</th>\n      <th>Approval Number</th>\n      <th>Recovery Method</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>159</th>\n      <td>Frog Lake Energy Resources Corp.</td>\n      <td>NaN</td>\n      <td>Cold Lake</td>\n      <td>9827B</td>\n      <td>Primary</td>\n    </tr>\n    <tr>\n      <th>160</th>\n      <td>Husky Oil Operations Limited</td>\n      <td>NaN</td>\n      <td>Cold Lake</td>\n      <td>9873</td>\n      <td>Primary</td>\n    </tr>\n    <tr>\n      <th>161</th>\n      <td>Canadian Natural Resources Limited</td>\n      <td>NaN</td>\n      <td>Athabasca</td>\n      <td>9884D</td>\n      <td>Primary</td>\n    </tr>\n    <tr>\n      <th>162</th>\n      <td>Koch Exploration Canada G/P Ltd. (ยน)</td>\n      <td>NaN</td>\n      <td>Cold Lake</td>\n      <td>9908D</td>\n      <td>Primary</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nGetting a summary statistics of monthly production data:\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\nbitumen.describe()\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Jan</th>\n      <th>Feb</th>\n      <th>Mar</th>\n      <th>Apr</th>\n      <th>May</th>\n      <th>Jun</th>\n      <th>Jul</th>\n      <th>Aug</th>\n      <th>Sep</th>\n      <th>Oct</th>\n      <th>Nov</th>\n      <th>Dec</th>\n      <th>Monthly Average</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>163.000000</td>\n      <td>163.000000</td>\n      <td>163.000000</td>\n      <td>162.000000</td>\n      <td>162.000000</td>\n      <td>159.000000</td>\n      <td>159.000000</td>\n      <td>159.000000</td>\n      <td>158.000000</td>\n      <td>156.000000</td>\n      <td>156.000000</td>\n      <td>153.000000</td>\n      <td>150.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>671.311840</td>\n      <td>713.568589</td>\n      <td>736.528160</td>\n      <td>719.761914</td>\n      <td>751.057407</td>\n      <td>770.060440</td>\n      <td>768.772013</td>\n      <td>762.359686</td>\n      <td>685.194494</td>\n      <td>761.591218</td>\n      <td>821.775385</td>\n      <td>849.108301</td>\n      <td>800.676533</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>2488.241673</td>\n      <td>2660.740849</td>\n      <td>2692.278391</td>\n      <td>2584.202061</td>\n      <td>2648.569375</td>\n      <td>2664.979209</td>\n      <td>2652.436071</td>\n      <td>2622.690639</td>\n      <td>2496.212516</td>\n      <td>2628.751620</td>\n      <td>2865.385297</td>\n      <td>2941.181627</td>\n      <td>2724.526904</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.670000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>3.110000</td>\n      <td>3.660000</td>\n      <td>3.315000</td>\n      <td>2.067500</td>\n      <td>2.892500</td>\n      <td>6.040000</td>\n      <td>6.455000</td>\n      <td>6.655000</td>\n      <td>8.417500</td>\n      <td>9.100000</td>\n      <td>8.837500</td>\n      <td>11.100000</td>\n      <td>11.470000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>39.570000</td>\n      <td>43.260000</td>\n      <td>51.980000</td>\n      <td>50.980000</td>\n      <td>55.885000</td>\n      <td>58.490000</td>\n      <td>50.490000</td>\n      <td>54.660000</td>\n      <td>55.860000</td>\n      <td>61.850000</td>\n      <td>60.265000</td>\n      <td>65.290000</td>\n      <td>69.835000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>254.340000</td>\n      <td>270.585000</td>\n      <td>254.895000</td>\n      <td>261.485000</td>\n      <td>264.015000</td>\n      <td>273.185000</td>\n      <td>271.265000</td>\n      <td>287.000000</td>\n      <td>282.972500</td>\n      <td>265.727500</td>\n      <td>275.777500</td>\n      <td>358.940000</td>\n      <td>315.000000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>23584.240000</td>\n      <td>24413.060000</td>\n      <td>23835.730000</td>\n      <td>23031.680000</td>\n      <td>22084.790000</td>\n      <td>22156.210000</td>\n      <td>22194.560000</td>\n      <td>22850.410000</td>\n      <td>21877.320000</td>\n      <td>23042.230000</td>\n      <td>23599.280000</td>\n      <td>23806.840000</td>\n      <td>23039.700000</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## Operators\n\nThe list of all operators in alphabetical order is obtained using the `sorted()` method:\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\noperators = sorted(bitumen.Operator.unique())\noperators\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```\n['Action Energy Inc.',\n 'Baytex Energy Ltd.',\n 'Baytex Energy Ltd. (ยน)',\n 'Baytex Energy Ltd. (ยนยฒ)',\n 'Bellatrix Exploration Ltd. (ยนยฒ)',\n 'Blackpearl Resources Inc. (ยน)',\n 'Bonavista Petroleum Ltd.',\n 'Bronco Energy Ltd.',\n 'Buffalo Resources Corp.',\n 'Canadian Natural Resources',\n 'Canadian Natural Resources Limited',\n 'Canadian Natural Resources Limited (ยน)',\n 'Canadian Natural Resources Limited (ยนยฒ)',\n 'Cenovus Energy Inc.',\n 'Cenovus Energy Inc. (ยน)',\n 'Cenovus FCCL Ltd.',\n 'Connacher Oil And Gas Limited',\n 'ConocoPhillips Canada Limited',\n 'ConocoPhillips Canada Resources Corp.',\n 'Crispin Energy Inc.',\n 'Devon Canada Corporation',\n 'Devon NEC Corporation (ยน)',\n 'ExxonMobil Canada Ltd.',\n 'Frog Lake Energy Resources Corp.',\n 'Harvest Operations Corp.',\n 'Husky Oil Operations Limited',\n 'Husky Oil Operations Limited (et Al)',\n 'Husky Oil Operations Limited (ยน)',\n 'Husky Oil Operations Ltd.',\n 'Imperial Oil Resources (ยน)',\n 'Japan Canada Oil Sands Limited (ยน)',\n 'Koch Exploration Canada G/P Ltd.',\n 'Koch Exploration Canada G/P Ltd. (ยน)',\n 'Manitok Exploration Inc.',\n 'Meg Energy Corp.',\n 'Murphy Oil Canada',\n 'Murphy Oil Company Ltd.',\n 'Nexen Inc.',\n 'North Peace Energy Corp.',\n 'Penn West Energy Trust',\n 'Penn West Petroleum Ltd.',\n 'Prosper Petroleum Ltd.',\n 'Shell Canada Energy',\n 'Shell Canada Limited',\n 'Solara Exploration Ltd.',\n 'Statoil Canada Ltd. (ยน)',\n 'Suncor Energy Inc.',\n 'Suncor Energy Inc. (ยน)',\n 'Sunshine Oilsands Ltd.',\n 'Total E&P Joslyn Ltd. (ยน)',\n 'Twin Butte Energy Ltd.',\n 'Watch Resources Ltd.']\n```\n:::\n:::\n\n\nSome operators names come with additional information in forms of superscript numbers in paranteses at the end of the name. These numbers and information are not useful for our analysis. Therefore, they should be removed:\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\noperators = [operator.split('(')[0].strip() for operator in operators]\noperators\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```\n['Action Energy Inc.',\n 'Baytex Energy Ltd.',\n 'Baytex Energy Ltd.',\n 'Baytex Energy Ltd.',\n 'Bellatrix Exploration Ltd.',\n 'Blackpearl Resources Inc.',\n 'Bonavista Petroleum Ltd.',\n 'Bronco Energy Ltd.',\n 'Buffalo Resources Corp.',\n 'Canadian Natural Resources',\n 'Canadian Natural Resources Limited',\n 'Canadian Natural Resources Limited',\n 'Canadian Natural Resources Limited',\n 'Cenovus Energy Inc.',\n 'Cenovus Energy Inc.',\n 'Cenovus FCCL Ltd.',\n 'Connacher Oil And Gas Limited',\n 'ConocoPhillips Canada Limited',\n 'ConocoPhillips Canada Resources Corp.',\n 'Crispin Energy Inc.',\n 'Devon Canada Corporation',\n 'Devon NEC Corporation',\n 'ExxonMobil Canada Ltd.',\n 'Frog Lake Energy Resources Corp.',\n 'Harvest Operations Corp.',\n 'Husky Oil Operations Limited',\n 'Husky Oil Operations Limited',\n 'Husky Oil Operations Limited',\n 'Husky Oil Operations Ltd.',\n 'Imperial Oil Resources',\n 'Japan Canada Oil Sands Limited',\n 'Koch Exploration Canada G/P Ltd.',\n 'Koch Exploration Canada G/P Ltd.',\n 'Manitok Exploration Inc.',\n 'Meg Energy Corp.',\n 'Murphy Oil Canada',\n 'Murphy Oil Company Ltd.',\n 'Nexen Inc.',\n 'North Peace Energy Corp.',\n 'Penn West Energy Trust',\n 'Penn West Petroleum Ltd.',\n 'Prosper Petroleum Ltd.',\n 'Shell Canada Energy',\n 'Shell Canada Limited',\n 'Solara Exploration Ltd.',\n 'Statoil Canada Ltd.',\n 'Suncor Energy Inc.',\n 'Suncor Energy Inc.',\n 'Sunshine Oilsands Ltd.',\n 'Total E&P Joslyn Ltd.',\n 'Twin Butte Energy Ltd.',\n 'Watch Resources Ltd.']\n```\n:::\n:::\n\n\nWe use `set()` to get a unique list of operators:\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\noperators = sorted([*set(operators)])\noperators\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```\n['Action Energy Inc.',\n 'Baytex Energy Ltd.',\n 'Bellatrix Exploration Ltd.',\n 'Blackpearl Resources Inc.',\n 'Bonavista Petroleum Ltd.',\n 'Bronco Energy Ltd.',\n 'Buffalo Resources Corp.',\n 'Canadian Natural Resources',\n 'Canadian Natural Resources Limited',\n 'Cenovus Energy Inc.',\n 'Cenovus FCCL Ltd.',\n 'Connacher Oil And Gas Limited',\n 'ConocoPhillips Canada Limited',\n 'ConocoPhillips Canada Resources Corp.',\n 'Crispin Energy Inc.',\n 'Devon Canada Corporation',\n 'Devon NEC Corporation',\n 'ExxonMobil Canada Ltd.',\n 'Frog Lake Energy Resources Corp.',\n 'Harvest Operations Corp.',\n 'Husky Oil Operations Limited',\n 'Husky Oil Operations Ltd.',\n 'Imperial Oil Resources',\n 'Japan Canada Oil Sands Limited',\n 'Koch Exploration Canada G/P Ltd.',\n 'Manitok Exploration Inc.',\n 'Meg Energy Corp.',\n 'Murphy Oil Canada',\n 'Murphy Oil Company Ltd.',\n 'Nexen Inc.',\n 'North Peace Energy Corp.',\n 'Penn West Energy Trust',\n 'Penn West Petroleum Ltd.',\n 'Prosper Petroleum Ltd.',\n 'Shell Canada Energy',\n 'Shell Canada Limited',\n 'Solara Exploration Ltd.',\n 'Statoil Canada Ltd.',\n 'Suncor Energy Inc.',\n 'Sunshine Oilsands Ltd.',\n 'Total E&P Joslyn Ltd.',\n 'Twin Butte Energy Ltd.',\n 'Watch Resources Ltd.']\n```\n:::\n:::\n\n\nThere are still some operators with similar names in the list. For example, ConocoPhillips Canada Resources Corp. and ConocoPhillips Canada Limited are the same company. In this scenario, we use one unique name for each company. The following dictionary is used to replace the names:\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\noperators_dict = {'Canadian Natural Resources': 'CNRL',\n                  'Canadian Natural Resources Limited': 'CNRL',\n                  'Cenovus Energy Inc.': 'Cenovus',\n                  'Cenovus FCCL Ltd.': 'Cenovus',\n                  'ConocoPhillips Canada Resources Corp.': 'ConocoPhillips',\n                  'ConocoPhillips Canada Limited': 'ConocoPhillips',\n                  'Devon Canada Corporation': 'Devon',\n                  'Devon NEC Corporation': 'Devon',\n                  'ExxonMobil Canada Ltd.': 'Imperial Oil',\n                  'Imperial Oil Resources': 'Imperial Oil',\n                  'Murphy Oil Canada': 'Murphy Oil',\n                  'Murphy Oil Company Ltd.': 'Murphy Oil',\n                  'Penn West Energy Trust': 'Penn West',\n                  'Penn West Petroleum Ltd.': 'Penn West',\n                  'Shell Canada Energy': 'Shell',\n                  'Shell Canada Limited': 'Shell'\n                  }\n```\n:::\n\n\nIn the next section we use the above dictionary to replace the names in the data frame. It is also noted that there has been a number of acquisitions and mergers in the oil and gas industry. For example, Nexen Inc. was acquired by CNOOC in 2013 and Husky Energy Inc. was acquired by Cenovus Energy Inc. in 2019. However, we ignore these changes for the sake of simplicity.\n\n## Applying all the changes to the data frame with chain operations:\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\nbitumen = (bitumen\n            .dropna(subset = ['Operator'])\n            .assign(Operator = lambda x: x.Operator.str.split('(').str[0].str.strip())\n            .assign(Operator = lambda x: x.Operator.str.replace('  ', ' '))\n            .replace({'Operator': operators_dict})\n)\n\nbitumen.Operator\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n```\n0                                  CNRL\n1                                  CNRL\n2                    Baytex Energy Ltd.\n3              North Peace Energy Corp.\n4                             Penn West\n                     ...               \n158                               Devon\n159    Frog Lake Energy Resources Corp.\n160        Husky Oil Operations Limited\n161                                CNRL\n162    Koch Exploration Canada G/P Ltd.\nName: Operator, Length: 163, dtype: object\n```\n:::\n:::\n\n\nLet's print out the list of unique operators in the data frame:\n\n::: {.cell execution_count=14}\n``` {.python .cell-code}\n# remove duplicates\noperators = sorted([*set(bitumen.Operator)])\noperators\n```\n\n::: {.cell-output .cell-output-display execution_count=14}\n```\n['Action Energy Inc.',\n 'Baytex Energy Ltd.',\n 'Bellatrix Exploration Ltd.',\n 'Blackpearl Resources Inc.',\n 'Bonavista Petroleum Ltd.',\n 'Bronco Energy Ltd.',\n 'Buffalo Resources Corp.',\n 'CNRL',\n 'Cenovus',\n 'Connacher Oil And Gas Limited',\n 'ConocoPhillips',\n 'Crispin Energy Inc.',\n 'Devon',\n 'Frog Lake Energy Resources Corp.',\n 'Harvest Operations Corp.',\n 'Husky Oil Operations Limited',\n 'Husky Oil Operations Ltd.',\n 'Imperial Oil',\n 'Japan Canada Oil Sands Limited',\n 'Koch Exploration Canada G/P Ltd.',\n 'Manitok Exploration Inc.',\n 'Meg Energy Corp.',\n 'Murphy Oil',\n 'Nexen Inc.',\n 'North Peace Energy Corp.',\n 'Penn West',\n 'Prosper Petroleum Ltd.',\n 'Shell',\n 'Solara Exploration Ltd.',\n 'Statoil Canada Ltd.',\n 'Suncor Energy Inc.',\n 'Sunshine Oilsands Ltd.',\n 'Total E&P Joslyn Ltd.',\n 'Twin Butte Energy Ltd.',\n 'Watch Resources Ltd.']\n```\n:::\n:::\n\n\n## Merging rows with the same operator\n\nLet's take a look at the first few rows of the data frame:\n\n::: {.cell execution_count=15}\n``` {.python .cell-code}\nbitumen.iloc[0:5, 0:5]\n```\n\n::: {.cell-output .cell-output-display execution_count=15}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Operator</th>\n      <th>Scheme Name</th>\n      <th>Area</th>\n      <th>Approval Number</th>\n      <th>Recovery Method</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>CNRL</td>\n      <td>NaN</td>\n      <td>Cold Lake</td>\n      <td>4746P</td>\n      <td>Commercial</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>CNRL</td>\n      <td>NaN</td>\n      <td>Cold Lake</td>\n      <td>6726I</td>\n      <td>Commercial</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Baytex Energy Ltd.</td>\n      <td>Cliffdale Pilot</td>\n      <td>Peace River Area 2</td>\n      <td>11034E</td>\n      <td>Commercial-CSS</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>North Peace Energy Corp.</td>\n      <td>Red Earth</td>\n      <td>Peace River Area 2</td>\n      <td>11209A</td>\n      <td>Commercial-CSS</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Penn West</td>\n      <td>Seal</td>\n      <td>Peace River Area 2</td>\n      <td>11377A</td>\n      <td>Commercial-CSS</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nResults show the data frame has multiple rows for some operators. These operators are active in different regions of the province. The `Area` column shows the region of the operator. To get the cumulative production for each operator, we need to merge the rows with the same operator name.\nRows with the same operator name are merged into one row using the `groupby()` method. It groups rows with the same value in the specified column. The `sum()` method is used to sum the values in the other columns. The `reset_index()` method is used to reset the index of the data frame.\n\n::: {.cell execution_count=16}\n``` {.python .cell-code}\nbitumen = bitumen.groupby('Operator').sum().reset_index()\nbitumen.iloc[0:5, 0:5]\n```\n\n::: {.cell-output .cell-output-display execution_count=16}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Operator</th>\n      <th>Jan</th>\n      <th>Feb</th>\n      <th>Mar</th>\n      <th>Apr</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Action Energy Inc.</td>\n      <td>2.75</td>\n      <td>3.13</td>\n      <td>3.10</td>\n      <td>2.40</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Baytex Energy Ltd.</td>\n      <td>1329.74</td>\n      <td>1328.52</td>\n      <td>1521.26</td>\n      <td>1265.24</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Bellatrix Exploration Ltd.</td>\n      <td>0.00</td>\n      <td>0.00</td>\n      <td>0.00</td>\n      <td>0.00</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Blackpearl Resources Inc.</td>\n      <td>1.34</td>\n      <td>3.32</td>\n      <td>1.43</td>\n      <td>0.69</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Bonavista Petroleum Ltd.</td>\n      <td>318.60</td>\n      <td>296.70</td>\n      <td>287.84</td>\n      <td>268.92</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nWe also add the production year to the dataframe as a new column:\n\n::: {.cell execution_count=17}\n``` {.python .cell-code}\nbitumen['Year'] = xls_files[0].split('_')[-1].split('-')[0]\nbitumen.iloc[0:5, 0:5]\n```\n\n::: {.cell-output .cell-output-display execution_count=17}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Operator</th>\n      <th>Jan</th>\n      <th>Feb</th>\n      <th>Mar</th>\n      <th>Apr</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Action Energy Inc.</td>\n      <td>2.75</td>\n      <td>3.13</td>\n      <td>3.10</td>\n      <td>2.40</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Baytex Energy Ltd.</td>\n      <td>1329.74</td>\n      <td>1328.52</td>\n      <td>1521.26</td>\n      <td>1265.24</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Bellatrix Exploration Ltd.</td>\n      <td>0.00</td>\n      <td>0.00</td>\n      <td>0.00</td>\n      <td>0.00</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Blackpearl Resources Inc.</td>\n      <td>1.34</td>\n      <td>3.32</td>\n      <td>1.43</td>\n      <td>0.69</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Bonavista Petroleum Ltd.</td>\n      <td>318.60</td>\n      <td>296.70</td>\n      <td>287.84</td>\n      <td>268.92</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## Choosing the top 5 producers in 2010\n\nWe first calculate the annual production for each company and then sort the data frame by the total bitumen production in descending order and select the first 5 rows:\n\n::: {.cell execution_count=18}\n``` {.python .cell-code}\nbitumen['Total'] = bitumen.loc[:,\"Jan\":\"Dec\"].sum(axis = 1)\n```\n:::\n\n\n::: {.cell execution_count=19}\n``` {.python .cell-code}\n# select the 5 largest producers\ntop5 = bitumen.sort_values(by = 'Total', ascending = False).head(5)\ntop5.iloc[:,-5:]\n```\n\n::: {.cell-output .cell-output-display execution_count=19}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Nov</th>\n      <th>Dec</th>\n      <th>Monthly Average</th>\n      <th>Year</th>\n      <th>Total</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>7</th>\n      <td>32006.40</td>\n      <td>33009.93</td>\n      <td>28316.22</td>\n      <td>2010</td>\n      <td>338065.64</td>\n    </tr>\n    <tr>\n      <th>17</th>\n      <td>23701.99</td>\n      <td>23956.75</td>\n      <td>23159.13</td>\n      <td>2010</td>\n      <td>277909.48</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>22587.47</td>\n      <td>22853.46</td>\n      <td>22244.04</td>\n      <td>2010</td>\n      <td>266928.43</td>\n    </tr>\n    <tr>\n      <th>30</th>\n      <td>14212.22</td>\n      <td>13935.72</td>\n      <td>13522.57</td>\n      <td>2010</td>\n      <td>162270.74</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>9785.62</td>\n      <td>9882.21</td>\n      <td>9644.97</td>\n      <td>2010</td>\n      <td>115733.90</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## Plotting monthly bitumen production for the 5 largest producers\n\n::: {.cell execution_count=20}\n``` {.python .cell-code}\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n```\n:::\n\n\n::: {.cell execution_count=21}\n``` {.python .cell-code}\n# plot monthly bitumen production for the 5 largest producers\nplt.figure(figsize = (9, 6))\nsns.lineplot(data = top5.loc[:,\"Jan\":\"Dec\"].T, dashes = False)\nplt.legend(top5.Operator)\nplt.title('Monthly Bitumen Production for the 5 Largest Producers in 2010')\nplt.xlabel('Month')\nplt.ylabel('Bitumen Production (m3)')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_copy_files/figure-html/cell-22-output-1.png){}\n:::\n:::\n\n\n",
    "supporting": [
      "index_copy_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}