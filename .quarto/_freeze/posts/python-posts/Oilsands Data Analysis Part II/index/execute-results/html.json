{
  "hash": "ea40f0ba48691257993c702630533024",
  "result": {
    "markdown": "---\ntitle: Alberta In-situ Oilsands Production Analysis using Python - Part II\nsubtitle: Preparing a tidy dataset for data analysis and visualization\nauthor: Farshad Tabasinejad\ndate: '2023-03-04'\ntoc: true\ndraft: false\ncategories:\n  - python\n  - pandas\n  - data analysis\n  - data visualization\nimage: top_ten_largest_ever.png\nexecute:\n  cache: false\n  output: true\nformat:\n  html:\n    code-fold: false\n    code-tools: false\n    code-overflow: wrap\n    code-block-bg: true\n    code-block-border-left: '#31BAE9'\n    code-copy: hover\n    highlight: zenburn\n---\n\n# Disclaimer\n\nThis blog post is for educational purposes only. Any commercial use of the information provided in this blog post is prohibited. For more information about the AER copyright and permission to reproduce, please visit [AER Copyright and Disclaimer](https://www.aer.ca/copyright-disclaimer).\nThe author is not responsible for any damage or loss caused by the use of the information provided in this blog post. \n\n# Introduction\n\nThis blog post focuses on analyzing the bitumen production data from in-situ oilsands projects in Alberta. Alberta Energy Regulator (AER) lists the monthly injection and production data for all in-situ oilsands projects in Alberta on its website [Alberta Energy Regulator](https://www.aer.ca/). The data is available in several spreadsheets and can be downloaded from [ST53: Alberta In Situ Oil Sands Production Summary](https://www.aer.ca/providing-information/data-and-reports/statistical-reports/st53). The annual data are reported in separate files in .xls format. Each file has 6 different sheets with the following information: bitumen production, water usage, steam injection, well count, steam-to-oil ratio (SOR), and water-to-oil ratio (WSR).\n\nIn the previous post [Downloading Alberta Oilsands Production Data using Python](), I have shown how to download the data using python. In this post we create a tidy bitumen dataset for data analysis and visualization.\n\n# Loading the Data\n\nAll files are stored in the current local directory. We use the `glob` module to list all `.xls` files in the directory and then use `pandas` to read the data into a `DataFrame`. The `xlrd` is used as an engine in pandas to read the `.xls` files. The `numpy` module is used to perform mathematical operations on the data. The `warnings` module is used to suppress the warnings.\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport glob\nimport pandas as pd\nimport numpy as np\nimport xlrd\nimport warnings\nwarnings.filterwarnings('ignore')\n```\n:::\n\n\nThe `glob` module is used in this code to create a list of file paths for all the .xls files in the current directory.\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nxls_files = glob.glob('*.xls')\nxls_files\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```\n['ST53_2010-12.xls',\n 'ST53_2011-12.xls',\n 'ST53_2012-12.xls',\n 'ST53_2013-12.xls',\n 'ST53_2014-12.xls',\n 'ST53_2016-12.xls',\n 'ST53_2017-12.xls',\n 'ST53_2018-12.xls',\n 'ST53_2019-12.xls',\n 'ST53_2020-12.xls',\n 'ST53_2021-12.xls',\n 'ST53_2022-12.xls']\n```\n:::\n:::\n\n\n# Analyzing the 2010 bitumen production data\nThis section describes the steps for creating a tidy dataset for bitumen production using the 2010 data.\n\n## Reading the first file\n\nTo start, we read the data from the `ST53_2010.xls` file using the `read_excel` function from the pandas library. We set the `sheet_name` argument to `None` to read all the sheets in the file. We also use the `skiprows` argument to skip the first three rows of each sheet. Finally, we use the `keys()` method to print the names of the sheets in the file.\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\nsheets = pd.read_excel(xls_files[0], sheet_name = None, skiprows = 3)\nprint(f'sheet names: {sheets.keys()}')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nsheet names: dict_keys(['BITUMEN', 'WATER', 'STEAM', 'WELLS', 'SOR', 'WSR'])\n```\n:::\n:::\n\n\n## Reading the BITUMEN sheet\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\n# read the BITUMEN sheet\nbitumen_2010 = sheets['BITUMEN']\n```\n:::\n\n\nThe `info` method is used to print the column names and data types of each column in the DataFrame.\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\nbitumen_2010.info()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 177 entries, 0 to 176\nData columns (total 18 columns):\n #   Column           Non-Null Count  Dtype  \n---  ------           --------------  -----  \n 0   Operator         172 non-null    object \n 1   Scheme Name      26 non-null     object \n 2   Area             163 non-null    object \n 3   Approval Number  163 non-null    object \n 4   Recovery Method  164 non-null    object \n 5   Jan              166 non-null    float64\n 6   Feb              166 non-null    float64\n 7   Mar              166 non-null    float64\n 8   Apr              165 non-null    float64\n 9   May              165 non-null    float64\n 10  Jun              162 non-null    float64\n 11  Jul              162 non-null    float64\n 12  Aug              162 non-null    float64\n 13  Sep              161 non-null    float64\n 14  Oct              159 non-null    float64\n 15  Nov              159 non-null    float64\n 16  Dec              156 non-null    float64\n 17  Monthly Average  153 non-null    float64\ndtypes: float64(13), object(5)\nmemory usage: 25.0+ KB\n```\n:::\n:::\n\n\nThe `head` method is used to display the first 5 rows of the `DataFrame`.\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\nbitumen_2010.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Operator</th>\n      <th>Scheme Name</th>\n      <th>Area</th>\n      <th>Approval Number</th>\n      <th>Recovery Method</th>\n      <th>Jan</th>\n      <th>Feb</th>\n      <th>Mar</th>\n      <th>Apr</th>\n      <th>May</th>\n      <th>Jun</th>\n      <th>Jul</th>\n      <th>Aug</th>\n      <th>Sep</th>\n      <th>Oct</th>\n      <th>Nov</th>\n      <th>Dec</th>\n      <th>Monthly Average</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Canadian Natural Resources Limited</td>\n      <td>NaN</td>\n      <td>Cold Lake</td>\n      <td>4746P</td>\n      <td>Commercial</td>\n      <td>587.48</td>\n      <td>596.72</td>\n      <td>637.59</td>\n      <td>678.74</td>\n      <td>705.61</td>\n      <td>718.99</td>\n      <td>697.25</td>\n      <td>696.88</td>\n      <td>763.21</td>\n      <td>702.21</td>\n      <td>696.32</td>\n      <td>674.99</td>\n      <td>679.67</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Canadian Natural Resources Limited</td>\n      <td>NaN</td>\n      <td>Cold Lake</td>\n      <td>6726I</td>\n      <td>Commercial</td>\n      <td>171.54</td>\n      <td>193.66</td>\n      <td>187.71</td>\n      <td>177.54</td>\n      <td>176.90</td>\n      <td>174.50</td>\n      <td>160.53</td>\n      <td>155.97</td>\n      <td>168.22</td>\n      <td>168.27</td>\n      <td>139.73</td>\n      <td>143.48</td>\n      <td>168.17</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Baytex Energy Ltd. (ยน)</td>\n      <td>Cliffdale Pilot</td>\n      <td>Peace River Area 2</td>\n      <td>11034E</td>\n      <td>Commercial-CSS</td>\n      <td>0.00</td>\n      <td>2.55</td>\n      <td>6.15</td>\n      <td>2.25</td>\n      <td>4.16</td>\n      <td>10.59</td>\n      <td>5.83</td>\n      <td>3.27</td>\n      <td>9.18</td>\n      <td>20.09</td>\n      <td>15.42</td>\n      <td>13.15</td>\n      <td>8.42</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>North Peace Energy Corp.</td>\n      <td>Red Earth</td>\n      <td>Peace River Area 2</td>\n      <td>11209A</td>\n      <td>Commercial-CSS</td>\n      <td>10.30</td>\n      <td>4.70</td>\n      <td>3.11</td>\n      <td>2.21</td>\n      <td>1.63</td>\n      <td>0.51</td>\n      <td>0.00</td>\n      <td>0.00</td>\n      <td>0.40</td>\n      <td>0.00</td>\n      <td>0.00</td>\n      <td>0.00</td>\n      <td>3.27</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Penn West Petroleum Ltd.</td>\n      <td>Seal</td>\n      <td>Peace River Area 2</td>\n      <td>11377A</td>\n      <td>Commercial-CSS</td>\n      <td>0.00</td>\n      <td>0.00</td>\n      <td>0.00</td>\n      <td>0.00</td>\n      <td>0.00</td>\n      <td>0.00</td>\n      <td>0.00</td>\n      <td>0.00</td>\n      <td>0.00</td>\n      <td>0.00</td>\n      <td>0.00</td>\n      <td>0.00</td>\n      <td>NaN</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nThe `tail` method is used to print the last 20 rows of the `DataFrame`.\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\nbitumen_2010.tail(20)\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Operator</th>\n      <th>Scheme Name</th>\n      <th>Area</th>\n      <th>Approval Number</th>\n      <th>Recovery Method</th>\n      <th>Jan</th>\n      <th>Feb</th>\n      <th>Mar</th>\n      <th>Apr</th>\n      <th>May</th>\n      <th>Jun</th>\n      <th>Jul</th>\n      <th>Aug</th>\n      <th>Sep</th>\n      <th>Oct</th>\n      <th>Nov</th>\n      <th>Dec</th>\n      <th>Monthly Average</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>157</th>\n      <td>Bronco Energy Ltd.</td>\n      <td>NaN</td>\n      <td>Athabasca</td>\n      <td>9774E</td>\n      <td>Primary</td>\n      <td>28.65</td>\n      <td>28.58</td>\n      <td>27.94</td>\n      <td>22.84</td>\n      <td>91.39</td>\n      <td>80.23</td>\n      <td>77.59</td>\n      <td>83.21</td>\n      <td>64.28</td>\n      <td>74.45</td>\n      <td>69.66</td>\n      <td>63.98</td>\n      <td>59.40</td>\n    </tr>\n    <tr>\n      <th>158</th>\n      <td>Devon Canada Corporation</td>\n      <td>NaN</td>\n      <td>Cold Lake</td>\n      <td>9821</td>\n      <td>Primary</td>\n      <td>4.00</td>\n      <td>3.41</td>\n      <td>3.42</td>\n      <td>0.00</td>\n      <td>1.87</td>\n      <td>0.00</td>\n      <td>1.74</td>\n      <td>1.04</td>\n      <td>4.18</td>\n      <td>4.09</td>\n      <td>1.94</td>\n      <td>2.76</td>\n      <td>2.85</td>\n    </tr>\n    <tr>\n      <th>159</th>\n      <td>Frog Lake Energy Resources Corp.</td>\n      <td>NaN</td>\n      <td>Cold Lake</td>\n      <td>9827B</td>\n      <td>Primary</td>\n      <td>11.42</td>\n      <td>5.22</td>\n      <td>5.11</td>\n      <td>8.76</td>\n      <td>12.08</td>\n      <td>16.21</td>\n      <td>13.78</td>\n      <td>11.12</td>\n      <td>17.36</td>\n      <td>18.75</td>\n      <td>19.41</td>\n      <td>22.18</td>\n      <td>13.45</td>\n    </tr>\n    <tr>\n      <th>160</th>\n      <td>Husky Oil Operations Limited</td>\n      <td>NaN</td>\n      <td>Cold Lake</td>\n      <td>9873</td>\n      <td>Primary</td>\n      <td>12.32</td>\n      <td>12.80</td>\n      <td>12.66</td>\n      <td>11.27</td>\n      <td>12.93</td>\n      <td>11.56</td>\n      <td>11.63</td>\n      <td>11.27</td>\n      <td>10.62</td>\n      <td>10.79</td>\n      <td>11.50</td>\n      <td>10.50</td>\n      <td>11.65</td>\n    </tr>\n    <tr>\n      <th>161</th>\n      <td>Canadian Natural Resources Limited</td>\n      <td>NaN</td>\n      <td>Athabasca</td>\n      <td>9884D</td>\n      <td>Primary</td>\n      <td>65.64</td>\n      <td>68.55</td>\n      <td>69.79</td>\n      <td>64.72</td>\n      <td>68.09</td>\n      <td>64.18</td>\n      <td>63.37</td>\n      <td>66.10</td>\n      <td>64.25</td>\n      <td>62.55</td>\n      <td>59.87</td>\n      <td>55.29</td>\n      <td>64.37</td>\n    </tr>\n    <tr>\n      <th>162</th>\n      <td>Koch Exploration Canada G/P Ltd. (ยน)</td>\n      <td>NaN</td>\n      <td>Cold Lake</td>\n      <td>9908D</td>\n      <td>Primary</td>\n      <td>0.00</td>\n      <td>0.00</td>\n      <td>0.00</td>\n      <td>0.00</td>\n      <td>0.00</td>\n      <td>0.00</td>\n      <td>0.00</td>\n      <td>0.00</td>\n      <td>0.00</td>\n      <td>0.00</td>\n      <td>0.00</td>\n      <td>0.00</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>163</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>Total</td>\n      <td>109423.83</td>\n      <td>116311.68</td>\n      <td>120054.09</td>\n      <td>116601.43</td>\n      <td>121671.30</td>\n      <td>122439.61</td>\n      <td>122234.75</td>\n      <td>121215.19</td>\n      <td>108260.73</td>\n      <td>118808.23</td>\n      <td>128196.96</td>\n      <td>129913.57</td>\n      <td>119594.28</td>\n    </tr>\n    <tr>\n      <th>164</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>165</th>\n      <td>Conventional Bitumen Recovery</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>537.49</td>\n      <td>544.67</td>\n      <td>560.36</td>\n      <td>541.87</td>\n      <td>560.71</td>\n      <td>524.96</td>\n      <td>482.84</td>\n      <td>555.27</td>\n      <td>555.21</td>\n      <td>545.33</td>\n      <td>601.13</td>\n      <td>593.86</td>\n      <td>550.31</td>\n    </tr>\n    <tr>\n      <th>166</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>167</th>\n      <td>Total</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>109961.32</td>\n      <td>116856.35</td>\n      <td>120614.45</td>\n      <td>117143.30</td>\n      <td>122232.01</td>\n      <td>122964.57</td>\n      <td>122717.59</td>\n      <td>121770.46</td>\n      <td>108815.94</td>\n      <td>119353.56</td>\n      <td>128798.09</td>\n      <td>130507.43</td>\n      <td>120144.59</td>\n    </tr>\n    <tr>\n      <th>168</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>169</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>170</th>\n      <td>Notes:</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>171</th>\n      <td>- Monthly production totals may be revised due...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>172</th>\n      <td>- Total may not add due to rounding</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>173</th>\n      <td>- Conventional Bitumen production consists of ...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>174</th>\n      <td>- Monthly average does not include months ther...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>175</th>\n      <td>ยน Amended this month</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>176</th>\n      <td>ยน Amended this month</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nSince the number of producers in the file can vary, we cannot rely on a fixed index number to subset the dataset. However, the last row of the dataset always contains a summary of the total production, which is identified by the cell value of __Total__ in the `Recovery Method` column. Therefore, we can use the index number of the row with __Total__ in the Recovery Method column to subset the dataset and exclude the summary row and any other rows with additional information.\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\n# get the index of the last row using np.where\nlast_row_idx = np.where(bitumen_2010[[\"Recovery Method\"]] == \"Total \")[0][0]\nbitumen_2010 = bitumen_2010.iloc[:last_row_idx, :]\n```\n:::\n\n\nIn addition, we can remove the `Monthly Average` column from the dataset since we will be aggregating the data in our analysis and therefore do not need the monthly averages.\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\nbitumen_2010 = bitumen_2010.drop(columns = ['Monthly Average'])\n```\n:::\n\n\n## Cleaning the Operator column\n\nLet's take a look at the `Operator` column.\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\nbitumen_2010['Operator'].unique()\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```\narray(['Canadian Natural Resources Limited', 'Baytex Energy Ltd. (ยน)',\n       'North Peace Energy Corp.', 'Penn West Petroleum Ltd.',\n       'Baytex Energy Ltd. (ยนยฒ)', 'Shell Canada Limited',\n       'Imperial Oil Resources (ยน)',\n       'Canadian Natural Resources Limited (ยน)',\n       'Devon NEC Corporation (ยน)', 'Connacher Oil And Gas Limited',\n       'Meg Energy Corp.', 'Statoil Canada Ltd. (ยน)',\n       'Cenovus Energy Inc.', 'Cenovus FCCL Ltd.', 'Suncor Energy Inc.',\n       'Japan Canada Oil Sands Limited (ยน)', 'Suncor Energy Inc. (ยน)',\n       'Total E&P Joslyn Ltd. (ยน)',\n       'ConocoPhillips Canada Resources Corp.',\n       'ConocoPhillips Canada Limited', 'Nexen Inc.',\n       'Husky Oil Operations Limited', 'Canadian Natural Resources',\n       'Murphy Oil Company Ltd.', 'Cenovus Energy Inc. (ยน)',\n       'Prosper Petroleum Ltd.', 'Penn West Energy Trust',\n       'Baytex Energy Ltd.', 'Shell Canada Energy',\n       'Husky Oil Operations Ltd.', 'Action Energy Inc.',\n       'Devon Canada Corporation', 'Bonavista Petroleum Ltd.',\n       'Murphy Oil Canada', 'Watch Resources Ltd.',\n       'Manitok Exploration Inc.', 'Koch Exploration Canada G/P Ltd.',\n       'Husky Oil Operations Limited (et Al)', 'Twin Butte Energy Ltd.',\n       'Sunshine Oilsands Ltd.', 'Solara Exploration Ltd.',\n       'Canadian Natural Resources Limited (ยนยฒ)',\n       'Bellatrix Exploration Ltd. (ยนยฒ)', 'Blackpearl Resources Inc. (ยน)',\n       'Crispin Energy Inc.', 'Husky Oil Operations Limited (ยน)',\n       'Buffalo Resources Corp.', 'ExxonMobil Canada Ltd.',\n       'Harvest Operations Corp.', 'Bronco Energy Ltd.',\n       'Frog Lake Energy Resources Corp.',\n       'Koch Exploration Canada G/P Ltd. (ยน)'], dtype=object)\n```\n:::\n:::\n\n\nThe Operator column contains several names that are followed by `(subscripts)`. These additional pieces of information create inconsistencies in the `Operator` column and add unnecessary complexity to the dataset. Since they are not needed for our analysis, we can remove them using the `replace` method.\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\nbitumen_2010['Operator'] = bitumen_2010['Operator'].str.replace(r'\\(.*\\)', '').str.strip()\nbitumen_2010['Operator'].unique()\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```\narray(['Canadian Natural Resources Limited', 'Baytex Energy Ltd.',\n       'North Peace Energy Corp.', 'Penn West Petroleum Ltd.',\n       'Shell Canada Limited', 'Imperial Oil Resources',\n       'Devon NEC Corporation', 'Connacher Oil And Gas Limited',\n       'Meg Energy Corp.', 'Statoil Canada Ltd.', 'Cenovus Energy Inc.',\n       'Cenovus FCCL Ltd.', 'Suncor Energy Inc.',\n       'Japan Canada Oil Sands Limited', 'Total E&P Joslyn Ltd.',\n       'ConocoPhillips Canada Resources Corp.',\n       'ConocoPhillips Canada Limited', 'Nexen Inc.',\n       'Husky Oil Operations Limited', 'Canadian Natural Resources',\n       'Murphy Oil Company Ltd.', 'Prosper Petroleum Ltd.',\n       'Penn West Energy Trust', 'Shell Canada Energy',\n       'Husky Oil Operations Ltd.', 'Action Energy Inc.',\n       'Devon Canada Corporation', 'Bonavista Petroleum Ltd.',\n       'Murphy Oil Canada', 'Watch Resources Ltd.',\n       'Manitok Exploration Inc.', 'Koch Exploration Canada G/P Ltd.',\n       'Twin Butte Energy Ltd.', 'Sunshine Oilsands Ltd.',\n       'Solara Exploration Ltd.', 'Bellatrix Exploration Ltd.',\n       'Blackpearl Resources Inc.', 'Crispin Energy Inc.',\n       'Buffalo Resources Corp.', 'ExxonMobil Canada Ltd.',\n       'Harvest Operations Corp.', 'Bronco Energy Ltd.',\n       'Frog Lake Energy Resources Corp.'], dtype=object)\n```\n:::\n:::\n\n\nThe operator names in the dataset may contain inconsistencies where some operators are listed with different names. To make the names consistent, we can create a dictionary with the names to be replaced and the new names. However, it's important to note that the following dictionary may contain additional names that are not in the 2010 dataset. This dictionary was created using data from all the files between 2010 and 2022.\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\n# create a dictionary to make Operator names consistent\noperators_dict = {'Athabasca Oil Corporation': 'Athabasca Oil',\n                  'Baytex Energy Ltd.': 'Baytex',\n                  'Blackpearl Resources Inc.': 'BlackPearl',\n                  'BlackPearl Resources Inc.': 'BlackPearl',\n                  'Bonavista Petroleum Ltd.': 'Bonavista',\n                  'Bonavista Energy Corporation': 'Bonavista',\n                  'CNOOC Petroleum North America ULC': 'CNOOC',\n                  'Canadian Natural Resources': 'CNRL',\n                  'Canadian Natural Resources Limited': 'CNRL',\n                  'Canadian Natural Upgrading Limited': 'CNRL',\n                  'Cenovus Energy Inc.': 'Cenovus',\n                  'Cenovus FCCL Ltd.': 'Cenovus',\n                  'ConocoPhillips Canada Resources Corp.': 'ConocoPhillips',\n                  'ConocoPhillips Canada Limited': 'ConocoPhillips',\n                  'Devon Canada Corporation': 'Devon',\n                  'Devon NEC Corporation': 'Devon',\n                  'ExxonMobil Canada Ltd.': 'Imperial',\n                  'Greenfire Hangingstone Operating Corporation': 'Greenfire',\n                  'Greenfire Resources Operating Corporation': 'Greenfire',\n                  'Husky Oil Operations Limited' : 'Husky',\n                  'Husky Oil Operations Ltd.' : 'Husky',\n                  'Imperial Oil Resources': 'Imperial',\n                  'Imperial Oil Resources Limited': 'Imperial',\n                  'Islander Oil & Gas Inc.': 'Islander',\n                  'Koch Exploration Canada G/P Ltd.': 'Koch',\n                  'Koch Oil Sands Operating ULC': 'Koch',\n                  'MEG Energy Corp.': 'MEG',\n                  'Meg Energy Corp.': 'MEG',\n                  'Murphy Oil Canada': 'Murphy',\n                  'Murphy Oil Company Ltd.': 'Murphy',\n                  'Nexen Energy ULC': 'Nexen',\n                  'Nexen Inc.': 'Nexen',\n                  'Obsidian Energy Ltd.': 'Obsidian',\n                  'OSUM Oil Sands Corp.': 'OSUM',\n                  'Osum Production Corp.': 'OSUM',\n                  'Pengrowth Corporation': 'Pengrowth',\n                  'Pengrowth Energy Corporation': 'Pengrowth',\n                  'Penn West Energy Trust': 'Penn West',\n                  'Penn West Petroleum Ltd.': 'Penn West',\n                  'Perpetual Energy Inc.': 'Perpetual',\n                  'Perpetual Energy Operating Corp.': 'Perpetual',\n                  'Perpetual Operating Corp.': 'Perpetual',\n                  'PetroChina Canada Ltd.': 'PetroChina',\n                  'Petrochina Canada Ltd.': 'PetroChina',\n                  'Strathcona Resources Ltd.': 'Strathcona',\n                  'Shell Canada Energy': 'Shell',\n                  'Shell Canada Limited': 'Shell',\n                  'Spur Petroleum Ltd.': 'Spur',\n                  'Spur Resources Ltd.': 'Spur',\n                  'Suncor Energy Inc.': 'Suncor',\n                  'Woodcote Oil & Gas Inc.': 'Woodcote',\n                  'Woodcote Oil Corp.': 'Woodcote'\n                  }\n```\n:::\n\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\n# replace the names in the Operator column\nbitumen_2010['Operator'] = bitumen_2010['Operator'].replace(operators_dict)\nbitumen_2010['Operator'].unique()\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n```\narray(['CNRL', 'Baytex', 'North Peace Energy Corp.', 'Penn West', 'Shell',\n       'Imperial', 'Devon', 'Connacher Oil And Gas Limited', 'MEG',\n       'Statoil Canada Ltd.', 'Cenovus', 'Suncor',\n       'Japan Canada Oil Sands Limited', 'Total E&P Joslyn Ltd.',\n       'ConocoPhillips', 'Nexen', 'Husky', 'Murphy',\n       'Prosper Petroleum Ltd.', 'Action Energy Inc.', 'Bonavista',\n       'Watch Resources Ltd.', 'Manitok Exploration Inc.', 'Koch',\n       'Twin Butte Energy Ltd.', 'Sunshine Oilsands Ltd.',\n       'Solara Exploration Ltd.', 'Bellatrix Exploration Ltd.',\n       'BlackPearl', 'Crispin Energy Inc.', 'Buffalo Resources Corp.',\n       'Harvest Operations Corp.', 'Bronco Energy Ltd.',\n       'Frog Lake Energy Resources Corp.'], dtype=object)\n```\n:::\n:::\n\n\nIt should be noted that there have been a number of acquisitions and mergers in the oil and gas industry in recent years, and this can lead to inconsistencies in the naming of operators across different years. However, for the sake of simplicity, we will ignore these changes and assume that operator names remain consistent across all years.\n\n## Simplifiying the Area column\n\nTo simplify the `Area` column, we can replace the values `Peace River Area 1` and `Peace River Area 2` with a single value `Peace River`. This is done to aggregate the production data for the Peace River area.\n\n::: {.cell execution_count=14}\n``` {.python .cell-code}\nbitumen_2010['Area'] = bitumen_2010['Area'].replace({'Peace River Area 1': 'Peace River', 'Peace River Area 2': 'Peace River'}) \nbitumen_2010['Area'].unique()\n```\n\n::: {.cell-output .cell-output-display execution_count=14}\n```\narray(['Cold Lake', 'Peace River', 'Athabasca, Cold Lake', 'Athabasca'],\n      dtype=object)\n```\n:::\n:::\n\n\nThere is only one row with an `Area` value of `Athabasca, Cold Lake`. To make it consistent with the other rows, we can change it to `Cold Lake`.\n\n::: {.cell execution_count=15}\n``` {.python .cell-code}\nbitumen_2010['Area'] = bitumen_2010['Area'].replace({'Athabasca, Cold Lake': 'Cold Lake'})\n```\n:::\n\n\nWe also add a `Year` column to the dataframe.\n\n::: {.cell execution_count=16}\n``` {.python .cell-code}\nbitumen_2010['Year'] = int(xls_files[0].split('_')[-1].split('-')[0])\nbitumen_2010['Year'].unique()\n```\n\n::: {.cell-output .cell-output-display execution_count=16}\n```\narray([2010], dtype=int64)\n```\n:::\n:::\n\n\n# Creating a single tidy dataset for bitumen production for all years\n\nWe can combine all the previous steps to create a function that generates a tidy dataset for the bitumen analysis. The function takes the following arguments:\n\n- `df`: a dataframe for a given year\n- `operators_dict`: a dictionary with the names to be replaced and the new names\n- `xls_file`: the name of the excel file for a given year\n\n::: {.cell execution_count=17}\n``` {.python .cell-code}\n# define a function to create a tidy dataset for bitumen production\ndef create_tidy_bitumen(df, operators_dict, xls_file):\n    last_row_idx = np.where(df[[\"Recovery Method\"]] == \"Total \")[0][0]\n    df = df.iloc[:last_row_idx, :]\n    df = (df\n            .drop(columns = ['Monthly Average'])\n            .dropna(subset = ['Operator'])\n            .assign(Operator = lambda x: x.Operator.str.split('(').str[0].str.strip())\n            .assign(Operator = lambda x: x.Operator.str.replace('  ', ' '))\n            .replace({'Operator': operators_dict})\n            .assign(Year = int(xls_file.split('_')[-1].split('-')[0]))\n            .assign(Area = lambda x: x.Area.replace({'Peace River Area 1': 'Peace River', 'Peace River Area 2': 'Peace River'}))\n    )\n    return df\n```\n:::\n\n\nTo generate a tidy dataset for bitumen production for all years, we can use the previously defined function to create tidy datasets for each year and then use a for loop to iterate through all the .xls files. For each year, we generate a tidy dataset using the function and append it to the `bitumen` dataframe using the `df.append()` method.\n\n::: {.cell execution_count=18}\n``` {.python .cell-code}\n# create a tidy dataset for bitumen production for all years\nbitumen = pd.DataFrame()\nfor xls_file in xls_files:\n    df = pd.read_excel(xls_file, sheet_name = None, skiprows = 3)\n    bitumen = bitumen.append(create_tidy_bitumen(df['BITUMEN'], operators_dict, xls_file))\n```\n:::\n\n\nLet's check the `Year` column to make sure that we have data for all years.\n\n::: {.cell execution_count=19}\n``` {.python .cell-code}\nbitumen['Year'].unique()\n```\n\n::: {.cell-output .cell-output-display execution_count=19}\n```\narray([2010, 2011, 2012, 2013, 2014, 2016, 2017, 2018, 2019, 2020, 2021,\n       2022], dtype=int64)\n```\n:::\n:::\n\n\n# Saving the dataset\n\nWe save the dataset as a csv file in the current local folder for future use.\n\n::: {.cell execution_count=20}\n``` {.python .cell-code}\nbitumen.to_csv('bitumen.csv', index = False)\n```\n:::\n\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}