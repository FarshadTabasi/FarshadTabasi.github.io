{
  "hash": "9dfa77aeb60d14ffeee9817138b1ea9a",
  "result": {
    "markdown": "---\ntitle: Thermal Recovery - Part II\nsubtitle: Heat Conduction in a 1D Reservoir\nauthor: Farshad Tabasinejad\ndate: '2023-03-12'\nbibliography: references.bib\ntoc: true\ndraft: false\ncategories:\n  - julia\n  - thermal recovery\n  - heat conduction\n  - heat loss\nimage: heat_conduction.svg\nexecute:\n  cache: false\n  output: true\nformat:\n  html:\n    code-fold: false\n    code-tools: false\n    code-overflow: wrap\n    code-block-bg: true\n    code-block-border-left: '#31BAE9'\n    code-copy: hover\n    highlight: zenburn\n---\n\n# Disclaimer\n\nThis blog post is for educational purposes only. Any commercial use of the information provided in this blog post is prohibited. The author is not responsible for any damage or loss caused by the use of the information provided in this blog post. \n\n# Introduction\n\nThermal operations, also known as thermal enhanced oil recovery (EOR), are techniques used to increase the production of heavy oil and bitumen by injecting steam or other high-temperature fluids into the reservoir. The injected fluid heats the reservoir and reduces the viscosity of the heavy oil, making it easier to flow through the reservoir and towards the production well.\n\nHowever, one of the major challenges of thermal operations is the significant heat loss to the surrounding overburden, which can lead to decreased efficiency and increased costs. Heat loss occurs as the hot steam or fluid travels through the reservoir and comes into contact with the cooler overburden, resulting in heat transfer between the reservoir and overburden.\n\nTo optimize thermal operations and minimize heat loss, it is important to understand the dynamics of heat transfer between the reservoir and overburden. This can be achieved through the use of mathematical models and simulations, which can help predict the temperature distribution in the reservoir and overburden, and optimize the injection and production rates.\n\nIn this post we will use the `Julia` programming language to solve the heat loss to overburden in thermal operations. This problem is solved as a 1D heat conduction into overburden. Heat transfer is assumed to occur at the reservoir/overburden boundary. The overburden is considered as a semi-infinite homogenous reservoir.\n\nThree different scanrios will be discussed in this post:\n\n1. Heat conduction through a constant surface area\n2. Heat conduction from an spreading hot zone within a semi-infinite 1-D reservoir\n3. Heat conduction from an spreading hot zone within a confined 1-D reservoir\n\nThese models are explained in detail in [@Butler1997].\n\n# 1-D heat conduction equation\n\nThe 1-D heat conduction equation is given by:\n\n$$\\frac{\\partial T}{\\partial t} = \\frac{\\partial}{\\partial x} \\left( \\alpha \\frac{\\partial T}{\\partial x} \\right)$$\n\nwhere $T$ is the temperature, $t$ is time, $x$ is the distance from the steam interface, and $\\alpha$ is the thermal diffusivity. For a semi-infinite medium, the boundary conditions are given by:\n\n$$T(x = 0,t) = T_{steam}$$\n\n$$T(x = \\infty,t) = T_{overburden}$$\n\nand the initial condition is given by:\n\n$$T(x ,t = 0) = T_{overburden}$$\n  \nThe thermal diffusivity is assumed to be a constant. The analytical solution of this problem is given by:\n\n$$T(x,t) = T_{reservoir} + ({T_{steam} - T_{reservoir}}) * erfc(\\frac{x}{2 \\sqrt{\\alpha t}})$$ {#eq-1}\n  \nwhere `erfc` is the complementary error function. The complementary error function is defined as:\n\n$$erfc(x) = 1 - erf(x)$$\n\nwhere `erf` is the error function and is defined as: \n\n$$erf(x) = \\frac{2}{\\sqrt{\\pi}} \\int_0^x e^{-t^2} dt$$\n\n\n# Loading required packages\n\n::: {.cell execution_count=1}\n``` {.julia .cell-code}\nusing DataFrames\nusing ShiftedArrays: lag\nusing SpecialFunctions: erf, erfc\nusing Plots\nusing StatsPlots \nusing SteamTables: Tsat, SatHL, SatHV, SpecificH\n```\n:::\n\n\n# Solving the heat conduction equation\n\nFor the rest of the post, we will use the following assumptions for the overburden thermal conductivity, overburden thermal diffusivity, steam temperature, and overburden temperature.\n\n- Thermal conductivity: `K = 1.7 W/m/°C\"`\n- Thermal diffusivity: `α = 8.333e-7 m^2/s`\n- Steam temperature: `Ts = 264 °C`\n- Overburden temperature: `To = 15 °C`\n\nThese assumptions will be used to solve the 1-D heat conduction equation using Julia. We will start by defining the required parameters and functions.\n\n::: {.cell execution_count=2}\n``` {.julia .cell-code}\n# thermal conductivity (J/day/m/°C)\nK = 1.7 * 86400\n\n# thermal diffusivity (m^2/day)\nα = 8.333e-7 * 86400\n\n# steam temperature (°C)\nTs = 264.0\n\n# overburden temperature (°C)\nTo = 15.0\n\n# distance from the boundary (m)\nx = range(0, 20, length = 10000);\n```\n:::\n\n\nHere's a Julia function that implements the analytical solution for [@eq-1]:\n\n::: {.cell execution_count=3}\n``` {.julia .cell-code}\nfunction solve_heat_conduction_equation(Ts, To, α, x, t)\n    T = To .+ (Ts .- To) .* erfc.(x ./ (2 .* sqrt.(α .* t)))\n    return x, T\nend;\n```\n:::\n\n\nThe solution of [@eq-1] at different times is shown below.\n\n::: {.cell execution_count=4}\n``` {.julia .cell-code}\nt = [0.01, 1.0, 2.0, 3.0, 4.0] * 365 # days\n\ndf = DataFrame(x = [], T = [], t = [])\n\nfor i in 1:length(t)\n    x, T = solve_heat_conduction_equation(Ts, To, α, x, t[i])\n    df = vcat(df, DataFrame(x = x, T = T, t = t[i]))\nend\n\n@df df plot(:x, :T, \ngroup = :t, \nxlabel = \"Distance from the boundary (m)\", \nylabel = \"Temperature (°C)\", \nlabel = \nreshape(string.(\"t = \", string.([3.65, 365, 730, 1095, 1460]), \" days\"), :, 5),\nlw = 3, \nlegend=:topright,\nlegendfontsize = 10,\nframe=:box)\nxgrid!(:on, :cadetblue, 2, :dashdot, 0.4)\nygrid!(:on, :cadetblue, 2, :dashdot, 0.4)\n```\n\n::: {.cell-output .cell-output-display execution_count=27}\n![](index_files/figure-html/cell-5-output-1.svg){}\n:::\n:::\n\n\n# Heat loss to overburden\n\n## 1.0 Heat conduction from a constant surface area\n\nThe rate of heat loss to overburden at the reservoir/overburden interface over a constant surface area (A) is given by:\n\n$$q = - K \\cdot A (\\frac{\\partial T}{\\partial x})_{x=0}$$ {#eq-2}\n\nwhere `K` is the thermal conductivity, `T` is the temperature, and `x` is the distance from the boundary. The cumulative heat loss to overburden is given by:\n\n$$Q_{c} = \\int_0^t - K \\cdot A (\\frac{\\partial T}{\\partial x})_{_{x=0}} dt$$ {#eq-3}\n\nwhere $t$ is time. Using the temperature profile given in [@eq-1], we can calculate the cumulative heat loss to overburden as:\n\n$$Q_{c} = 2 (T_{s} - T_{o}) \\cdot K \\cdot A \\sqrt{\\frac{t}{\\pi \\alpha}}$$\n\nThe following function is defined to calculate the cumulative heat loss to overburden.\n\n::: {.cell execution_count=5}\n``` {.julia .cell-code}\nfunction cumulative_heat_loss_constant_area(Ts, To, α, K, A, t)\n    Q = 2.0 * (Ts - To) * K * A * sqrt.(t ./ (π .* α))\n    return Q\nend;\n```\n:::\n\n\nFor a reservoir/overburden interface with a constant surface area of 40,000 $\\mathrm m^2$, the cumulative heat loss to overburden over 10 years is estimated as follows.\n\n::: {.cell execution_count=6}\n``` {.julia .cell-code}\nt = 0:1.0:10 * 365 # days\n\nA = 40000.0 # m^2\n\nQ = cumulative_heat_loss_constant_area(Ts, To, α, K, A, t) / 1e6 # MJ\n\ndf_Q = DataFrame(t = t, year = t / 365.0, Q = Q)\n\n@df df_Q plot(:t, :Q, \nxlabel = \"Time (days)\", \nylabel = \"Heat loss to overburden (MJoules)\",\nlabel = \"Area = 40000 m^2\",\nlw = 3, \nlegend=:topleft,\nlegendfontsize = 10,\nframe=:box)\nxgrid!(:on, :cadetblue, 2, :dashdot, 0.4)\nygrid!(:on, :cadetblue, 2, :dashdot, 0.4)\n```\n\n::: {.cell-output .cell-output-display execution_count=29}\n![](index_files/figure-html/cell-7-output-1.svg){}\n:::\n:::\n\n\nThe rate of heat loss to overburden at the reservoir/overburden interface over a constant surface area (A) can be calculated by combining [@eq-1] and [@eq-2]:\n\n$$q = (T_{s} - T_{o}) \\cdot K \\cdot A \\sqrt{\\frac{1}{\\pi \\alpha t}}$$\n\nHere's the implementation of the function that calculates the rate of heat loss to overburden using the equation mentioned above:\n\n::: {.cell execution_count=7}\n``` {.julia .cell-code}\nfunction heat_rate_constant_area(Ts, To, α, K, A, t)\n    q = (Ts - To) * K * A ./ sqrt.(π * α .* t)\n    return q\nend;\n```\n:::\n\n\nThe rate of heat loss to overburden over 10 years is plotted below.\n\n::: {.cell execution_count=8}\n``` {.julia .cell-code}\nt = 0:1.0:10 * 365 # days\n\nA = 40000.0 # m^2\n\nq = heat_rate_constant_area(Ts, To, α, K, A, t) / 1e6 # MJ/day\n\ndf_q = DataFrame(t = t, year = t / 365.0, q = q)\n\n@df df_q plot(:t, :q, \nxlabel = \"Time (days)\", \nylabel = \"Rate of heat loss to overburden (MJoules/day)\",\nlabel = \"Area = 40000 m^2\",\nlw = 3, \nlegend=:topright,\nlegendfontsize = 10,\nframe=:box)\nxgrid!(:on, :cadetblue, 2, :dashdot, 0.4)\nygrid!(:on, :cadetblue, 2, :dashdot, 0.4)\n```\n\n::: {.cell-output .cell-output-display execution_count=31}\n![](index_files/figure-html/cell-9-output-1.svg){}\n:::\n:::\n\n\nThe annual heat loss to overburden can be calculated as follows:\n\n::: {.cell execution_count=9}\n``` {.julia .cell-code}\ndf_Q_sub = df_Q[df_Q.year .== round.(df_Q.year, digits = 0), :]\ndf_Q_sub[!, :Q_lag] = lag(df_Q_sub.Q, 1)\ndf_Q_sub[!, :Q_incremental] = df_Q_sub.Q - df_Q_sub.Q_lag\n\n@df df_Q_sub bar(:year, :Q_incremental, \nxlabel = \"Time (Year)\", \nylabel = \"Heat loss to overburden (MJoules)\",\ntitle = \"Annual Heat Loss To Overburden\", \nlabel = \"A = 40_000 m^2\",\nlw = 3, \nlegend=:topright,\nlegendfontsize = 10,\nframe=:box)\nxgrid!(:on, :cadetblue, 2, :dashdot, 0.4)\nygrid!(:on, :cadetblue, 2, :dashdot, 0.4)\n```\n\n::: {.cell-output .cell-output-display execution_count=32}\n![](index_files/figure-html/cell-10-output-1.svg){}\n:::\n:::\n\n\nAssuming an injection pressure of 5.0 MPa and a steam quality of 70%, and assuming that the condensate is produced at an average temperature of $\\mathrm T_{o} + 0.75 * (T_{s} - T_{o})$, the annual steam requirement needed to compensate for the heat loss to overburden can be estimated as follows:\n\n::: {.cell execution_count=10}\n``` {.julia .cell-code}\nP = 5.0 # MPa\n\nx = 0.7\n\nT_sat = Tsat(P) # K\nH_vap = SatHV(T_sat) / 1e6 # MJ/kg\nH_liq = SatHL(T_sat) / 1e6 # MJ/kg\nH_wetsteam = (1 - x) * H_liq + x * H_vap # MJ/kg\n\nT_cond = To + 0.75 * (Ts - To) # C\nH_cond = SpecificH(P, T_cond + 273.15) / 1e3 # MJ/kg\n\nnet_heat_per_tonne_of_steam = (H_wetsteam - H_cond) * 1000; # MJ/tonne\n\ndf_Q_sub[!, :steam_requirement] = df_Q_sub.Q_incremental ./ \n                                    net_heat_per_tonne_of_steam\n\n@df df_Q_sub bar(:year, :steam_requirement,\nxlabel = \"Time (Year)\",\nylabel = \"Steam requirement (tonnes)\",\ntitle = \"Annual Steam Requirement\",\nlabel = \"A = 40_000 m^2\",\nlw = 3,\nlegend=:topright,\nlegendfontsize = 10,\nframe=:box)\nxgrid!(:on, :cadetblue, 2, :dashdot, 0.4)\nygrid!(:on, :cadetblue, 2, :dashdot, 0.4)\n```\n\n::: {.cell-output .cell-output-display execution_count=33}\n![](index_files/figure-html/cell-11-output-1.svg){}\n:::\n:::\n\n\n## 2. Surface area increases with time (Heat transfer from a spreading hot zone)\n\nIn this scenario, heat is transferred to the overburden from a hot zone that expands over time. [@Butler1997] has provided a general solution for this problem when the surface area of the hot zone increases as a power of time. When the surface area of the hot zone increases linearly with time, the cumulative and rate of heat loss to overburden are given by [@eq-4] and [@eq-5], respectively.\n\n$$Q = \\frac{4}{3} \\frac{(T_{s} - T_{o}) K \\cdot \\dot{A}}{\\sqrt{\\pi \\alpha}} t^{1.5} $$ {#eq-4}\n\n$$q = 2 (T_{s} - T_{o}) K \\cdot \\dot{A} \\cdot \\sqrt{\\frac{t}{\\pi \\alpha}} $$ {#eq-5}\n\nwhere $\\dot{A}$ is the rate of change of surface area and is assumed to be constant.\n\nSimilar to the previous case, we define two functions that calculate the cumulative heat loss and rate of heat loss to overburden.\n\n::: {.cell execution_count=11}\n``` {.julia .cell-code}\nfunction cumulative_heat_loss_variable_area(Ts, To, α, K, A_dot, t)\n    Q = 4.0 / 3.0 * (Ts - To) * K * A_dot / sqrt.(π * α) .* t.^1.5\n    return Q\nend;\n```\n:::\n\n\n::: {.cell execution_count=12}\n``` {.julia .cell-code}\nfunction heat_loss_rate_variable_area(Ts, To, α, K, A_dot, t)\n    q = 2.0 * (Ts - To) * K * A_dot .* sqrt.(t / (π * α))\n    return q\nend;\n```\n:::\n\n\nLet's calculate the cumulative heat loss to overburden over a period of 10 years, where the surface area increases linearly with time at a rate of 4000/365 $(\\mathrm m^2/ \\mathrm day)$.\n\n::: {.cell execution_count=13}\n``` {.julia .cell-code}\nt = 0:1.0:10 * 365 # days\n\nA_dot  = 4000.0 / 365.0 # m^2/day\n\nQ = cumulative_heat_loss_variable_area(Ts, To, α, K, A_dot, t) / 1e6 # MJ\n\ndf_Q = DataFrame(t = t, year = t / 365.0, Q = Q);\n\n@df df_Q plot(:t, :Q, \nxlabel = \"Time (days)\", \nylabel = \"Heat loss to overburden (MJoules)\",\nlabel = \"A_dot = 4000 m^2/year\",\nlw = 3, \nlegend=:topleft,\nlegendfontsize = 10,\nframe=:box)\nxgrid!(:on, :cadetblue, 2, :dashdot, 0.4)\nygrid!(:on, :cadetblue, 2, :dashdot, 0.4)\n```\n\n::: {.cell-output .cell-output-display execution_count=36}\n![](index_files/figure-html/cell-14-output-1.svg){}\n:::\n:::\n\n\nThe annual heat loss to overburden and the steam requirement to compensate for the heat loss to overburden are calculated as follows:\n\n::: {.cell execution_count=14}\n``` {.julia .cell-code}\ndf_Q_sub = df_Q[df_Q.year .== round.(df_Q.year, digits = 0), :]\ndf_Q_sub[!, :Q_lag] = lag(df_Q_sub.Q, 1)\ndf_Q_sub[!, :Q_incremental] = df_Q_sub.Q - df_Q_sub.Q_lag\ndf_Q_sub[!, :steam_requirement] = df_Q_sub.Q_incremental ./ \n                                                net_heat_per_tonne_of_steam\n\n@df df_Q_sub bar(:year, :steam_requirement,\nxlabel = \"Time (Year)\",\nylabel = \"Steam requirement (tonnes)\",\ntitle = \"Annual Steam Requirement\",\nlabel = \"A_dot = 4000 m^2/year\",\nlw = 3,\nlegend=:topleft,\nlegendfontsize = 10,\nframe=:box)\nxgrid!(:on, :cadetblue, 2, :dashdot, 0.4)\nygrid!(:on, :cadetblue, 2, :dashdot, 0.4)\n```\n\n::: {.cell-output .cell-output-display execution_count=37}\n![](index_files/figure-html/cell-15-output-1.svg){}\n:::\n:::\n\n\nThe rate of heat loss to overburden is calculated as follows:\n\n::: {.cell execution_count=15}\n``` {.julia .cell-code}\nq = heat_loss_rate_variable_area(Ts, To, α, K, A_dot, t) / 1e6 # MJ/day\n\ndf_q = DataFrame(t = t, year = t / 365.0, q = q)\n\n@df df_q plot(:t, :q, \nxlabel = \"Time (days)\", \nylabel = \"Rate of heat loss to overburden (MJoules/day)\",\nlabel = \"A_dot = 4000 m^2/year\",\nlw = 3, \nlegend=:topleft,\nlegendfontsize = 10,\nframe=:box)\nxgrid!(:on, :cadetblue, 2, :dashdot, 0.4)\nygrid!(:on, :cadetblue, 2, :dashdot, 0.4)\n```\n\n::: {.cell-output .cell-output-display execution_count=38}\n![](index_files/figure-html/cell-16-output-1.svg){}\n:::\n:::\n\n\n## 3. Surface area increases to a limit and then stops expanding\n\nIn this scenario, the surface area that is exposed to the steam chamber increases linearly with time until it reaches a certain limit and then stops expanding. This situation is common in steam-assisted gravity drainage (SAGD) operations. The solution to this problem is also provided by [@Butler1997]. The linear expansion period occurs during the first $t_{1}$ days. After that, the surface area remains constant and no further expansion occurs.\n\nFor $t \\leq t_{1}$:\n\n$$\nQ = \\frac{4}{3} \\frac{ (T_{s} - T_{o}) \\cdot K \\cdot \\dot{A}} {\\sqrt{\\pi \\alpha}} [t^{1.5}]\n$$\n\nand for $t \\gt t_{1}$:\n\n$$\n% \\begin{split}\nQ = \\frac{4}{3} \\frac{ (T_{s} - T_{o}) \\cdot K \\cdot \\dot{A}} {\\sqrt{\\pi \\alpha}} [t^{1.5} - (t - t_{1})^{1.5}]\n% \\end{split}\n$$\n\nwhere $\\dot{A}$ is the rate of change of surface area.\n\nThe following function estimates the cumulative heat loss to overburden:\n\n::: {.cell execution_count=16}\n``` {.julia .cell-code}\nfunction cumulative_heat_loss_variable_area_limit(Ts, To, α, K, A_dot, t, t1)\n    \n    Q = zeros(length(t))\n        for i in 1:length(t)\n            if t[i] <= t1\n                Q[i] = 4.0 / 3.0 * (Ts - To) * K * A_dot / \n                sqrt(π * α) * (t[i] ^ 1.5)\n            else\n                Q[i] = 4.0 / 3.0 * (Ts - To) * K * A_dot /\n                sqrt(π * α) * (t[i] ^ 1.5 - (t[i] - t1) ^ 1.5)\n            end\n        end\n    return Q\nend;\n```\n:::\n\n\nFor this scenario, we will estimate the cumulative heat loss to overburden over a surface area that linearly increases with time for 4 years and then stops expanding for the next 6 years, with a total surface area of 40,000 $\\mathrm m^{2}$.\n\n::: {.cell execution_count=17}\n``` {.julia .cell-code}\nt = 0:1.0:10 * 365 # days\n\nt1 = 4 * 365 # days\n\nA_dot  = 10000.0 / 365.0 # m^2/day\n\nQ = cumulative_heat_loss_variable_area_limit(Ts, To, α, K, A_dot, t, t1) / \n                                                                        1e6 # MJ\n\ndf_Q = DataFrame(t = t, year = t / 365.0, Q = Q);\n\n@df df_Q plot(:t, :Q, \nxlabel = \"Time (days)\", \nylabel = \"Heat loss to overburden (MJoules)\",\nlabel = \"A_dot = 10000 m^2/year\",\nlw = 3, \nlegend=:topleft,\nlegendfontsize = 10,\nframe=:box)\nxgrid!(:on, :cadetblue, 2, :dashdot, 0.4)\nygrid!(:on, :cadetblue, 2, :dashdot, 0.4)\n```\n\n::: {.cell-output .cell-output-display execution_count=40}\n![](index_files/figure-html/cell-18-output-1.svg){}\n:::\n:::\n\n\nThe annual heat loss to overburden and the steam requirement to compensate for the heat loss to overburden can be calculated as follows:\n\n::: {.cell execution_count=18}\n``` {.julia .cell-code}\ndf_Q_sub = df_Q[df_Q.year .== round.(df_Q.year, digits = 0), :]\ndf_Q_sub[!, :Q_lag] = lag(df_Q_sub.Q, 1)\ndf_Q_sub[!, :Q_incremental] = df_Q_sub.Q - df_Q_sub.Q_lag\ndf_Q_sub[!, :steam_requirement] = df_Q_sub.Q_incremental ./ \n                                        net_heat_per_tonne_of_steam\n\n@df df_Q_sub bar(:year, :steam_requirement,\nxlabel = \"Time (Year)\",\nylabel = \"Steam requirement (tonnes)\",\ntitle = \"Annual Steam Requirement\",\nlabel = \"A_dot = 10000 m^2/year\",\nlw = 3,\nlegend=:topright,\nlegendfontsize = 10,\nframe=:box)\nxgrid!(:on, :cadetblue, 2, :dashdot, 0.4)\nygrid!(:on, :cadetblue, 2, :dashdot, 0.4)\n```\n\n::: {.cell-output .cell-output-display execution_count=41}\n![](index_files/figure-html/cell-19-output-1.svg){}\n:::\n:::\n\n\nThe rate of heat loss to overburden can be estimated as follows:\n\nFor $t \\leq t_{1}$:\n\n$$q = 2 \\frac{(T_{s} - T_{o}) \\cdot K \\cdot \\dot{A}} {\\sqrt{\\pi \\alpha}} [t^{0.5}] $$\n\nand for $t \\gt t_{1}$:\n\n$$q = 2 \\frac{(T_{s} - T_{o}) \\cdot K \\cdot \\dot{A}} {\\sqrt{\\pi \\alpha}} [t^{0.5} - (t - t_{1})^{0.5}] $$\n\nHere's a function that calculates the rate of heat loss to overburden for the scenario where surface area increases to a limit and then stops expanding.\n\n::: {.cell execution_count=19}\n``` {.julia .cell-code}\nfunction heat_loss_rate_variable_area_limit(Ts, To, α, κ, A_dot, t, t1)\n    \n    q = zeros(length(t))\n    for i in 1:length(t)\n        if t[i] <= t1\n            q[i] = 2.0 * (Ts - To) * K * A_dot / sqrt(π * α) * \n            (t[i] ^ 0.5)\n        else\n            q[i] = 2.0 * (Ts - To) * K * A_dot / sqrt(π * α) * \n            (t[i] ^ 0.5 - (t[i] - t1) ^ 0.5)\n        end\n    end\n    return q\nend;\n```\n:::\n\n\nThe results for the rate of heat loss to overburden are shown below.\n\n::: {.cell execution_count=20}\n``` {.julia .cell-code}\nq = heat_loss_rate_variable_area_limit(Ts, To, α, K, A_dot, t, t1) / 1e6 # MJ/day\n\ndf_q = DataFrame(t = t, year = t / 365.0, q = q)\n\n@df df_q plot(:t, :q, \nxlabel = \"Time (days)\", \nylabel = \"Rate of heat loss to overburden (MJoules/day)\",\nlabel = \"A_dot = 10000 m^2/year\",\nlw = 3, \nlegend=:bottomright,\nlegendfontsize = 10,\nframe=:box)\nxgrid!(:on, :cadetblue, 2, :dashdot, 0.4)\nygrid!(:on, :cadetblue, 2, :dashdot, 0.4)\n```\n\n::: {.cell-output .cell-output-display execution_count=43}\n![](index_files/figure-html/cell-21-output-1.svg){}\n:::\n:::\n\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}