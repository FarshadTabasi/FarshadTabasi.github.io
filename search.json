[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Welcome to my weblog! My name is Farshad, and I am excited to share my experiences and insights with you. With 20 years of experience in the petroleum industry and academia, I have worked on reservoir engineering aspects of oilsands and heavy oil reservoirs. I have also been involved in several reservoir modeling and geomechanics studies of unconventional oil and gas reservoirs. Currently, I work as a process analytics consultant in the energy industry, providing engineering and data science solutions to optimize production and maintenance costs of refineries and upgraders.\nWhen I am not working, you can often find me indulging in my passions for hiking, playing table tennis and squash, as well as volleyball and tennis. Additionally, I enjoy watching Real Madrid games as a die-hard Los Blancos fan. Despite my loyalty to Real Madrid, I cannot help but admire the unparalleled talent of Leo Messi (The GOAT), which makes life even more beautiful."
  },
  {
    "objectID": "about.html#areas-of-expertiseinterest",
    "href": "about.html#areas-of-expertiseinterest",
    "title": "About",
    "section": "Areas of Expertise/Interest:",
    "text": "Areas of Expertise/Interest:\n\nComputational Thermodynamics\nReservoir Characterization\nReservoir Simulation\nThermal Recovery\nPTA/RTA\nEOR of Unconventional Reservoirs\nHydraulic Fracturing Modeling and Simulation\nDFIT and DFIT-Flowback Design and Analysis\nProcess Analytics\nArtificial Intelligence\nMachine Learning"
  },
  {
    "objectID": "about.html#education",
    "href": "about.html#education",
    "title": "About",
    "section": "Education",
    "text": "Education\n\nCertificate in Professional Management (PEG) | University of Calgary | 2018\nCertificate in Spanish Language and Culture | University of Calgary | 2016\nPhD in Petroleum Engineering | University of Calgary | 2011\nMEng in Reservoir Engineering | University of Calgary | 2006\nMSc in Reservoir Engineering | Petroleum University of Technology | 2005\nBSc in Reservoir Engineering | Petroleum University of Technology | 2003"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Julia, Python, and R Applications in Energy Industry",
    "section": "",
    "text": "Thermal Recovery - Part II\n\n\nHeat Conduction in a 1D Reservoir\n\n\n\n\njulia\n\n\nthermal recovery\n\n\nheat conduction\n\n\nheat loss\n\n\n\n\n\n\n\n\n\n\n\nMar 12, 2023\n\n\nFarshad Tabasinejad\n\n\n\n\n\n\n  \n\n\n\n\nThermal Recovery - Part I\n\n\nWater/Steam Properties\n\n\n\n\njulia\n\n\nthermal recovery\n\n\nsteam properties\n\n\nSteamTables.jl\n\n\n\n\n\n\n\n\n\n\n\nMar 11, 2023\n\n\nFarshad Tabasinejad\n\n\n\n\n\n\n  \n\n\n\n\nAlberta In-situ Oilsands Production Analysis using Python - Part III\n\n\nData analysis and visualization\n\n\n\n\npython\n\n\ndata analysis\n\n\ndata visualization\n\n\npandas\n\n\nseaborn\n\n\nmatplotlib\n\n\n\n\n\n\n\n\n\n\n\nMar 5, 2023\n\n\nFarshad Tabasinejad\n\n\n\n\n\n\n  \n\n\n\n\nAlberta In-situ Oilsands Production Analysis using Python - Part II\n\n\nPreparing a tidy dataset for data analysis and visualization\n\n\n\n\npython\n\n\npandas\n\n\ndata analysis\n\n\ndata visualization\n\n\n\n\n\n\n\n\n\n\n\nMar 4, 2023\n\n\nFarshad Tabasinejad\n\n\n\n\n\n\n  \n\n\n\n\nAlberta In-situ Oilsands Production Analysis using Python - Part I\n\n\nData extraction from AER website\n\n\n\n\npython\n\n\nweb scraping\n\n\n\n\n\n\n\n\n\n\n\nFeb 26, 2023\n\n\nFarshad Tabasinejad\n\n\n\n\n\n\n  \n\n\n\n\nWelcome To My Blog\n\n\n\n\n\n\n\nannouncement\n\n\n\n\n\n\n\n\n\n\n\nFeb 25, 2023\n\n\nFarshad Tabasinejad\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/julia-posts/Thermal Recovery Part I/index.html",
    "href": "posts/julia-posts/Thermal Recovery Part I/index.html",
    "title": "Thermal Recovery - Part I",
    "section": "",
    "text": "This blog post is for educational purposes only. Any commercial use of the information provided in this blog post is prohibited. The author is not responsible for any damage or loss caused by the use of the information provided in this blog post."
  },
  {
    "objectID": "posts/julia-posts/Thermal Recovery Part I/index.html#saturation-pressure",
    "href": "posts/julia-posts/Thermal Recovery Part I/index.html#saturation-pressure",
    "title": "Thermal Recovery - Part I",
    "section": "Saturation pressure",
    "text": "Saturation pressure\nSaturation pressure of water can be estimated using the SteamTables.Psat function. The water phase envelope is generated below from the tripple point \\(\\mathrm T_{3p}\\) = 273.16 K to the critical point \\(\\mathrm T_{crit}\\) = 647.096 K.\n\nT_tripple = 273.16 # K\n\nT_critical = 647.096 # K\n\nT = unique(vcat(T_tripple, ceil(T_tripple):1.0: floor(T_critical), T_critical))\n\np = [Psat(t) for t in T]\n\nplt = plot(T, p, \nxlabel=\"Temperature [K]\", \nylabel=\"Pressure [MPa]\", \nlabel=\"Sat. pressure\", \nlw = 3, \nlegend=:topleft,\nlegendfontsize = 10,\nframe=:box)\nxgrid!(:on, :cadetblue, 2, :dashdot, 0.4)\nygrid!(:on, :cadetblue, 2, :dashdot, 0.4)\n\nplot!([T_tripple], [Psat(T_tripple)], \nseriestype=:scatter, \nlabel=\"Triple point\",\nmarkersize = 6)\n\nplot!([T_critical], [Psat(T_critical)], \nseriestype=:scatter, \nlabel=\"Critical point\",\nmarkersize = 6)"
  },
  {
    "objectID": "posts/julia-posts/Thermal Recovery Part I/index.html#saturated-density",
    "href": "posts/julia-posts/Thermal Recovery Part I/index.html#saturated-density",
    "title": "Thermal Recovery - Part I",
    "section": "Saturated density",
    "text": "Saturated density\nSaturated liquid and vapor densities are estimated using the SteamTables.SatDensL and SteamTables.SatDensV functions.\n\n# saturated liquid density\nρ = [SatDensL(t) for t in T]\n\nplt = plot(T, ρ, \nxlabel=\"Temperature [K]\", \nylabel=\"Density [kg/m³]\", \nlabel=\"Sat. liquid density\",\nlw = 3, \nlegend=:topright,\nlegendfontsize = 10,\nframe=:box)\nxgrid!(:on, :cadetblue, 2, :dashdot, 0.4)\nygrid!(:on, :cadetblue, 2, :dashdot, 0.4)\n\n# saturated vapor density \nρ = [SatDensV(t) for t in T]\n\nplot!(T, ρ, \nlabel=\"Sat. vapor density\",\nlw = 3)\n\nplot!([T_critical], [SatDensL(T_critical)], \nseriestype=:scatter, \nlabel=\"Critical point\",\nmarkersize = 6)"
  },
  {
    "objectID": "posts/julia-posts/Thermal Recovery Part I/index.html#saturated-enthalpy",
    "href": "posts/julia-posts/Thermal Recovery Part I/index.html#saturated-enthalpy",
    "title": "Thermal Recovery - Part I",
    "section": "Saturated enthalpy",
    "text": "Saturated enthalpy\nSaturated liquid and vapor enthalpies are estimated using the SteamTables.SatHL and SteamTables.SatHV functions.\n\n# saturated liquid enthalpy\nh = [SatHL(t) for t in T] / 1e3\n\nplt = plot(T, h, \nxlabel=\"Temperature [K]\", \nylabel=\"Enthalpy [kJ/kg]\", \nlabel=\"Sat. liquid enthalpy\",\nlw = 3, \nlegend=:bottomright,\nlegendfontsize = 10,\nframe=:box)\nxgrid!(:on, :cadetblue, 2, :dashdot, 0.4)\nygrid!(:on, :cadetblue, 2, :dashdot, 0.4)\n\n# saturated vapor enthalpy\nh = [SatHV(t) for t in T] / 1e3\n\nplot!(T, h, \nlabel=\"Sat. vapor enthalpy\",\nlw = 3)\n\nplot!([T_critical], [SatHL(T_critical) / 1e3], \nseriestype=:scatter, \nlabel=\"Critical point\",\nmarkersize = 6)"
  },
  {
    "objectID": "posts/julia-posts/Thermal Recovery Part I/index.html#latent-heat-of-vaporization",
    "href": "posts/julia-posts/Thermal Recovery Part I/index.html#latent-heat-of-vaporization",
    "title": "Thermal Recovery - Part I",
    "section": "Latent heat of vaporization",
    "text": "Latent heat of vaporization\nThe latent heat of vaporization curve is generated using the SteamTables.DeltaHvap function.\n\nh_lv = [DeltaHvap(t) for t in T] / 1e3\n\nplt = plot(T, h_lv, \nxlabel=\"Temperature [K]\", \nylabel=\"Latent heat of vaporization [kJ/kg]\", \nlabel=\"Latent heat of vaporization\",\nlw = 3, \nlegend=:topright,\nlegendfontsize = 10,\nframe=:box)\nxgrid!(:on, :cadetblue, 2, :dashdot, 0.4)\nygrid!(:on, :cadetblue, 2, :dashdot, 0.4)\n\nplot!([T_critical], [h_lv[end]], \nseriestype=:scatter, \nlabel=\"Critical point\",\nmarkersize = 6)\n\n\n\n\nA list of all the available functions can be found in the SteamTables.jl documentation."
  },
  {
    "objectID": "posts/julia-posts/Thermal Recovery Part I/index.html#specific-properties",
    "href": "posts/julia-posts/Thermal Recovery Part I/index.html#specific-properties",
    "title": "Thermal Recovery - Part I",
    "section": "Specific properties",
    "text": "Specific properties\nThe specific properties of water are calculated using the SteamTables.SpecificH, SteamTables.SpecificS, SteamTables.SpecificV, and SteamTables.SpecificCP functions. The specific enthalpy curve is generated below from 273.16 K to 747.096 K at a constant pressure of 10 MPa.\n\nT = vcat(274:1.0:800) # K\nP = 10 # MPa\n\nh = zeros(length(T))\ns = zeros(length(T))\nv = zeros(length(T))\nCp = zeros(length(T))\n\nfor i in 1:length(T)\n    h[i] = SpecificH(P, T[i])\n    s[i] = SpecificS(P, T[i])\n    v[i] = SpecificV(P, T[i])\n    Cp[i] = SpecificCP(P, T[i])\nend\n\nThe figure below shows the change in specific enthalpy over a wide range of temperatures at a constant pressure of 10 MPa.\n\nplt = plot(T, h, \nxlabel=\"Temperature [K]\", \nylabel=\"Enthalpy [kJ/kg]\", \nlabel=\"Specific enthalpy\",\nlw = 3, \nlegend=:bottomright,\nlegendfontsize = 10,\nframe=:box)\nxgrid!(:on, :cadetblue, 2, :dashdot, 0.4)\nygrid!(:on, :cadetblue, 2, :dashdot, 0.4)\n\n\n\n\nA similar plot can be generated for the specific volume curve.\n\nplt = plot(T, v, \nxlabel=\"Temperature [K]\", \nylabel=\"Volume [m3/kg]\", \nlabel=\"Specific volume\",\nlw = 3, \nlegend=:bottomright,\nlegendfontsize = 10,\nframe=:box)\nxgrid!(:on, :cadetblue, 2, :dashdot, 0.4)\nygrid!(:on, :cadetblue, 2, :dashdot, 0.4)\n\n\n\n\nThere are other functions for calculating the specific properties of water. A list of all the available functions can be found in the SteamTables.jl documentation."
  },
  {
    "objectID": "posts/julia-posts/Thermal Recovery Part II/index.html",
    "href": "posts/julia-posts/Thermal Recovery Part II/index.html",
    "title": "Thermal Recovery - Part II",
    "section": "",
    "text": "This blog post is for educational purposes only. Any commercial use of the information provided in this blog post is prohibited. The author is not responsible for any damage or loss caused by the use of the information provided in this blog post."
  },
  {
    "objectID": "posts/julia-posts/Thermal Recovery Part II/index.html#heat-conduction-from-a-constant-surface-area",
    "href": "posts/julia-posts/Thermal Recovery Part II/index.html#heat-conduction-from-a-constant-surface-area",
    "title": "Thermal Recovery - Part II",
    "section": "1.0 Heat conduction from a constant surface area",
    "text": "1.0 Heat conduction from a constant surface area\nThe rate of heat loss to overburden at the reservoir/overburden interface over a constant surface area (A) is given by:\n\\[q = - K \\cdot A (\\frac{\\partial T}{\\partial x})_{x=0} \\tag{2}\\]\nwhere K is the thermal conductivity, T is the temperature, and x is the distance from the boundary. The cumulative heat loss to overburden is given by:\n\\[Q_{c} = \\int_0^t - K \\cdot A (\\frac{\\partial T}{\\partial x})_{_{x=0}} dt \\tag{3}\\]\nwhere \\(t\\) is time. Using the temperature profile given in Equation 1, we can calculate the cumulative heat loss to overburden as:\n\\[Q_{c} = 2 (T_{s} - T_{o}) \\cdot K \\cdot A \\sqrt{\\frac{t}{\\pi \\alpha}}\\]\nThe following function is defined to calculate the cumulative heat loss to overburden.\n\nfunction cumulative_heat_loss_constant_area(Ts, To, α, K, A, t)\n    Q = 2.0 * (Ts - To) * K * A * sqrt.(t ./ (π .* α))\n    return Q\nend;\n\nFor a reservoir/overburden interface with a constant surface area of 40,000 \\(\\mathrm m^2\\), the cumulative heat loss to overburden over 10 years is estimated as follows.\n\nt = 0:1.0:10 * 365 # days\n\nA = 40000.0 # m^2\n\nQ = cumulative_heat_loss_constant_area(Ts, To, α, K, A, t) / 1e6 # MJ\n\ndf_Q = DataFrame(t = t, year = t / 365.0, Q = Q)\n\n@df df_Q plot(:t, :Q, \nxlabel = \"Time (days)\", \nylabel = \"Heat loss to overburden (MJoules)\",\nlabel = \"Area = 40000 m^2\",\nlw = 3, \nlegend=:topleft,\nlegendfontsize = 10,\nframe=:box)\nxgrid!(:on, :cadetblue, 2, :dashdot, 0.4)\nygrid!(:on, :cadetblue, 2, :dashdot, 0.4)\n\n\n\n\nThe rate of heat loss to overburden at the reservoir/overburden interface over a constant surface area (A) can be calculated by combining Equation 1 and Equation 2:\n\\[q = (T_{s} - T_{o}) \\cdot K \\cdot A \\sqrt{\\frac{1}{\\pi \\alpha t}}\\]\nHere’s the implementation of the function that calculates the rate of heat loss to overburden using the equation mentioned above:\n\nfunction heat_rate_constant_area(Ts, To, α, K, A, t)\n    q = (Ts - To) * K * A ./ sqrt.(π * α .* t)\n    return q\nend;\n\nThe rate of heat loss to overburden over 10 years is plotted below.\n\nt = 0:1.0:10 * 365 # days\n\nA = 40000.0 # m^2\n\nq = heat_rate_constant_area(Ts, To, α, K, A, t) / 1e6 # MJ/day\n\ndf_q = DataFrame(t = t, year = t / 365.0, q = q)\n\n@df df_q plot(:t, :q, \nxlabel = \"Time (days)\", \nylabel = \"Rate of heat loss to overburden (MJoules/day)\",\nlabel = \"Area = 40000 m^2\",\nlw = 3, \nlegend=:topright,\nlegendfontsize = 10,\nframe=:box)\nxgrid!(:on, :cadetblue, 2, :dashdot, 0.4)\nygrid!(:on, :cadetblue, 2, :dashdot, 0.4)\n\n\n\n\nThe annual heat loss to overburden can be calculated as follows:\n\ndf_Q_sub = df_Q[df_Q.year .== round.(df_Q.year, digits = 0), :]\ndf_Q_sub[!, :Q_lag] = lag(df_Q_sub.Q, 1)\ndf_Q_sub[!, :Q_incremental] = df_Q_sub.Q - df_Q_sub.Q_lag\n\n@df df_Q_sub bar(:year, :Q_incremental, \nxlabel = \"Time (Year)\", \nylabel = \"Heat loss to overburden (MJoules)\",\ntitle = \"Annual Heat Loss To Overburden\", \nlabel = \"A = 40_000 m^2\",\nlw = 3, \nlegend=:topright,\nlegendfontsize = 10,\nframe=:box)\nxgrid!(:on, :cadetblue, 2, :dashdot, 0.4)\nygrid!(:on, :cadetblue, 2, :dashdot, 0.4)\n\n\n\n\nAssuming an injection pressure of 5.0 MPa and a steam quality of 70%, and assuming that the condensate is produced at an average temperature of \\(\\mathrm T_{o} + 0.75 * (T_{s} - T_{o})\\), the annual steam requirement needed to compensate for the heat loss to overburden can be estimated as follows:\n\nP = 5.0 # MPa\n\nx = 0.7\n\nT_sat = Tsat(P) # K\nH_vap = SatHV(T_sat) / 1e6 # MJ/kg\nH_liq = SatHL(T_sat) / 1e6 # MJ/kg\nH_wetsteam = (1 - x) * H_liq + x * H_vap # MJ/kg\n\nT_cond = To + 0.75 * (Ts - To) # C\nH_cond = SpecificH(P, T_cond + 273.15) / 1e3 # MJ/kg\n\nnet_heat_per_tonne_of_steam = (H_wetsteam - H_cond) * 1000; # MJ/tonne\n\ndf_Q_sub[!, :steam_requirement] = df_Q_sub.Q_incremental ./ \n                                    net_heat_per_tonne_of_steam\n\n@df df_Q_sub bar(:year, :steam_requirement,\nxlabel = \"Time (Year)\",\nylabel = \"Steam requirement (tonnes)\",\ntitle = \"Annual Steam Requirement\",\nlabel = \"A = 40_000 m^2\",\nlw = 3,\nlegend=:topright,\nlegendfontsize = 10,\nframe=:box)\nxgrid!(:on, :cadetblue, 2, :dashdot, 0.4)\nygrid!(:on, :cadetblue, 2, :dashdot, 0.4)"
  },
  {
    "objectID": "posts/julia-posts/Thermal Recovery Part II/index.html#surface-area-increases-with-time-heat-transfer-from-a-spreading-hot-zone",
    "href": "posts/julia-posts/Thermal Recovery Part II/index.html#surface-area-increases-with-time-heat-transfer-from-a-spreading-hot-zone",
    "title": "Thermal Recovery - Part II",
    "section": "2. Surface area increases with time (Heat transfer from a spreading hot zone)",
    "text": "2. Surface area increases with time (Heat transfer from a spreading hot zone)\nIn this scenario, heat is transferred to the overburden from a hot zone that expands over time. (Butler 1997) has provided a general solution for this problem when the surface area of the hot zone increases as a power of time. When the surface area of the hot zone increases linearly with time, the cumulative and rate of heat loss to overburden are given by Equation 4 and Equation 5, respectively.\n\\[Q = \\frac{4}{3} \\frac{(T_{s} - T_{o}) K \\cdot \\dot{A}}{\\sqrt{\\pi \\alpha}} t^{1.5}  \\tag{4}\\]\n\\[q = 2 (T_{s} - T_{o}) K \\cdot \\dot{A} \\cdot \\sqrt{\\frac{t}{\\pi \\alpha}}  \\tag{5}\\]\nwhere \\(\\dot{A}\\) is the rate of change of surface area and is assumed to be constant.\nSimilar to the previous case, we define two functions that calculate the cumulative heat loss and rate of heat loss to overburden.\n\nfunction cumulative_heat_loss_variable_area(Ts, To, α, K, A_dot, t)\n    Q = 4.0 / 3.0 * (Ts - To) * K * A_dot / sqrt.(π * α) .* t.^1.5\n    return Q\nend;\n\n\nfunction heat_loss_rate_variable_area(Ts, To, α, K, A_dot, t)\n    q = 2.0 * (Ts - To) * K * A_dot .* sqrt.(t / (π * α))\n    return q\nend;\n\nLet’s calculate the cumulative heat loss to overburden over a period of 10 years, where the surface area increases linearly with time at a rate of 4000/365 \\((\\mathrm m^2/ \\mathrm day)\\).\n\nt = 0:1.0:10 * 365 # days\n\nA_dot  = 4000.0 / 365.0 # m^2/day\n\nQ = cumulative_heat_loss_variable_area(Ts, To, α, K, A_dot, t) / 1e6 # MJ\n\ndf_Q = DataFrame(t = t, year = t / 365.0, Q = Q);\n\n@df df_Q plot(:t, :Q, \nxlabel = \"Time (days)\", \nylabel = \"Heat loss to overburden (MJoules)\",\nlabel = \"A_dot = 4000 m^2/year\",\nlw = 3, \nlegend=:topleft,\nlegendfontsize = 10,\nframe=:box)\nxgrid!(:on, :cadetblue, 2, :dashdot, 0.4)\nygrid!(:on, :cadetblue, 2, :dashdot, 0.4)\n\n\n\n\nThe annual heat loss to overburden and the steam requirement to compensate for the heat loss to overburden are calculated as follows:\n\ndf_Q_sub = df_Q[df_Q.year .== round.(df_Q.year, digits = 0), :]\ndf_Q_sub[!, :Q_lag] = lag(df_Q_sub.Q, 1)\ndf_Q_sub[!, :Q_incremental] = df_Q_sub.Q - df_Q_sub.Q_lag\ndf_Q_sub[!, :steam_requirement] = df_Q_sub.Q_incremental ./ \n                                                net_heat_per_tonne_of_steam\n\n@df df_Q_sub bar(:year, :steam_requirement,\nxlabel = \"Time (Year)\",\nylabel = \"Steam requirement (tonnes)\",\ntitle = \"Annual Steam Requirement\",\nlabel = \"A_dot = 4000 m^2/year\",\nlw = 3,\nlegend=:topleft,\nlegendfontsize = 10,\nframe=:box)\nxgrid!(:on, :cadetblue, 2, :dashdot, 0.4)\nygrid!(:on, :cadetblue, 2, :dashdot, 0.4)\n\n\n\n\nThe rate of heat loss to overburden is calculated as follows:\n\nq = heat_loss_rate_variable_area(Ts, To, α, K, A_dot, t) / 1e6 # MJ/day\n\ndf_q = DataFrame(t = t, year = t / 365.0, q = q)\n\n@df df_q plot(:t, :q, \nxlabel = \"Time (days)\", \nylabel = \"Rate of heat loss to overburden (MJoules/day)\",\nlabel = \"A_dot = 4000 m^2/year\",\nlw = 3, \nlegend=:topleft,\nlegendfontsize = 10,\nframe=:box)\nxgrid!(:on, :cadetblue, 2, :dashdot, 0.4)\nygrid!(:on, :cadetblue, 2, :dashdot, 0.4)"
  },
  {
    "objectID": "posts/julia-posts/Thermal Recovery Part II/index.html#surface-area-increases-to-a-limit-and-then-stops-expanding",
    "href": "posts/julia-posts/Thermal Recovery Part II/index.html#surface-area-increases-to-a-limit-and-then-stops-expanding",
    "title": "Thermal Recovery - Part II",
    "section": "3. Surface area increases to a limit and then stops expanding",
    "text": "3. Surface area increases to a limit and then stops expanding\nIn this scenario, the surface area that is exposed to the steam chamber increases linearly with time until it reaches a certain limit and then stops expanding. This situation is common in steam-assisted gravity drainage (SAGD) operations. The solution to this problem is also provided by (Butler 1997). The linear expansion period occurs during the first \\(t_{1}\\) days. After that, the surface area remains constant and no further expansion occurs.\nFor \\(t \\leq t_{1}\\):\n\\[\nQ = \\frac{4}{3} \\frac{ (T_{s} - T_{o}) \\cdot K \\cdot \\dot{A}} {\\sqrt{\\pi \\alpha}} [t^{1.5}]\n\\]\nand for \\(t \\gt t_{1}\\):\n\\[\n% \\begin{split}\nQ = \\frac{4}{3} \\frac{ (T_{s} - T_{o}) \\cdot K \\cdot \\dot{A}} {\\sqrt{\\pi \\alpha}} [t^{1.5} - (t - t_{1})^{1.5}]\n% \\end{split}\n\\]\nwhere \\(\\dot{A}\\) is the rate of change of surface area.\nThe following function estimates the cumulative heat loss to overburden:\n\nfunction cumulative_heat_loss_variable_area_limit(Ts, To, α, K, A_dot, t, t1)\n    \n    Q = zeros(length(t))\n        for i in 1:length(t)\n            if t[i] <= t1\n                Q[i] = 4.0 / 3.0 * (Ts - To) * K * A_dot / \n                sqrt(π * α) * (t[i] ^ 1.5)\n            else\n                Q[i] = 4.0 / 3.0 * (Ts - To) * K * A_dot /\n                sqrt(π * α) * (t[i] ^ 1.5 - (t[i] - t1) ^ 1.5)\n            end\n        end\n    return Q\nend;\n\nFor this scenario, we will estimate the cumulative heat loss to overburden over a surface area that linearly increases with time for 4 years and then stops expanding for the next 6 years, with a total surface area of 40,000 \\(\\mathrm m^{2}\\).\n\nt = 0:1.0:10 * 365 # days\n\nt1 = 4 * 365 # days\n\nA_dot  = 10000.0 / 365.0 # m^2/day\n\nQ = cumulative_heat_loss_variable_area_limit(Ts, To, α, K, A_dot, t, t1) / \n                                                                        1e6 # MJ\n\ndf_Q = DataFrame(t = t, year = t / 365.0, Q = Q);\n\n@df df_Q plot(:t, :Q, \nxlabel = \"Time (days)\", \nylabel = \"Heat loss to overburden (MJoules)\",\nlabel = \"A_dot = 10000 m^2/year\",\nlw = 3, \nlegend=:topleft,\nlegendfontsize = 10,\nframe=:box)\nxgrid!(:on, :cadetblue, 2, :dashdot, 0.4)\nygrid!(:on, :cadetblue, 2, :dashdot, 0.4)\n\n\n\n\nThe annual heat loss to overburden and the steam requirement to compensate for the heat loss to overburden can be calculated as follows:\n\ndf_Q_sub = df_Q[df_Q.year .== round.(df_Q.year, digits = 0), :]\ndf_Q_sub[!, :Q_lag] = lag(df_Q_sub.Q, 1)\ndf_Q_sub[!, :Q_incremental] = df_Q_sub.Q - df_Q_sub.Q_lag\ndf_Q_sub[!, :steam_requirement] = df_Q_sub.Q_incremental ./ \n                                        net_heat_per_tonne_of_steam\n\n@df df_Q_sub bar(:year, :steam_requirement,\nxlabel = \"Time (Year)\",\nylabel = \"Steam requirement (tonnes)\",\ntitle = \"Annual Steam Requirement\",\nlabel = \"A_dot = 10000 m^2/year\",\nlw = 3,\nlegend=:topright,\nlegendfontsize = 10,\nframe=:box)\nxgrid!(:on, :cadetblue, 2, :dashdot, 0.4)\nygrid!(:on, :cadetblue, 2, :dashdot, 0.4)\n\n\n\n\nThe rate of heat loss to overburden can be estimated as follows:\nFor \\(t \\leq t_{1}\\):\n\\[q = 2 \\frac{(T_{s} - T_{o}) \\cdot K \\cdot \\dot{A}} {\\sqrt{\\pi \\alpha}} [t^{0.5}] \\]\nand for \\(t \\gt t_{1}\\):\n\\[q = 2 \\frac{(T_{s} - T_{o}) \\cdot K \\cdot \\dot{A}} {\\sqrt{\\pi \\alpha}} [t^{0.5} - (t - t_{1})^{0.5}] \\]\nHere’s a function that calculates the rate of heat loss to overburden for the scenario where surface area increases to a limit and then stops expanding.\n\nfunction heat_loss_rate_variable_area_limit(Ts, To, α, κ, A_dot, t, t1)\n    \n    q = zeros(length(t))\n    for i in 1:length(t)\n        if t[i] <= t1\n            q[i] = 2.0 * (Ts - To) * K * A_dot / sqrt(π * α) * \n            (t[i] ^ 0.5)\n        else\n            q[i] = 2.0 * (Ts - To) * K * A_dot / sqrt(π * α) * \n            (t[i] ^ 0.5 - (t[i] - t1) ^ 0.5)\n        end\n    end\n    return q\nend;\n\nThe results for the rate of heat loss to overburden are shown below.\n\nq = heat_loss_rate_variable_area_limit(Ts, To, α, K, A_dot, t, t1) / 1e6 # MJ/day\n\ndf_q = DataFrame(t = t, year = t / 365.0, q = q)\n\n@df df_q plot(:t, :q, \nxlabel = \"Time (days)\", \nylabel = \"Rate of heat loss to overburden (MJoules/day)\",\nlabel = \"A_dot = 10000 m^2/year\",\nlw = 3, \nlegend=:bottomright,\nlegendfontsize = 10,\nframe=:box)\nxgrid!(:on, :cadetblue, 2, :dashdot, 0.4)\nygrid!(:on, :cadetblue, 2, :dashdot, 0.4)"
  },
  {
    "objectID": "posts/python-posts/Oilsands Data Analysis Part I/index.html",
    "href": "posts/python-posts/Oilsands Data Analysis Part I/index.html",
    "title": "Alberta In-situ Oilsands Production Analysis using Python - Part I",
    "section": "",
    "text": "The information provided in this blog post is for educational purposes only. Commercial use of this information is prohibited. For information on the copyright and permission to reproduce, please visit the AER Copyright and Disclaimer page at AER Copyright and Disclaimer.\nThe author assumes no responsibility for any damage or loss resulting from the use of the information provided in this blog post."
  },
  {
    "objectID": "posts/python-posts/Oilsands Data Analysis Part I/index.html#listing-all-the-saved-xls-files",
    "href": "posts/python-posts/Oilsands Data Analysis Part I/index.html#listing-all-the-saved-xls-files",
    "title": "Alberta In-situ Oilsands Production Analysis using Python - Part I",
    "section": "Listing all the saved xls files",
    "text": "Listing all the saved xls files\n\nimport os\n# filter only .xls files\nxls_files = [file for file in os.listdir(os.getcwd()) if file.endswith('.xls')]\nxls_files\n\n['ST53_2010-12.xls',\n 'ST53_2011-12.xls',\n 'ST53_2012-12.xls',\n 'ST53_2013-12.xls',\n 'ST53_2014-12.xls',\n 'ST53_2016-12.xls',\n 'ST53_2017-12.xls',\n 'ST53_2018-12.xls',\n 'ST53_2019-12.xls',\n 'ST53_2020-12.xls',\n 'ST53_2021-12.xls',\n 'ST53_2022-12.xls',\n 'ST53_Current.xls']\n\n\nIn the next post, I will show how to read the data from the .xls files and prepare the datasets for further analysis. This analysis will provide insights into the production trends and patterns of in-situ oilsands projects in Alberta."
  },
  {
    "objectID": "posts/python-posts/Oilsands Data Analysis Part II/index.html",
    "href": "posts/python-posts/Oilsands Data Analysis Part II/index.html",
    "title": "Alberta In-situ Oilsands Production Analysis using Python - Part II",
    "section": "",
    "text": "This blog post is for educational purposes only. Any commercial use of the information provided in this blog post is prohibited. For more information about the AER copyright and permission to reproduce, please visit AER Copyright and Disclaimer. The author is not responsible for any damage or loss caused by the use of the information provided in this blog post."
  },
  {
    "objectID": "posts/python-posts/Oilsands Data Analysis Part II/index.html#reading-the-first-file",
    "href": "posts/python-posts/Oilsands Data Analysis Part II/index.html#reading-the-first-file",
    "title": "Alberta In-situ Oilsands Production Analysis using Python - Part II",
    "section": "Reading the first file",
    "text": "Reading the first file\nTo start, we read the data from the ST53_2010.xls file using the read_excel function from the pandas library. We set the sheet_name argument to None to read all the sheets in the file. We also use the skiprows argument to skip the first three rows of each sheet. Finally, we use the keys() method to print the names of the sheets in the file.\n\nsheets = pd.read_excel(xls_files[0], sheet_name = None, skiprows = 3)\nprint(f'sheet names: {sheets.keys()}')\n\nsheet names: dict_keys(['BITUMEN', 'WATER', 'STEAM', 'WELLS', 'SOR', 'WSR'])"
  },
  {
    "objectID": "posts/python-posts/Oilsands Data Analysis Part II/index.html#reading-the-bitumen-sheet",
    "href": "posts/python-posts/Oilsands Data Analysis Part II/index.html#reading-the-bitumen-sheet",
    "title": "Alberta In-situ Oilsands Production Analysis using Python - Part II",
    "section": "Reading the BITUMEN sheet",
    "text": "Reading the BITUMEN sheet\n\n# read the BITUMEN sheet\nbitumen_2010 = sheets['BITUMEN']\n\nThe info method is used to print the column names and data types of each column in the DataFrame.\n\nbitumen_2010.info()\n\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 177 entries, 0 to 176\nData columns (total 18 columns):\n #   Column           Non-Null Count  Dtype  \n---  ------           --------------  -----  \n 0   Operator         172 non-null    object \n 1   Scheme Name      26 non-null     object \n 2   Area             163 non-null    object \n 3   Approval Number  163 non-null    object \n 4   Recovery Method  164 non-null    object \n 5   Jan              166 non-null    float64\n 6   Feb              166 non-null    float64\n 7   Mar              166 non-null    float64\n 8   Apr              165 non-null    float64\n 9   May              165 non-null    float64\n 10  Jun              162 non-null    float64\n 11  Jul              162 non-null    float64\n 12  Aug              162 non-null    float64\n 13  Sep              161 non-null    float64\n 14  Oct              159 non-null    float64\n 15  Nov              159 non-null    float64\n 16  Dec              156 non-null    float64\n 17  Monthly Average  153 non-null    float64\ndtypes: float64(13), object(5)\nmemory usage: 25.0+ KB\n\n\nThe head method is used to display the first 5 rows of the DataFrame.\n\nbitumen_2010.head()\n\n\n\n\n\n  \n    \n      \n      Operator\n      Scheme Name\n      Area\n      Approval Number\n      Recovery Method\n      Jan\n      Feb\n      Mar\n      Apr\n      May\n      Jun\n      Jul\n      Aug\n      Sep\n      Oct\n      Nov\n      Dec\n      Monthly Average\n    \n  \n  \n    \n      0\n      Canadian Natural Resources Limited\n      NaN\n      Cold Lake\n      4746P\n      Commercial\n      587.48\n      596.72\n      637.59\n      678.74\n      705.61\n      718.99\n      697.25\n      696.88\n      763.21\n      702.21\n      696.32\n      674.99\n      679.67\n    \n    \n      1\n      Canadian Natural Resources Limited\n      NaN\n      Cold Lake\n      6726I\n      Commercial\n      171.54\n      193.66\n      187.71\n      177.54\n      176.90\n      174.50\n      160.53\n      155.97\n      168.22\n      168.27\n      139.73\n      143.48\n      168.17\n    \n    \n      2\n      Baytex Energy Ltd. (¹)\n      Cliffdale Pilot\n      Peace River Area 2\n      11034E\n      Commercial-CSS\n      0.00\n      2.55\n      6.15\n      2.25\n      4.16\n      10.59\n      5.83\n      3.27\n      9.18\n      20.09\n      15.42\n      13.15\n      8.42\n    \n    \n      3\n      North Peace Energy Corp.\n      Red Earth\n      Peace River Area 2\n      11209A\n      Commercial-CSS\n      10.30\n      4.70\n      3.11\n      2.21\n      1.63\n      0.51\n      0.00\n      0.00\n      0.40\n      0.00\n      0.00\n      0.00\n      3.27\n    \n    \n      4\n      Penn West Petroleum Ltd.\n      Seal\n      Peace River Area 2\n      11377A\n      Commercial-CSS\n      0.00\n      0.00\n      0.00\n      0.00\n      0.00\n      0.00\n      0.00\n      0.00\n      0.00\n      0.00\n      0.00\n      0.00\n      NaN\n    \n  \n\n\n\n\nThe tail method is used to print the last 20 rows of the DataFrame.\n\nbitumen_2010.tail(20)\n\n\n\n\n\n  \n    \n      \n      Operator\n      Scheme Name\n      Area\n      Approval Number\n      Recovery Method\n      Jan\n      Feb\n      Mar\n      Apr\n      May\n      Jun\n      Jul\n      Aug\n      Sep\n      Oct\n      Nov\n      Dec\n      Monthly Average\n    \n  \n  \n    \n      157\n      Bronco Energy Ltd.\n      NaN\n      Athabasca\n      9774E\n      Primary\n      28.65\n      28.58\n      27.94\n      22.84\n      91.39\n      80.23\n      77.59\n      83.21\n      64.28\n      74.45\n      69.66\n      63.98\n      59.40\n    \n    \n      158\n      Devon Canada Corporation\n      NaN\n      Cold Lake\n      9821\n      Primary\n      4.00\n      3.41\n      3.42\n      0.00\n      1.87\n      0.00\n      1.74\n      1.04\n      4.18\n      4.09\n      1.94\n      2.76\n      2.85\n    \n    \n      159\n      Frog Lake Energy Resources Corp.\n      NaN\n      Cold Lake\n      9827B\n      Primary\n      11.42\n      5.22\n      5.11\n      8.76\n      12.08\n      16.21\n      13.78\n      11.12\n      17.36\n      18.75\n      19.41\n      22.18\n      13.45\n    \n    \n      160\n      Husky Oil Operations Limited\n      NaN\n      Cold Lake\n      9873\n      Primary\n      12.32\n      12.80\n      12.66\n      11.27\n      12.93\n      11.56\n      11.63\n      11.27\n      10.62\n      10.79\n      11.50\n      10.50\n      11.65\n    \n    \n      161\n      Canadian Natural Resources Limited\n      NaN\n      Athabasca\n      9884D\n      Primary\n      65.64\n      68.55\n      69.79\n      64.72\n      68.09\n      64.18\n      63.37\n      66.10\n      64.25\n      62.55\n      59.87\n      55.29\n      64.37\n    \n    \n      162\n      Koch Exploration Canada G/P Ltd. (¹)\n      NaN\n      Cold Lake\n      9908D\n      Primary\n      0.00\n      0.00\n      0.00\n      0.00\n      0.00\n      0.00\n      0.00\n      0.00\n      0.00\n      0.00\n      0.00\n      0.00\n      NaN\n    \n    \n      163\n      NaN\n      NaN\n      NaN\n      NaN\n      Total\n      109423.83\n      116311.68\n      120054.09\n      116601.43\n      121671.30\n      122439.61\n      122234.75\n      121215.19\n      108260.73\n      118808.23\n      128196.96\n      129913.57\n      119594.28\n    \n    \n      164\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n    \n    \n      165\n      Conventional Bitumen Recovery\n      NaN\n      NaN\n      NaN\n      NaN\n      537.49\n      544.67\n      560.36\n      541.87\n      560.71\n      524.96\n      482.84\n      555.27\n      555.21\n      545.33\n      601.13\n      593.86\n      550.31\n    \n    \n      166\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n    \n    \n      167\n      Total\n      NaN\n      NaN\n      NaN\n      NaN\n      109961.32\n      116856.35\n      120614.45\n      117143.30\n      122232.01\n      122964.57\n      122717.59\n      121770.46\n      108815.94\n      119353.56\n      128798.09\n      130507.43\n      120144.59\n    \n    \n      168\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n    \n    \n      169\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n    \n    \n      170\n      Notes:\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n    \n    \n      171\n      - Monthly production totals may be revised due...\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n    \n    \n      172\n      - Total may not add due to rounding\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n    \n    \n      173\n      - Conventional Bitumen production consists of ...\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n    \n    \n      174\n      - Monthly average does not include months ther...\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n    \n    \n      175\n      ¹ Amended this month\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n    \n    \n      176\n      ¹ Amended this month\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n    \n  \n\n\n\n\nSince the number of producers in the file can vary, we cannot rely on a fixed index number to subset the dataset. However, the last row of the dataset always contains a summary of the total production, which is identified by the cell value of Total in the Recovery Method column. Therefore, we can use the index number of the row with Total in the Recovery Method column to subset the dataset and exclude the summary row and any other rows with additional information.\n\n# get the index of the last row using np.where\nlast_row_idx = np.where(bitumen_2010[[\"Recovery Method\"]] == \"Total \")[0][0]\nbitumen_2010 = bitumen_2010.iloc[:last_row_idx, :]\n\nIn addition, we can remove the Monthly Average column from the dataset since we will be aggregating the data in our analysis and therefore do not need the monthly averages.\n\nbitumen_2010 = bitumen_2010.drop(columns = ['Monthly Average'])"
  },
  {
    "objectID": "posts/python-posts/Oilsands Data Analysis Part II/index.html#cleaning-the-operator-column",
    "href": "posts/python-posts/Oilsands Data Analysis Part II/index.html#cleaning-the-operator-column",
    "title": "Alberta In-situ Oilsands Production Analysis using Python - Part II",
    "section": "Cleaning the Operator column",
    "text": "Cleaning the Operator column\nLet’s take a look at the Operator column.\n\nbitumen_2010['Operator'].unique()\n\narray(['Canadian Natural Resources Limited', 'Baytex Energy Ltd. (¹)',\n       'North Peace Energy Corp.', 'Penn West Petroleum Ltd.',\n       'Baytex Energy Ltd. (¹²)', 'Shell Canada Limited',\n       'Imperial Oil Resources (¹)',\n       'Canadian Natural Resources Limited (¹)',\n       'Devon NEC Corporation (¹)', 'Connacher Oil And Gas Limited',\n       'Meg Energy Corp.', 'Statoil Canada Ltd. (¹)',\n       'Cenovus Energy Inc.', 'Cenovus FCCL Ltd.', 'Suncor Energy Inc.',\n       'Japan Canada Oil Sands Limited (¹)', 'Suncor Energy Inc. (¹)',\n       'Total E&P Joslyn Ltd. (¹)',\n       'ConocoPhillips Canada Resources Corp.',\n       'ConocoPhillips Canada Limited', 'Nexen Inc.',\n       'Husky Oil Operations Limited', 'Canadian Natural Resources',\n       'Murphy Oil Company Ltd.', 'Cenovus Energy Inc. (¹)',\n       'Prosper Petroleum Ltd.', 'Penn West Energy Trust',\n       'Baytex Energy Ltd.', 'Shell Canada Energy',\n       'Husky Oil Operations Ltd.', 'Action Energy Inc.',\n       'Devon Canada Corporation', 'Bonavista Petroleum Ltd.',\n       'Murphy Oil Canada', 'Watch Resources Ltd.',\n       'Manitok Exploration Inc.', 'Koch Exploration Canada G/P Ltd.',\n       'Husky Oil Operations Limited (et Al)', 'Twin Butte Energy Ltd.',\n       'Sunshine Oilsands Ltd.', 'Solara Exploration Ltd.',\n       'Canadian Natural Resources Limited (¹²)',\n       'Bellatrix Exploration Ltd. (¹²)', 'Blackpearl Resources Inc. (¹)',\n       'Crispin Energy Inc.', 'Husky Oil Operations Limited (¹)',\n       'Buffalo Resources Corp.', 'ExxonMobil Canada Ltd.',\n       'Harvest Operations Corp.', 'Bronco Energy Ltd.',\n       'Frog Lake Energy Resources Corp.',\n       'Koch Exploration Canada G/P Ltd. (¹)'], dtype=object)\n\n\nThe Operator column contains several names that are followed by (subscripts). These additional pieces of information create inconsistencies in the Operator column and add unnecessary complexity to the dataset. Since they are not needed for our analysis, we can remove them using the replace method.\n\nbitumen_2010['Operator'] = bitumen_2010['Operator'].str.replace(r'\\(.*\\)', '').str.strip()\nbitumen_2010['Operator'].unique()\n\narray(['Canadian Natural Resources Limited', 'Baytex Energy Ltd.',\n       'North Peace Energy Corp.', 'Penn West Petroleum Ltd.',\n       'Shell Canada Limited', 'Imperial Oil Resources',\n       'Devon NEC Corporation', 'Connacher Oil And Gas Limited',\n       'Meg Energy Corp.', 'Statoil Canada Ltd.', 'Cenovus Energy Inc.',\n       'Cenovus FCCL Ltd.', 'Suncor Energy Inc.',\n       'Japan Canada Oil Sands Limited', 'Total E&P Joslyn Ltd.',\n       'ConocoPhillips Canada Resources Corp.',\n       'ConocoPhillips Canada Limited', 'Nexen Inc.',\n       'Husky Oil Operations Limited', 'Canadian Natural Resources',\n       'Murphy Oil Company Ltd.', 'Prosper Petroleum Ltd.',\n       'Penn West Energy Trust', 'Shell Canada Energy',\n       'Husky Oil Operations Ltd.', 'Action Energy Inc.',\n       'Devon Canada Corporation', 'Bonavista Petroleum Ltd.',\n       'Murphy Oil Canada', 'Watch Resources Ltd.',\n       'Manitok Exploration Inc.', 'Koch Exploration Canada G/P Ltd.',\n       'Twin Butte Energy Ltd.', 'Sunshine Oilsands Ltd.',\n       'Solara Exploration Ltd.', 'Bellatrix Exploration Ltd.',\n       'Blackpearl Resources Inc.', 'Crispin Energy Inc.',\n       'Buffalo Resources Corp.', 'ExxonMobil Canada Ltd.',\n       'Harvest Operations Corp.', 'Bronco Energy Ltd.',\n       'Frog Lake Energy Resources Corp.'], dtype=object)\n\n\nThe operator names in the dataset may contain inconsistencies where some operators are listed with different names. To make the names consistent, we can create a dictionary with the names to be replaced and the new names. However, it’s important to note that the following dictionary may contain additional names that are not in the 2010 dataset. This dictionary was created using data from all the files between 2010 and 2022.\n\n# create a dictionary to make Operator names consistent\noperators_dict = {'Athabasca Oil Corporation': 'Athabasca Oil',\n                  'Baytex Energy Ltd.': 'Baytex',\n                  'Blackpearl Resources Inc.': 'BlackPearl',\n                  'BlackPearl Resources Inc.': 'BlackPearl',\n                  'Bonavista Petroleum Ltd.': 'Bonavista',\n                  'Bonavista Energy Corporation': 'Bonavista',\n                  'CNOOC Petroleum North America ULC': 'CNOOC',\n                  'Canadian Natural Resources': 'CNRL',\n                  'Canadian Natural Resources Limited': 'CNRL',\n                  'Canadian Natural Upgrading Limited': 'CNRL',\n                  'Cenovus Energy Inc.': 'Cenovus',\n                  'Cenovus FCCL Ltd.': 'Cenovus',\n                  'ConocoPhillips Canada Resources Corp.': 'ConocoPhillips',\n                  'ConocoPhillips Canada Limited': 'ConocoPhillips',\n                  'Devon Canada Corporation': 'Devon',\n                  'Devon NEC Corporation': 'Devon',\n                  'ExxonMobil Canada Ltd.': 'Imperial',\n                  'Greenfire Hangingstone Operating Corporation': 'Greenfire',\n                  'Greenfire Resources Operating Corporation': 'Greenfire',\n                  'Husky Oil Operations Limited' : 'Husky',\n                  'Husky Oil Operations Ltd.' : 'Husky',\n                  'Imperial Oil Resources': 'Imperial',\n                  'Imperial Oil Resources Limited': 'Imperial',\n                  'Islander Oil & Gas Inc.': 'Islander',\n                  'Koch Exploration Canada G/P Ltd.': 'Koch',\n                  'Koch Oil Sands Operating ULC': 'Koch',\n                  'MEG Energy Corp.': 'MEG',\n                  'Meg Energy Corp.': 'MEG',\n                  'Murphy Oil Canada': 'Murphy',\n                  'Murphy Oil Company Ltd.': 'Murphy',\n                  'Nexen Energy ULC': 'Nexen',\n                  'Nexen Inc.': 'Nexen',\n                  'Obsidian Energy Ltd.': 'Obsidian',\n                  'OSUM Oil Sands Corp.': 'OSUM',\n                  'Osum Production Corp.': 'OSUM',\n                  'Pengrowth Corporation': 'Pengrowth',\n                  'Pengrowth Energy Corporation': 'Pengrowth',\n                  'Penn West Energy Trust': 'Penn West',\n                  'Penn West Petroleum Ltd.': 'Penn West',\n                  'Perpetual Energy Inc.': 'Perpetual',\n                  'Perpetual Energy Operating Corp.': 'Perpetual',\n                  'Perpetual Operating Corp.': 'Perpetual',\n                  'PetroChina Canada Ltd.': 'PetroChina',\n                  'Petrochina Canada Ltd.': 'PetroChina',\n                  'Strathcona Resources Ltd.': 'Strathcona',\n                  'Shell Canada Energy': 'Shell',\n                  'Shell Canada Limited': 'Shell',\n                  'Spur Petroleum Ltd.': 'Spur',\n                  'Spur Resources Ltd.': 'Spur',\n                  'Suncor Energy Inc.': 'Suncor',\n                  'Woodcote Oil & Gas Inc.': 'Woodcote',\n                  'Woodcote Oil Corp.': 'Woodcote'\n                  }\n\n\n# replace the names in the Operator column\nbitumen_2010['Operator'] = bitumen_2010['Operator'].replace(operators_dict)\nbitumen_2010['Operator'].unique()\n\narray(['CNRL', 'Baytex', 'North Peace Energy Corp.', 'Penn West', 'Shell',\n       'Imperial', 'Devon', 'Connacher Oil And Gas Limited', 'MEG',\n       'Statoil Canada Ltd.', 'Cenovus', 'Suncor',\n       'Japan Canada Oil Sands Limited', 'Total E&P Joslyn Ltd.',\n       'ConocoPhillips', 'Nexen', 'Husky', 'Murphy',\n       'Prosper Petroleum Ltd.', 'Action Energy Inc.', 'Bonavista',\n       'Watch Resources Ltd.', 'Manitok Exploration Inc.', 'Koch',\n       'Twin Butte Energy Ltd.', 'Sunshine Oilsands Ltd.',\n       'Solara Exploration Ltd.', 'Bellatrix Exploration Ltd.',\n       'BlackPearl', 'Crispin Energy Inc.', 'Buffalo Resources Corp.',\n       'Harvest Operations Corp.', 'Bronco Energy Ltd.',\n       'Frog Lake Energy Resources Corp.'], dtype=object)\n\n\nIt should be noted that there have been a number of acquisitions and mergers in the oil and gas industry in recent years, and this can lead to inconsistencies in the naming of operators across different years. However, for the sake of simplicity, we will ignore these changes and assume that operator names remain consistent across all years."
  },
  {
    "objectID": "posts/python-posts/Oilsands Data Analysis Part II/index.html#simplifiying-the-area-column",
    "href": "posts/python-posts/Oilsands Data Analysis Part II/index.html#simplifiying-the-area-column",
    "title": "Alberta In-situ Oilsands Production Analysis using Python - Part II",
    "section": "Simplifiying the Area column",
    "text": "Simplifiying the Area column\nTo simplify the Area column, we can replace the values Peace River Area 1 and Peace River Area 2 with a single value Peace River. This is done to aggregate the production data for the Peace River area.\n\nbitumen_2010['Area'] = bitumen_2010['Area'].replace({'Peace River Area 1': 'Peace River', 'Peace River Area 2': 'Peace River'}) \nbitumen_2010['Area'].unique()\n\narray(['Cold Lake', 'Peace River', 'Athabasca, Cold Lake', 'Athabasca'],\n      dtype=object)\n\n\nThere is only one row with an Area value of Athabasca, Cold Lake. To make it consistent with the other rows, we can change it to Cold Lake.\n\nbitumen_2010['Area'] = bitumen_2010['Area'].replace({'Athabasca, Cold Lake': 'Cold Lake'})\n\nWe also add a Year column to the dataframe.\n\nbitumen_2010['Year'] = int(xls_files[0].split('_')[-1].split('-')[0])\nbitumen_2010['Year'].unique()\n\narray([2010], dtype=int64)"
  },
  {
    "objectID": "posts/python-posts/Oilsands Data Analysis Part III/index.html",
    "href": "posts/python-posts/Oilsands Data Analysis Part III/index.html",
    "title": "Alberta In-situ Oilsands Production Analysis using Python - Part III",
    "section": "",
    "text": "This blog post is for educational purposes only. Any commercial use of the information provided in this blog post is prohibited. For more information about the AER copyright and permission to reproduce, please visit AER Copyright and Disclaimer. The author is not responsible for any damage or loss caused by the use of the information provided in this blog post."
  },
  {
    "objectID": "posts/python-posts/Oilsands Data Analysis Part III/index.html#alberta-average-bitumen-production-rate-per-year",
    "href": "posts/python-posts/Oilsands Data Analysis Part III/index.html#alberta-average-bitumen-production-rate-per-year",
    "title": "Alberta In-situ Oilsands Production Analysis using Python - Part III",
    "section": "Alberta average bitumen production rate per year",
    "text": "Alberta average bitumen production rate per year\nThe daily bitumen production rate is reported as a monthly average in m3/day. An approximation of the yearly average production rate in m3/day is calculated by taking the average of the monthly average production rates. The yearly average production rate is then converted to Mm3/day by dividing it by 1,000.\n\n# Calculate the average daily production rate for each year\nbitumen_agg = (bitumen\n              .assign(Production_Rate = lambda x: x.loc[:,\"Jan\":\"Dec\"].mean(axis = 1))\n              .drop(columns = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'])\n              .groupby(['Year'])\n              .sum()\n              .div(1000)\n              .reset_index()\n              )\nbitumen_agg\n\n\n\n\n\n  \n    \n      \n      Year\n      Production_Rate\n    \n  \n  \n    \n      0\n      2010\n      119.596470\n    \n    \n      1\n      2011\n      134.691030\n    \n    \n      2\n      2012\n      157.040421\n    \n    \n      3\n      2013\n      175.839908\n    \n    \n      4\n      2014\n      200.679804\n    \n    \n      5\n      2016\n      220.765067\n    \n    \n      6\n      2017\n      245.572865\n    \n    \n      7\n      2018\n      249.694999\n    \n    \n      8\n      2019\n      245.745934\n    \n    \n      9\n      2020\n      237.340961\n    \n    \n      10\n      2021\n      264.391272\n    \n    \n      11\n      2022\n      269.899715\n    \n  \n\n\n\n\nLet’s see the yearly average production rate in Mm3/day.\n\n# Plot the yearly average production rate\nplt.figure(figsize = (8, 6))\nsns.barplot(x = 'Year', y = 'Production_Rate', data = bitumen_agg)\nplt.title('Alberta average bitumen production rate')\nplt.xlabel('Year')\nplt.ylabel('Production Rate (Mm3/day)')\nplt.show()"
  },
  {
    "objectID": "posts/python-posts/Oilsands Data Analysis Part III/index.html#largest-bitumen-producers-in-alberta-since-2010",
    "href": "posts/python-posts/Oilsands Data Analysis Part III/index.html#largest-bitumen-producers-in-alberta-since-2010",
    "title": "Alberta In-situ Oilsands Production Analysis using Python - Part III",
    "section": "Largest bitumen producers in Alberta since 2010",
    "text": "Largest bitumen producers in Alberta since 2010\nThe top 10 largest bitumen producers in Alberta since 2010 are listed below. The data is sorted by the total bitumen production in descending order. The total bitumen production rate is converted to MMm3/day by dividing by 1,000,000.\n\n# Calculate the total bitumen production rate for each operator\nbitumen_agg = (bitumen\n              .assign(Cumulative_Production = lambda x: x.loc[:,\"Jan\":\"Dec\"].sum(axis = 1) * 365)\n              .drop(columns = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec', 'Year'])\n              .groupby(['Operator'])\n              .sum()\n              .div(1_000_000)\n              .sort_values(by = 'Cumulative_Production', ascending = False)\n              .reset_index()\n              .head(10)\n              )\nbitumen_agg \n\n\n\n\n\n  \n    \n      \n      Operator\n      Cumulative_Production\n    \n  \n  \n    \n      0\n      Cenovus\n      2561.630674\n    \n    \n      1\n      CNRL\n      2266.675729\n    \n    \n      2\n      Suncor\n      1550.949426\n    \n    \n      3\n      Imperial\n      1249.998787\n    \n    \n      4\n      ConocoPhillips\n      668.101066\n    \n    \n      5\n      Devon\n      533.488187\n    \n    \n      6\n      MEG\n      531.186018\n    \n    \n      7\n      Husky\n      359.571866\n    \n    \n      8\n      Nexen\n      157.297422\n    \n    \n      9\n      CNOOC\n      146.821801\n    \n  \n\n\n\n\nThe figure below illustrates the top 10 largest bitumen producers in Alberta since 2010.\n\n# Plot the top 10 largest bitumen producers in Alberta since 2010\nplt.figure(figsize = (8, 6))\nsns.barplot(x = 'Cumulative_Production', y = 'Operator', data = bitumen_agg)\nplt.title('Top 10 largest bitumen producers in Alberta since 2010')\nplt.xlabel('Cumulative Production (MMm3)')\nplt.ylabel('Operator')\nplt.show()"
  },
  {
    "objectID": "posts/python-posts/Oilsands Data Analysis Part III/index.html#largest-bitumen-producers-in-alberta-in-2022",
    "href": "posts/python-posts/Oilsands Data Analysis Part III/index.html#largest-bitumen-producers-in-alberta-in-2022",
    "title": "Alberta In-situ Oilsands Production Analysis using Python - Part III",
    "section": "Largest bitumen producers in Alberta in 2022",
    "text": "Largest bitumen producers in Alberta in 2022\nThe top 10 largest bitumen producers in Alberta in 2022 are listed below. The data is sorted by the bitumen production rate in descending order. The yearly bitumen production rate is converted to Mm3/day by dividing by 1,000.\n\n# Calculate the yearly bitumen production rate for each operator\nbitumen_agg = (bitumen\n              .query(\"Year == 2022\")\n              .assign(Production_Rate = lambda x: x.loc[:,\"Jan\":\"Dec\"].mean(axis = 1))\n              .drop(columns = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec', 'Year'])\n              .groupby(['Operator'])\n              .sum()\n              .div(1000)\n              .sort_values(by = 'Production_Rate', ascending = False)\n              .reset_index()\n              .head(10)\n              )\nbitumen_agg\n\n\n\n\n\n  \n    \n      \n      Operator\n      Production_Rate\n    \n  \n  \n    \n      0\n      Cenovus\n      76.725747\n    \n    \n      1\n      CNRL\n      55.968093\n    \n    \n      2\n      Suncor\n      36.721742\n    \n    \n      3\n      Imperial\n      23.121582\n    \n    \n      4\n      ConocoPhillips\n      22.142553\n    \n    \n      5\n      MEG\n      14.758539\n    \n    \n      6\n      Strathcona\n      7.995144\n    \n    \n      7\n      CNOOC\n      7.562969\n    \n    \n      8\n      Athabasca Oil\n      4.610921\n    \n    \n      9\n      Greenfire\n      4.151495\n    \n  \n\n\n\n\nThe top 10 largest bitumen producers in Alberta in 2022 are shown in the plot below.\n\n# Plot the top 10 largest bitumen producers in Alberta in 2022\nplt.figure(figsize = (8, 6))\nsns.barplot(x = 'Production_Rate', y = 'Operator', data = bitumen_agg)\nplt.title('Top 10 largest bitumen producers in Alberta in 2022')\nplt.xlabel('Production Rate (Mm3/day)')\nplt.ylabel('Operator')\nplt.show()"
  },
  {
    "objectID": "posts/python-posts/Oilsands Data Analysis Part III/index.html#largest-bitumen-producers-in-alberta-in-2022-by-area",
    "href": "posts/python-posts/Oilsands Data Analysis Part III/index.html#largest-bitumen-producers-in-alberta-in-2022-by-area",
    "title": "Alberta In-situ Oilsands Production Analysis using Python - Part III",
    "section": "Largest bitumen producers in Alberta in 2022 by area",
    "text": "Largest bitumen producers in Alberta in 2022 by area\nThe top 5 largest 2022 bitumen producers by area in Alberta are listed below. The data is sorted by the bitumen production rate in descending order. The yearly bitumen production rate is converted to Mm3/day by dividing by 1,000.\n\n# Calculate the yearly bitumen production rate for each operator by area\nbitumen_agg = (bitumen\n              .query(\"Year == 2022\")\n              .assign(Production_Rate = lambda x: x.loc[:,\"Jan\":\"Dec\"].mean(axis = 1))\n              .drop(columns = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec', 'Year'])\n              .groupby(['Area', 'Operator'])\n              .sum()\n              .div(1000)\n              .sort_values(by = 'Production_Rate', ascending = False)\n              .groupby('Area')\n              .head(5)\n              .reset_index()\n              )\nbitumen_agg\n\n\n\n\n\n  \n    \n      \n      Area\n      Operator\n      Production_Rate\n    \n  \n  \n    \n      0\n      Athabasca\n      Cenovus\n      76.565583\n    \n    \n      1\n      Athabasca\n      CNRL\n      36.756985\n    \n    \n      2\n      Athabasca\n      Suncor\n      36.721742\n    \n    \n      3\n      Cold Lake\n      Imperial\n      23.121582\n    \n    \n      4\n      Athabasca\n      ConocoPhillips\n      22.142553\n    \n    \n      5\n      Cold Lake\n      CNRL\n      17.712652\n    \n    \n      6\n      Athabasca\n      MEG\n      14.758539\n    \n    \n      7\n      Cold Lake\n      Strathcona\n      7.995144\n    \n    \n      8\n      Peace River\n      Baytex\n      2.889908\n    \n    \n      9\n      Peace River\n      CNRL\n      1.498456\n    \n    \n      10\n      Peace River\n      Obsidian\n      0.889067\n    \n    \n      11\n      Cold Lake\n      Baytex\n      0.308280\n    \n    \n      12\n      Peace River\n      Islander\n      0.273017\n    \n    \n      13\n      Cold Lake\n      Cenovus\n      0.160163\n    \n    \n      14\n      Peace River\n      Woodcote\n      0.031730\n    \n  \n\n\n\n\nThe figure below shows the top 5 largest bitumen producers in Alberta in 2022 by area.\n\nfig, ax = plt.subplots(3, 1, figsize = (6, 15))\nfor i, area in enumerate(bitumen_agg['Area'].unique()):\n    sns.barplot(x = 'Production_Rate', y = 'Operator', data = bitumen_agg.query(\"Area == @area\"), ax = ax[i])\n    ax[i].set_title(area)\n    ax[i].set_xlabel('Production Rate (Mm3/day)')\n    ax[i].set_ylabel('Operator')\nfig.subplots_adjust(top = 0.95)\nplt.show()"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "Welcome to my weblog!\nMy goal with this blog is to share my expertise and experience with Julia, R, and Python in the domains of petroleum and process engineering. Through my posts, I will cover various topics that are relevant to the oil and gas industry, including engineering modeling, data visualization, data analysis, and machine learning applications.\nAs a process analytics engineer, I rely heavily on R for its powerful machine learning capabilities. I have extensive experience with R, having contributed several petroleum engineering packages to the CRAN repository and written several R packages for my own use. My experience with R has given me valuable insights into its potential applications within the oil and gas industry, and I am excited to share this knowledge with others.\nPython is my language of choice for building infrastructure for automated cloud-based data science projects. I use it for data wrangling, visualization, and deep learning modeling due to its flexibility and versatility. With over 5 years of experience working with Python, I have a deep understanding of how it can be applied to various challenges within the petroleum and process engineering domains.\nJulia is my go-to language for scientific studies and data science projects. I first started using Julia for reservoir and geomechanics studies four years ago and was impressed by its power and versatility in scientific computing. Julia’s exceptional speed and ease of use make it an excellent choice for engineering modeling and simulation tasks. With my experience in utilizing Julia for these purposes, I am excited to share my knowledge of this language and demonstrate its potential applications within the oil and gas industry.\nTo summarize, this blog aims to share my expertise and knowledge of Julia, R, and Python in the fields of petroleum and process engineering. My posts will cover a wide range of topics, with a focus on engineering applications utilizing Julia, and also including posts using Python and R primarily focused on data science and machine learning. I hope my readers will find my content informative and valuable, providing them with insights on how to use these languages for practical engineering applications.\nThe entire weblog is created by the amazing Quarto package which supports Julia, Python, and R languages. A great contribution from the Posit team. Thanks a lot!"
  }
]