[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Julia, Python, and R Applications in Energy Industry",
    "section": "",
    "text": "Thermal Recovery - Part II\n\n\nHeat Conduction in a 1D Reservoir\n\n\n\n\njulia\n\n\nthermal recovery\n\n\nheat conduction\n\n\nheat loss\n\n\n\n\n\n\n\n\n\n\n\nMar 12, 2023\n\n\nFarshad Tabasinejad\n\n\n\n\n\n\n  \n\n\n\n\nThermal Recovery - Part I\n\n\nWater/Steam Properties\n\n\n\n\njulia\n\n\nthermal recovery\n\n\nsteam properties\n\n\nSteamTables.jl\n\n\n\n\n\n\n\n\n\n\n\nMar 11, 2023\n\n\nFarshad Tabasinejad\n\n\n\n\n\n\n  \n\n\n\n\nAlberta In-situ Oilsands Production Analysis using Python - Part III\n\n\nData analysis and visualization\n\n\n\n\npython\n\n\ndata analysis\n\n\ndata visualization\n\n\npandas\n\n\nseaborn\n\n\nmatplotlib\n\n\n\n\n\n\n\n\n\n\n\nMar 5, 2023\n\n\nFarshad Tabasinejad\n\n\n\n\n\n\n  \n\n\n\n\nAlberta In-situ Oilsands Production Analysis using Python - Part II\n\n\nPreparing a tidy dataset for data analysis and visualization\n\n\n\n\npython\n\n\npandas\n\n\ndata analysis\n\n\ndata visualization\n\n\n\n\n\n\n\n\n\n\n\nMar 4, 2023\n\n\nFarshad Tabasinejad\n\n\n\n\n\n\n  \n\n\n\n\nAlberta In-situ Oilsands Production Analysis using Python - Part I\n\n\nData extraction from AER website\n\n\n\n\npython\n\n\nweb scraping\n\n\n\n\n\n\n\n\n\n\n\nFeb 26, 2023\n\n\nFarshad Tabasinejad\n\n\n\n\n\n\n  \n\n\n\n\nWelcome To My Blog\n\n\n\n\n\n\n\nannouncement\n\n\n\n\n\n\n\n\n\n\n\nFeb 25, 2023\n\n\nFarshad Tabasinejad\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Welcome to my weblog! My name is Farshad, and I am excited to share my experiences and insights with you. With 20 years of experience in the petroleum industry and academia, I have worked on reservoir engineering aspects of oilsands and heavy oil reservoirs. I have also been involved in several reservoir modeling and geomechanics studies of unconventional oil and gas reservoirs. Currently, I work as a process analytics consultant in the energy industry, providing engineering and data science solutions to optimize production and maintenance costs of refineries and upgraders.\nWhen I am not working, you can often find me indulging in my passions for hiking, playing table tennis and squash, as well as volleyball and tennis. Additionally, I enjoy watching Real Madrid games as a die-hard Los Blancos fan. Despite my loyalty to Real Madrid, I cannot help but admire the unparalleled talent of Leo Messi (The GOAT), which makes life even more beautiful."
  },
  {
    "objectID": "about.html#areas-of-expertiseinterest",
    "href": "about.html#areas-of-expertiseinterest",
    "title": "About",
    "section": "Areas of Expertise/Interest:",
    "text": "Areas of Expertise/Interest:\n\nComputational Thermodynamics\nReservoir Characterization\nReservoir Simulation\nThermal Recovery\nPTA/RTA\nEOR of Unconventional Reservoirs\nHydraulic Fracturing Modeling and Simulation\nDFIT and DFIT-Flowback Design and Analysis\nProcess Analytics\nArtificial Intelligence\nMachine Learning"
  },
  {
    "objectID": "about.html#education",
    "href": "about.html#education",
    "title": "About",
    "section": "Education",
    "text": "Education\n\nCertificate in Professional Management (PEG) | University of Calgary | 2018\nCertificate in Spanish Language and Culture | University of Calgary | 2016\nPhD in Petroleum Engineering | University of Calgary | 2011\nMEng in Reservoir Engineering | University of Calgary | 2006\nMSc in Reservoir Engineering | Petroleum University of Technology | 2005\nBSc in Reservoir Engineering | Petroleum University of Technology | 2003"
  },
  {
    "objectID": "posts/julia-posts/Thermal Recovery Part II/index.html",
    "href": "posts/julia-posts/Thermal Recovery Part II/index.html",
    "title": "Thermal Recovery - Part II",
    "section": "",
    "text": "This blog post is for educational purposes only. Any commercial use of the information provided in this blog post is prohibited. The author is not responsible for any damage or loss caused by the use of the information provided in this blog post."
  },
  {
    "objectID": "posts/julia-posts/Thermal Recovery Part II/index.html#heat-conduction-from-a-constant-surface-area",
    "href": "posts/julia-posts/Thermal Recovery Part II/index.html#heat-conduction-from-a-constant-surface-area",
    "title": "Thermal Recovery - Part II",
    "section": "1.0 Heat conduction from a constant surface area",
    "text": "1.0 Heat conduction from a constant surface area\nThe rate of heat loss to overburden at the reservoir/overburden interface over a constant surface area (A) is given by:\n\\[q = - K \\cdot A (\\frac{\\partial T}{\\partial x})_{x=0} \\tag{2}\\]\nwhere K is the thermal conductivity, T is the temperature, and x is the distance from the boundary. The cumulative heat loss to overburden is given by:\n\\[Q = \\int_0^t - K \\cdot A (\\frac{\\partial T}{\\partial x})_{_{x=0}} dt \\tag{3}\\]\nwhere \\(t\\) is time. Using the temperature profile given in Equation 1, we can calculate the cumulative heat loss to overburden as:\n\\[Q = 2 (T_{s} - T_{o}) \\cdot K \\cdot A \\sqrt{\\frac{t}{\\pi \\alpha}}\\]\nThe following function is defined to calculate the cumulative heat loss to overburden.\n\nfunction cumulative_heat_loss_constant_area(Ts, To, α, K, A, t)\n    Q = 2.0 * (Ts - To) * K * A * sqrt.(t ./ (π .* α))\n    return Q\nend;\n\nFor a reservoir/overburden interface with a constant surface area of 40,000 \\(\\mathrm m^2\\), the cumulative heat loss to overburden over 10 years is estimated as follows.\n\nt = 0:1.0:10 * 365 # days\n\nA = 40000.0 # m^2\n\nQ = cumulative_heat_loss_constant_area(Ts, To, α, K, A, t) / 1e6 # MJ\n\ndf_Q = DataFrame(t = t, year = t / 365.0, Q = Q)\n\n@df df_Q plot(:t, :Q, \nxlabel = \"Time (days)\", \nylabel = \"Heat loss to overburden (MJoules)\",\nlabel = \"Area = 40000 m^2\",\nlw = 3, \nlegend=:topleft,\nlegendfontsize = 10,\nframe=:box)\nxgrid!(:on, :cadetblue, 2, :dashdot, 0.4)\nygrid!(:on, :cadetblue, 2, :dashdot, 0.4)\n\n\n\n\nThe rate of heat loss to overburden at the reservoir/overburden interface over a constant surface area (A) can be calculated by combining Equation 1 and Equation 2:\n\\[q = (T_{s} - T_{o}) \\cdot K \\cdot A \\sqrt{\\frac{1}{\\pi \\alpha t}}\\]\nHere’s the implementation of the function that calculates the rate of heat loss to overburden using the equation mentioned above:\n\nfunction heat_rate_constant_area(Ts, To, α, K, A, t)\n    q = (Ts - To) * K * A ./ sqrt.(π * α .* t)\n    return q\nend;\n\nThe rate of heat loss to overburden over 10 years is plotted below.\n\nt = 0:1.0:10 * 365 # days\n\nA = 40000.0 # m^2\n\nq = heat_rate_constant_area(Ts, To, α, K, A, t) / 1e6 # MJ/day\n\ndf_q = DataFrame(t = t, year = t / 365.0, q = q)\n\n@df df_q plot(:t, :q, \nxlabel = \"Time (days)\", \nylabel = \"Rate of heat loss to overburden (MJoules/day)\",\nlabel = \"Area = 40000 m^2\",\nlw = 3, \nlegend=:topright,\nlegendfontsize = 10,\nframe=:box)\nxgrid!(:on, :cadetblue, 2, :dashdot, 0.4)\nygrid!(:on, :cadetblue, 2, :dashdot, 0.4)\n\n\n\n\nThe annual heat loss to overburden can be calculated as follows:\n\ndf_Q_sub = df_Q[df_Q.year .== round.(df_Q.year, digits = 0), :]\ndf_Q_sub[!, :Q_lag] = lag(df_Q_sub.Q, 1)\ndf_Q_sub[!, :Q_incremental] = df_Q_sub.Q - df_Q_sub.Q_lag\n\n@df df_Q_sub bar(:year, :Q_incremental, \nxlabel = \"Time (Year)\", \nylabel = \"Heat loss to overburden (MJoules)\",\ntitle = \"Annual Heat Loss To Overburden\", \nlabel = \"A = 40_000 m^2\",\nlw = 3, \nlegend=:topright,\nlegendfontsize = 10,\nframe=:box)\nxgrid!(:on, :cadetblue, 2, :dashdot, 0.4)\nygrid!(:on, :cadetblue, 2, :dashdot, 0.4)\n\n\n\n\nAssuming an injection pressure of 5.0 MPa and a steam quality of 70%, and assuming that the condensate is produced at an average temperature of \\(\\mathrm T_{o} + 0.75 * (T_{s} - T_{o})\\), the annual steam requirement needed to compensate for the heat loss to overburden can be estimated as follows:\n\nP = 5.0 # MPa\n\nx = 0.7\n\nT_sat = Tsat(P) # K\nH_vap = SatHV(T_sat) / 1e6 # MJ/kg\nH_liq = SatHL(T_sat) / 1e6 # MJ/kg\nH_wetsteam = (1 - x) * H_liq + x * H_vap # MJ/kg\n\nT_cond = To + 0.75 * (Ts - To) # C\nH_cond = SpecificH(P, T_cond + 273.15) / 1e3 # MJ/kg\n\nnet_heat_per_tonne_of_steam = (H_wetsteam - H_cond) * 1000; # MJ/tonne\n\ndf_Q_sub[!, :steam_requirement] = df_Q_sub.Q_incremental ./ \n                                    net_heat_per_tonne_of_steam\n\n@df df_Q_sub bar(:year, :steam_requirement,\nxlabel = \"Time (Year)\",\nylabel = \"Steam requirement (tonnes)\",\ntitle = \"Annual Steam Requirement\",\nlabel = \"A = 40_000 m^2\",\nlw = 3,\nlegend=:topright,\nlegendfontsize = 10,\nframe=:box)\nxgrid!(:on, :cadetblue, 2, :dashdot, 0.4)\nygrid!(:on, :cadetblue, 2, :dashdot, 0.4)"
  },
  {
    "objectID": "posts/julia-posts/Thermal Recovery Part II/index.html#surface-area-increases-with-time-heat-transfer-from-a-spreading-hot-zone",
    "href": "posts/julia-posts/Thermal Recovery Part II/index.html#surface-area-increases-with-time-heat-transfer-from-a-spreading-hot-zone",
    "title": "Thermal Recovery - Part II",
    "section": "2. Surface area increases with time (Heat transfer from a spreading hot zone)",
    "text": "2. Surface area increases with time (Heat transfer from a spreading hot zone)\nIn this scenario, heat is transferred to the overburden from a hot zone that expands over time. (Butler 1997) has provided a general solution for this problem when the surface area of the hot zone increases as a power of time. When the surface area of the hot zone increases linearly with time, the cumulative and rate of heat loss to overburden are given by Equation 4 and Equation 5, respectively.\n\\[Q = \\frac{4}{3} \\frac{(T_{s} - T_{o}) K \\cdot \\dot{A}}{\\sqrt{\\pi \\alpha}} t^{1.5}  \\tag{4}\\]\n\\[q = 2 (T_{s} - T_{o}) K \\cdot \\dot{A} \\cdot \\sqrt{\\frac{t}{\\pi \\alpha}}  \\tag{5}\\]\nwhere \\(\\dot{A}\\) is the rate of change of surface area and is assumed to be constant.\nSimilar to the previous case, we define two functions that calculate the cumulative heat loss and rate of heat loss to overburden.\n\nfunction cumulative_heat_loss_variable_area(Ts, To, α, K, A_dot, t)\n    Q = 4.0 / 3.0 * (Ts - To) * K * A_dot / sqrt.(π * α) .* t.^1.5\n    return Q\nend;\n\n\nfunction heat_loss_rate_variable_area(Ts, To, α, K, A_dot, t)\n    q = 2.0 * (Ts - To) * K * A_dot .* sqrt.(t / (π * α))\n    return q\nend;\n\nLet’s calculate the cumulative heat loss to overburden over a period of 10 years, where the surface area increases linearly with time at a rate of 4000/365 \\((\\mathrm m^2/ \\mathrm day)\\).\n\nt = 0:1.0:10 * 365 # days\n\nA_dot  = 4000.0 / 365.0 # m^2/day\n\nQ = cumulative_heat_loss_variable_area(Ts, To, α, K, A_dot, t) / 1e6 # MJ\n\ndf_Q = DataFrame(t = t, year = t / 365.0, Q = Q);\n\n@df df_Q plot(:t, :Q, \nxlabel = \"Time (days)\", \nylabel = \"Heat loss to overburden (MJoules)\",\nlabel = \"A_dot = 4000 m^2/year\",\nlw = 3, \nlegend=:topleft,\nlegendfontsize = 10,\nframe=:box)\nxgrid!(:on, :cadetblue, 2, :dashdot, 0.4)\nygrid!(:on, :cadetblue, 2, :dashdot, 0.4)\n\n\n\n\nThe annual heat loss to overburden and the steam requirement to compensate for the heat loss to overburden are calculated as follows:\n\ndf_Q_sub = df_Q[df_Q.year .== round.(df_Q.year, digits = 0), :]\ndf_Q_sub[!, :Q_lag] = lag(df_Q_sub.Q, 1)\ndf_Q_sub[!, :Q_incremental] = df_Q_sub.Q - df_Q_sub.Q_lag\ndf_Q_sub[!, :steam_requirement] = df_Q_sub.Q_incremental ./ \n                                                net_heat_per_tonne_of_steam\n\n@df df_Q_sub bar(:year, :steam_requirement,\nxlabel = \"Time (Year)\",\nylabel = \"Steam requirement (tonnes)\",\ntitle = \"Annual Steam Requirement\",\nlabel = \"A_dot = 4000 m^2/year\",\nlw = 3,\nlegend=:topleft,\nlegendfontsize = 10,\nframe=:box)\nxgrid!(:on, :cadetblue, 2, :dashdot, 0.4)\nygrid!(:on, :cadetblue, 2, :dashdot, 0.4)\n\n\n\n\nThe rate of heat loss to overburden is calculated as follows:\n\nq = heat_loss_rate_variable_area(Ts, To, α, K, A_dot, t) / 1e6 # MJ/day\n\ndf_q = DataFrame(t = t, year = t / 365.0, q = q)\n\n@df df_q plot(:t, :q, \nxlabel = \"Time (days)\", \nylabel = \"Rate of heat loss to overburden (MJoules/day)\",\nlabel = \"A_dot = 4000 m^2/year\",\nlw = 3, \nlegend=:topleft,\nlegendfontsize = 10,\nframe=:box)\nxgrid!(:on, :cadetblue, 2, :dashdot, 0.4)\nygrid!(:on, :cadetblue, 2, :dashdot, 0.4)"
  },
  {
    "objectID": "posts/julia-posts/Thermal Recovery Part II/index.html#surface-area-increases-to-a-limit-and-then-stops-expanding",
    "href": "posts/julia-posts/Thermal Recovery Part II/index.html#surface-area-increases-to-a-limit-and-then-stops-expanding",
    "title": "Thermal Recovery - Part II",
    "section": "3. Surface area increases to a limit and then stops expanding",
    "text": "3. Surface area increases to a limit and then stops expanding\nIn this scenario, the surface area that is exposed to the steam chamber increases linearly with time until it reaches a certain limit and then stops expanding. This situation is common in steam-assisted gravity drainage (SAGD) operations. The solution to this problem is also provided by (Butler 1997). The linear expansion period occurs during the first \\(t_{1}\\) days. After that, the surface area remains constant and no further expansion occurs.\nFor \\(t \\leq t_{1}\\):\n\\[\nQ = \\frac{4}{3} \\frac{ (T_{s} - T_{o}) \\cdot K \\cdot \\dot{A}} {\\sqrt{\\pi \\alpha}} [t^{1.5}]\n\\]\nand for \\(t \\gt t_{1}\\):\n\\[\n% \\begin{split}\nQ = \\frac{4}{3} \\frac{ (T_{s} - T_{o}) \\cdot K \\cdot \\dot{A}} {\\sqrt{\\pi \\alpha}} [t^{1.5} - (t - t_{1})^{1.5}]\n% \\end{split}\n\\]\nwhere \\(\\dot{A}\\) is the rate of change of surface area.\nThe following function estimates the cumulative heat loss to overburden:\n\nfunction cumulative_heat_loss_variable_area_limit(Ts, To, α, K, A_dot, t, t1)\n    \n    Q = zeros(length(t))\n        for i in 1:length(t)\n            if t[i] <= t1\n                Q[i] = 4.0 / 3.0 * (Ts - To) * K * A_dot / \n                sqrt(π * α) * (t[i] ^ 1.5)\n            else\n                Q[i] = 4.0 / 3.0 * (Ts - To) * K * A_dot /\n                sqrt(π * α) * (t[i] ^ 1.5 - (t[i] - t1) ^ 1.5)\n            end\n        end\n    return Q\nend;\n\nFor this scenario, we will estimate the cumulative heat loss to overburden over a surface area that linearly increases with time for 4 years and then stops expanding for the next 6 years, with a total surface area of 40,000 \\(\\mathrm m^{2}\\).\n\nt = 0:1.0:10 * 365 # days\n\nt1 = 4 * 365 # days\n\nA_dot  = 10000.0 / 365.0 # m^2/day\n\nQ = cumulative_heat_loss_variable_area_limit(Ts, To, α, K, A_dot, t, t1) / \n                                                                        1e6 # MJ\n\ndf_Q = DataFrame(t = t, year = t / 365.0, Q = Q);\n\n@df df_Q plot(:t, :Q, \nxlabel = \"Time (days)\", \nylabel = \"Heat loss to overburden (MJoules)\",\nlabel = \"A_dot = 10000 m^2/year\",\nlw = 3, \nlegend=:topleft,\nlegendfontsize = 10,\nframe=:box)\nxgrid!(:on, :cadetblue, 2, :dashdot, 0.4)\nygrid!(:on, :cadetblue, 2, :dashdot, 0.4)\n\n\n\n\nThe annual heat loss to overburden and the steam requirement to compensate for the heat loss to overburden can be calculated as follows:\n\ndf_Q_sub = df_Q[df_Q.year .== round.(df_Q.year, digits = 0), :]\ndf_Q_sub[!, :Q_lag] = lag(df_Q_sub.Q, 1)\ndf_Q_sub[!, :Q_incremental] = df_Q_sub.Q - df_Q_sub.Q_lag\ndf_Q_sub[!, :steam_requirement] = df_Q_sub.Q_incremental ./ \n                                        net_heat_per_tonne_of_steam\n\n@df df_Q_sub bar(:year, :steam_requirement,\nxlabel = \"Time (Year)\",\nylabel = \"Steam requirement (tonnes)\",\ntitle = \"Annual Steam Requirement\",\nlabel = \"A_dot = 10000 m^2/year\",\nlw = 3,\nlegend=:topright,\nlegendfontsize = 10,\nframe=:box)\nxgrid!(:on, :cadetblue, 2, :dashdot, 0.4)\nygrid!(:on, :cadetblue, 2, :dashdot, 0.4)\n\n\n\n\nThe rate of heat loss to overburden can be estimated as follows:\nFor \\(t \\leq t_{1}\\):\n\\[q = 2 \\frac{(T_{s} - T_{o}) \\cdot K \\cdot \\dot{A}} {\\sqrt{\\pi \\alpha}} [t^{0.5}] \\]\nand for \\(t \\gt t_{1}\\):\n\\[q = 2 \\frac{(T_{s} - T_{o}) \\cdot K \\cdot \\dot{A}} {\\sqrt{\\pi \\alpha}} [t^{0.5} - (t - t_{1})^{0.5}] \\]\nHere’s a function that calculates the rate of heat loss to overburden for the scenario where surface area increases to a limit and then stops expanding.\n\nfunction heat_loss_rate_variable_area_limit(Ts, To, α, κ, A_dot, t, t1)\n    \n    q = zeros(length(t))\n    for i in 1:length(t)\n        if t[i] <= t1\n            q[i] = 2.0 * (Ts - To) * K * A_dot / sqrt(π * α) * \n            (t[i] ^ 0.5)\n        else\n            q[i] = 2.0 * (Ts - To) * K * A_dot / sqrt(π * α) * \n            (t[i] ^ 0.5 - (t[i] - t1) ^ 0.5)\n        end\n    end\n    return q\nend;\n\nThe results for the rate of heat loss to overburden are shown below.\n\nq = heat_loss_rate_variable_area_limit(Ts, To, α, K, A_dot, t, t1) / 1e6 # MJ/day\n\ndf_q = DataFrame(t = t, year = t / 365.0, q = q)\n\n@df df_q plot(:t, :q, \nxlabel = \"Time (days)\", \nylabel = \"Rate of heat loss to overburden (MJoules/day)\",\nlabel = \"A_dot = 10000 m^2/year\",\nlw = 3, \nlegend=:bottomright,\nlegendfontsize = 10,\nframe=:box)\nxgrid!(:on, :cadetblue, 2, :dashdot, 0.4)\nygrid!(:on, :cadetblue, 2, :dashdot, 0.4)"
  }
]